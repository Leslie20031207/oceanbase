# owner: bin.lb
# owner group: sql2

--disable_abort_on_error
--result_format 4

connect (syscon, $OBMYSQL_MS0,admin,$OBMYSQL_PWD,test,$OBMYSQL_PORT);
connection syscon;
sleep 2;

--disable_warnings
drop table if exists t1;
create table t1(c1 blob);
insert into t1 values('OceanBase');
sleep 2;
--enable_warnings


# hyperscan
ALTER SYSTEM SET regexp_engine = 'Hyperscan';
sleep 10;
# # Cases in which ICU and hyperscan perform consistently
# ## Zero parameters
SELECT REGEXP_COUNT();
# ## One parameter
SELECT REGEXP_COUNT('OceanBase');
# ## Two parameters
SELECT REGEXP_COUNT('OceanBase', 'a');
# ## Three parameters
SELECT REGEXP_COUNT('OceanBase', 'a', 1);
SELECT REGEXP_COUNT('OceanBase', 'a', 5);
SELECT REGEXP_COUNT('OceanBase', 'a', 8);
# ## Four parameters -> match_type
# ### Default case insensitive (depending on the current collation)
SELECT REGEXP_COUNT('OceanBase', '[a-n]+');
SELECT REGEXP_COUNT('OceanBase', 'o');
# ### 'c' is case sensitive
SELECT REGEXP_COUNT('OceanBase', 'b', 1, 'c');
# ### 'i' is case insensitive
SELECT REGEXP_COUNT('OceanBase', 'b', 1, 'i');
# ### 'm' multi-line mode
SELECT REGEXP_COUNT('Ocean\nBase', '^B');
SELECT REGEXP_COUNT('Ocean\nBase', '^B', 1, 'm');
# ### 'n' contains newlines
SELECT REGEXP_COUNT('Ocean\nBase', '.');
SELECT REGEXP_COUNT('Ocean\nBase', '.', 1, 'n');
SELECT REGEXP_COUNT('Ocean\nBase\rAntGroup', '.', 1, 'n');
SELECT REGEXP_COUNT('\n\r', '.', 1, 'n');
# ### 'u' unix lines
SELECT REGEXP_COUNT('Ocean\nBase\rAnt\r\nGroup', '^u', 1, 'm');
# ### Multiple match types
SELECT REGEXP_COUNT('A\nB\rC\r\nD\n\rE\036F\025G', 'e', 1, 'ci');
SELECT REGEXP_COUNT('A\nB\rC\r\nD\n\rE\036F\025G', 'e', 1, 'ic');
SELECT REGEXP_COUNT('A\nB\rC\r\nD\n\rE\036F\025G', '.e', 1, 'cn');
SELECT REGEXP_COUNT('A\nB\rC\r\nD\n\rE\036F\025G', '.e', 1, 'in');
# ## Multiple matching problem
SELECT REGEXP_COUNT('OceanBase', '[a-zA-Z]{2}');
# ## empty pattern
SELECT REGEXP_COUNT('OceanBase', '');
# ## blob type
SELECT REGEXP_COUNT(c1, 'a') from t1;

# # Inconsistencies between ICU and hyperscan
# ## embedded anchors: Hyperscan does not support characters before ^ and after $
SELECT REGEXP_COUNT('Ocean\nBase\rAnt\r\nGroup', '$u', 1, 'm');
SELECT REGEXP_COUNT('Ocean\nBase\rAnt\r\nGroup', '$u', 1, 'mu');
# ## hyperscan is not support too large NFA
SELECT REGEXP_COUNT('OceanBase', '(ewh|m?uit|f|snmv.g.gx[yofl]|.[^g][hbd])((.h|((y|vypfw|dfg{4}|x+|o.|y{8,}))+|k{9}t|cgp...gsk+)){17,}');
# ## vacuous patterns
SELECT REGEXP_COUNT('OceanBase', 'a?');
# ##illegal bounds
SELECT REGEXP_COUNT('OceanBase', 'a{0}');
# ## nothing to repeat
SELECT REGEXP_COUNT('OceanBase', 'a++');
# ## repeating boundaries is not allowed (UE-1007)
SELECT REGEXP_COUNT('OceanBase', '^?a');
# ## zero width asserts ("lookarounds")
SELECT REGEXP_COUNT('OceanBase', '(?=b)');
# ## atomic groups
SELECT REGEXP_COUNT('OceanBase', 'c(?>.{1,})n');
# ## possessive quantifiers
SELECT REGEXP_COUNT('OceanBase', '(ase|xyz){1,2}+');
# ## back-reference inside a repeat (also too big, actually)
SELECT REGEXP_COUNT('OceanBase', '^..\x02.{10,522}([^\00])\1{16}');
# ## unhandled subroutines and backrefs
SELECT REGEXP_COUNT('OceanBase', 'foo\\g''bar');
# ## truly enormous and with complicated assert resolution (UE-1107)
SELECT REGEXP_COUNT('OceanBase', '((c(p|p)h{2,}bh.|p|((((cq|j|c|(\\b)|.[^nbgn]|(\\B)[qfh]a)){10,12}|ih|a|mnde[pa].|.g)){5,8})){21,29}');
# ## bogus \g backrefs
SELECT REGEXP_COUNT('OceanBase', 'a\\g');
# ## malformed \g backrefs (see UE-950)
SELECT REGEXP_COUNT('OceanBase', '^(O)\\g');
# ## Non-greedy matching
SELECT REGEXP_COUNT('abcabc', 'a.+?c');
# ## The matching intervals of multiple groups of rules intersect
SELECT REGEXP_COUNT('aabbbbb', '^[ab]{1,3}(ab*|b)');
# ## A rule is matched multiple times and the matching Spaces intersect
SELECT REGEXP_COUNT('abcdef', '[^a]{2,3}');
# ## {n, m}
SELECT REGEXP_COUNT('XBBB', 'a{,3}B');
# ## (?)
SELECT REGEXP_COUNT('ab', 'a(?)b');
# ## timeout
SELECT REGEXP_COUNT('abd', '(|ab)*?d');
# ## Anonymous capture (non-capture grouping)
SELECT REGEXP_COUNT('< >', '<(?x:[a b])>');
# ## named capture
SELECT REGEXP_COUNT('bon-bon', '(?<A>bon)-\g{A}');
# ## [] grammar problem
SELECT REGEXP_COUNT('p', '[abc[:x\]pq]');
# ## Different interpretations of \0
SELECT REGEXP_COUNT('abc', 'a\0yz');
# ## Some patterns are not supported by the ICU
SELECT REGEXP_COUNT('a:axyz', '(?\'abc\'\w+):\g{abc}{2}');
# ## '^' and '$'
SELECT REGEXP_COUNT('Ocean\nBase', '^');
SELECT REGEXP_COUNT('Ocean\nBase', '^', 1, 'm');
SELECT REGEXP_COUNT('Ocean\nBase\rAntGroup', '^', 1, 'm');
SELECT REGEXP_COUNT('Ocean\nBase\rAntGroup', '^', 1, 'mu');
SELECT REGEXP_COUNT('Ocean\nBase\rAnt\r\nGroup', '^', 1, 'm');
SELECT REGEXP_COUNT('Ocean\nBase\rAnt\r\nGroup', '^', 1, 'mu');
SELECT REGEXP_COUNT('Ocean\nBase\rAntGroup', '$', 1, 'm');
SELECT REGEXP_COUNT('Ocean\nBase\rAntGroup', '$', 1, 'mu');
SELECT REGEXP_COUNT('Ocean\nBase\rAnt\r\nGroup', '$', 1, 'm');
SELECT REGEXP_COUNT('Ocean\nBase\rAnt\r\nGroup', '$', 1, 'mu');
# ## '.' and match_type='n'
SELECT REGEXP_COUNT('Ocean\nBase\rAntGroup', '.');
SELECT REGEXP_COUNT('\n\r', '.');
# ## hyperscan is not support match_type='u'
SELECT REGEXP_COUNT('Ocean\nBase\rAntGroup', '.', 1, 'u');
SELECT REGEXP_COUNT('\n\r', '.', 1, 'u');
# ## Newline: Hyperscan unix_lines By default, this parameter is not supported
SELECT REGEXP_COUNT('A\nB\rC\r\nD\n\rE\036F\025G', '^e', 1, 'im');
# ## hyperscan is not support match_type='x'
SELECT REGEXP_COUNT('abc', 'a', 1, 'x');


# ICU
ALTER SYSTEM SET regexp_engine = 'ICU';
sleep 10;
# # Cases in which ICU and hyperscan perform consistently
# ## Zero parameters
SELECT REGEXP_COUNT();
# ## One parameter
SELECT REGEXP_COUNT('OceanBase');
# ## Two parameters
SELECT REGEXP_COUNT('OceanBase', 'a');
# ## Three parameters
SELECT REGEXP_COUNT('OceanBase', 'a', 1);
SELECT REGEXP_COUNT('OceanBase', 'a', 5);
SELECT REGEXP_COUNT('OceanBase', 'a', 8);
# ## Four parameters -> match_type
# ### Default case insensitive (depending on the current collation)
SELECT REGEXP_COUNT('OceanBase', '[a-n]+');
SELECT REGEXP_COUNT('OceanBase', 'o');
# ### 'c' is case sensitive
SELECT REGEXP_COUNT('OceanBase', 'b', 1, 'c');
# ### 'i' is case insensitive
SELECT REGEXP_COUNT('OceanBase', 'b', 1, 'i');
# ### 'm' multi-line mode
SELECT REGEXP_COUNT('Ocean\nBase', '^B');
SELECT REGEXP_COUNT('Ocean\nBase', '^B', 1, 'm');
# ### 'n' contains newlines
SELECT REGEXP_COUNT('Ocean\nBase', '.');
SELECT REGEXP_COUNT('Ocean\nBase', '.', 1, 'n');
SELECT REGEXP_COUNT('Ocean\nBase\rAntGroup', '.', 1, 'n');
SELECT REGEXP_COUNT('\n\r', '.', 1, 'n');
# ### 'u' unix lines
SELECT REGEXP_COUNT('Ocean\nBase\rAnt\r\nGroup', '^u', 1, 'm');
# ### Multiple match types
SELECT REGEXP_COUNT('A\nB\rC\r\nD\n\rE\036F\025G', 'e', 1, 'ci');
SELECT REGEXP_COUNT('A\nB\rC\r\nD\n\rE\036F\025G', 'e', 1, 'ic');
SELECT REGEXP_COUNT('A\nB\rC\r\nD\n\rE\036F\025G', '.e', 1, 'cn');
SELECT REGEXP_COUNT('A\nB\rC\r\nD\n\rE\036F\025G', '.e', 1, 'in');
# ## Multiple matching problem
SELECT REGEXP_COUNT('OceanBase', '[a-zA-Z]{2}');
# ## empty pattern
SELECT REGEXP_COUNT('OceanBase', '');
# ## blob type
SELECT REGEXP_COUNT(c1, 'a') from t1;

# # Inconsistencies between ICU and hyperscan
# ## embedded anchors: Hyperscan does not support characters before ^ and after $
SELECT REGEXP_COUNT('Ocean\nBase\rAnt\r\nGroup', '$u', 1, 'm');
SELECT REGEXP_COUNT('Ocean\nBase\rAnt\r\nGroup', '$u', 1, 'mu');
# ## hyperscan is not support too large NFA
SELECT REGEXP_COUNT('OceanBase', '(ewh|m?uit|f|snmv.g.gx[yofl]|.[^g][hbd])((.h|((y|vypfw|dfg{4}|x+|o.|y{8,}))+|k{9}t|cgp...gsk+)){17,}');
# ## vacuous patterns
SELECT REGEXP_COUNT('OceanBase', 'a?');
# ##illegal bounds
SELECT REGEXP_COUNT('OceanBase', 'a{0}');
# ## nothing to repeat
SELECT REGEXP_COUNT('OceanBase', 'a++');
# ## repeating boundaries is not allowed (UE-1007)
SELECT REGEXP_COUNT('OceanBase', '^?a');
# ## zero width asserts ("lookarounds")
SELECT REGEXP_COUNT('OceanBase', '(?=b)');
# ## atomic groups
SELECT REGEXP_COUNT('OceanBase', 'c(?>.{1,})n');
# ## possessive quantifiers
SELECT REGEXP_COUNT('OceanBase', '(ase|xyz){1,2}+');
# ## back-reference inside a repeat (also too big, actually)
SELECT REGEXP_COUNT('OceanBase', '^..\x02.{10,522}([^\00])\1{16}');
# ## unhandled subroutines and backrefs
SELECT REGEXP_COUNT('OceanBase', 'foo\\g''bar');
# ## truly enormous and with complicated assert resolution (UE-1107)
SELECT REGEXP_COUNT('OceanBase', '((c(p|p)h{2,}bh.|p|((((cq|j|c|(\\b)|.[^nbgn]|(\\B)[qfh]a)){10,12}|ih|a|mnde[pa].|.g)){5,8})){21,29}');
# ## bogus \g backrefs
SELECT REGEXP_COUNT('OceanBase', 'a\\g');
# ## malformed \g backrefs (see UE-950)
SELECT REGEXP_COUNT('OceanBase', '^(O)\\g');
# ## Non-greedy matching
SELECT REGEXP_COUNT('abcabc', 'a.+?c');
# ## The matching intervals of multiple groups of rules intersect
SELECT REGEXP_COUNT('aabbbbb', '^[ab]{1,3}(ab*|b)');
# ## A rule is matched multiple times and the matching Spaces intersect
SELECT REGEXP_COUNT('abcdef', '[^a]{2,3}');
# ## {n, m}
SELECT REGEXP_COUNT('XBBB', 'a{,3}B');
# ## (?)
SELECT REGEXP_COUNT('ab', 'a(?)b');
# ## timeout
SELECT REGEXP_COUNT('abd', '(|ab)*?d');
# ## Anonymous capture (non-capture grouping)
SELECT REGEXP_COUNT('< >', '<(?x:[a b])>');
# ## named capture
SELECT REGEXP_COUNT('bon-bon', '(?<A>bon)-\g{A}');
# ## [] grammar problem
SELECT REGEXP_COUNT('p', '[abc[:x\]pq]');
# ## Different interpretations of \0
SELECT REGEXP_COUNT('abc', 'a\0yz');
# ## Some patterns are not supported by the ICU
SELECT REGEXP_COUNT('a:axyz', '(?\'abc\'\w+):\g{abc}{2}');
# ## '^' and '$'
SELECT REGEXP_COUNT('Ocean\nBase', '^');
SELECT REGEXP_COUNT('Ocean\nBase', '^', 1, 'm');
SELECT REGEXP_COUNT('Ocean\nBase\rAntGroup', '^', 1, 'm');
SELECT REGEXP_COUNT('Ocean\nBase\rAntGroup', '^', 1, 'mu');
SELECT REGEXP_COUNT('Ocean\nBase\rAnt\r\nGroup', '^', 1, 'm');
SELECT REGEXP_COUNT('Ocean\nBase\rAnt\r\nGroup', '^', 1, 'mu');
SELECT REGEXP_COUNT('Ocean\nBase\rAntGroup', '$', 1, 'm');
SELECT REGEXP_COUNT('Ocean\nBase\rAntGroup', '$', 1, 'mu');
SELECT REGEXP_COUNT('Ocean\nBase\rAnt\r\nGroup', '$', 1, 'm');
SELECT REGEXP_COUNT('Ocean\nBase\rAnt\r\nGroup', '$', 1, 'mu');
# ## '.' and match_type='n'
SELECT REGEXP_COUNT('Ocean\nBase\rAntGroup', '.');
SELECT REGEXP_COUNT('\n\r', '.');
# ## hyperscan is not support match_type='u'
SELECT REGEXP_COUNT('Ocean\nBase\rAntGroup', '.', 1, 'u');
SELECT REGEXP_COUNT('\n\r', '.', 1, 'u');
# ## Newline: Hyperscan unix_lines By default, this parameter is not supported
SELECT REGEXP_COUNT('A\nB\rC\r\nD\n\rE\036F\025G', '^e', 1, 'im');
# ## hyperscan is not support match_type='x'
SELECT REGEXP_COUNT('abc', 'a', 1, 'x');


connection syscon;
--sleep 2
