# owner: bin.lb
# owner group: sql2

--disable_abort_on_error
--result_format 4

connect (syscon, $OBMYSQL_MS0,admin,$OBMYSQL_PWD,test,$OBMYSQL_PORT);
connection syscon;
sleep 2;


--disable_warnings
drop table if exists t1;
CREATE TABLE t1(c1 VARCHAR(100)) with column group (each column);
insert into t1 values('OceanBase');
drop table if exists t2;
CREATE TABLE t2(c1 VARCHAR(100)) with column group (each column);
insert into t2 values('Ocean\nBase');
drop table if exists t3;
CREATE TABLE t3(c1 VARCHAR(100)) with column group (each column);
insert into t3 values('Ocean\nBase\rAntGroup');
drop table if exists t4;
CREATE TABLE t4(c1 VARCHAR(100)) with column group (each column);
insert into t4 values('Ocean\nBase\rAnt\r\nGroup');
drop table if exists t5;
CREATE TABLE t5(c1 VARCHAR(100)) with column group (each column);
insert into t5 values('\n\r');
drop table if exists t6;
CREATE TABLE t6(c1 VARCHAR(100)) with column group (each column);
insert into t6 values('A\nB\rC\r\nD\n\rE\036F\025G');
drop table if exists t7;
create table t7(c1 blob);
insert into t7 values('OceanBase');
sleep 2;
--enable_warnings


# hyperscan
ALTER SYSTEM SET regexp_engine = 'Hyperscan';
sleep 10;
# # Cases in which ICU and hyperscan perform consistently
# ## Zero parameters
SELECT REGEXP_REPLACE();
SELECT REGEXP_REPLACE() from t1;
# ## One parameter
SELECT REGEXP_REPLACE('OceanBase');
SELECT REGEXP_REPLACE(c1) from t1;
# ## Two parameters
SELECT REGEXP_REPLACE('OceanBase', 'a');
SELECT REGEXP_REPLACE(c1, 'a') from t1;
# ## Three parameters
SELECT REGEXP_REPLACE('OceanBase', 'a', '2');
SELECT REGEXP_REPLACE(c1, 'a', '2') from t1;
# ## Four parameters
SELECT REGEXP_REPLACE('OceanBase', 'a', '2', 7);
SELECT REGEXP_REPLACE(c1, 'a', '2', 7) from t1;
# ## Five parameters
SELECT REGEXP_REPLACE('OceanBase', 'a', '2', 1, 2);
SELECT REGEXP_REPLACE(c1, 'a', '2', 1, 2) from t1;
# ## Six parameters -> match_type
# ### Default case insensitive (depending on the current collation)
SELECT REGEXP_REPLACE('OceanBase', '[a-n]+', '2');
SELECT REGEXP_REPLACE(c1, '[a-n]+', '2') from t1;
SELECT REGEXP_REPLACE('OceanBase', 'o', '2');
SELECT REGEXP_REPLACE(c1, 'o', '2') from t1;
# ### 'c' is case sensitive
SELECT REGEXP_REPLACE('OceanBase', 'b', '2', 1, 0, 'c');
SELECT REGEXP_REPLACE(c1, 'b', '2', 1, 0, 'c') from t1;
# ### 'i' is case insensitive
SELECT REGEXP_REPLACE('OceanBase', 'b', '2', 1, 0, 'i');
SELECT REGEXP_REPLACE(c1, 'b', '2', 1, 0, 'i') from t1;
# ### 'm' multi-line mode
SELECT REGEXP_REPLACE('Ocean\nBase', '^B', '2', 1, 0);
SELECT REGEXP_REPLACE(c1, '^B', '2', 1, 0) from t2;
SELECT REGEXP_REPLACE('Ocean\nBase', '^B', '2', 1, 0, 'm');
SELECT REGEXP_REPLACE(c1, '^B', '2', 1, 0, 'm') from t2;
# ### 'n' contains newlines
SELECT REGEXP_REPLACE('Ocean\nBase', '.', '2', 1, 0);
SELECT REGEXP_REPLACE(c1, '.', '2', 1, 0) from t2;
SELECT REGEXP_REPLACE('Ocean\nBase', '.', '2', 1, 0, 'n');
SELECT REGEXP_REPLACE(c1, '.', '2', 1, 0, 'n') from t2;
SELECT length(REGEXP_REPLACE('Ocean\nBase\rAntGroup', '.', '22', 1, 0, 'n'));
SELECT length(REGEXP_REPLACE(c1, '.', '22', 1, 0, 'n')) from t3;
SELECT REGEXP_REPLACE('\n\r', '.', '2', 1, 0, 'n');
SELECT REGEXP_REPLACE(c1, '.', '2', 1, 0, 'n') from t5;
# ### 'u' unix lines
SELECT length(REGEXP_REPLACE('Ocean\nBase\rAnt\r\nGroup', '^u', '2', 1, 0, 'm'));
SELECT length(REGEXP_REPLACE(c1, '^u', '2', 1, 0, 'm')) from t4;
# ### Multiple match types
SELECT length(REGEXP_REPLACE('A\nB\rC\r\nD\n\rE\036F\025G', 'e', '222', 1, 0, 'ci'));
SELECT length(REGEXP_REPLACE(c1, 'e', '222', 1, 0, 'ci')) from t6;
SELECT length(REGEXP_REPLACE('A\nB\rC\r\nD\n\rE\036F\025G', 'e', '222', 1, 0, 'ic'));
SELECT length(REGEXP_REPLACE(c1, 'e', '222', 1, 0, 'ic')) from t6;
SELECT length(REGEXP_REPLACE('A\nB\rC\r\nD\n\rE\036F\025G', '.e', '222', 1, 0, 'cn'));
SELECT length(REGEXP_REPLACE(c1, '.e', '222', 1, 0, 'cn')) from t6;
SELECT length(REGEXP_REPLACE('A\nB\rC\r\nD\n\rE\036F\025G', '.e', '222', 1, 0, 'in'));
SELECT length(REGEXP_REPLACE(c1, '.e', '222', 1, 0, 'in')) from t6;
# ## Multiple matching problem
SELECT REGEXP_REPLACE('OceanBase', '[a-zA-Z]{2}', '2');
SELECT REGEXP_REPLACE(c1, '[a-zA-Z]{2}', '2') from t1;
# ## empty pattern
SELECT REGEXP_REPLACE('OceanBase', '', '2');
SELECT REGEXP_REPLACE(c1, '', '2') from t1;
# ## occurrence is too big
SELECT REGEXP_REPLACE('OceanBase', 'a', '2', 1, 3);
SELECT REGEXP_REPLACE(c1, 'a', '2', 1, 3) from t1;
# ## blob type
SELECT REGEXP_REPLACE(c1, 'a', '2') from t7;

# # Inconsistencies between ICU and hyperscan
# ## embedded anchors: Hyperscan does not support characters before ^ and after $
SELECT length(REGEXP_REPLACE('Ocean\nBase\rAnt\r\nGroup', '$u', '2', 1, 0, 'm'));
SELECT length(REGEXP_REPLACE(c1, '$u', '2', 1, 0, 'm')) from t4;
SELECT length(REGEXP_REPLACE('Ocean\nBase\rAnt\r\nGroup', '$u', '2', 1, 0, 'mu'));
SELECT length(REGEXP_REPLACE(c1, '$u', '2', 1, 0, 'mu')) from t4;
# ## hyperscan is not support too large NFA
SELECT REGEXP_REPLACE('OceanBase', '(ewh|m?uit|f|snmv.g.gx[yofl]|.[^g][hbd])((.h|((y|vypfw|dfg{4}|x+|o.|y{8,}))+|k{9}t|cgp...gsk+)){17,}', '2');
SELECT REGEXP_REPLACE(c1, '(ewh|m?uit|f|snmv.g.gx[yofl]|.[^g][hbd])((.h|((y|vypfw|dfg{4}|x+|o.|y{8,}))+|k{9}t|cgp...gsk+)){17,}', '2') from t1;
# ## vacuous patterns
SELECT REGEXP_REPLACE('OceanBase', 'a?', '2');
SELECT REGEXP_REPLACE(c1, 'a?', '2') from t1;
# ##illegal bounds
SELECT REGEXP_REPLACE('OceanBase', 'a{0}', '2');
SELECT REGEXP_REPLACE(c1, 'a{0}', '2') from t1;
# ## nothing to repeat
SELECT REGEXP_REPLACE('OceanBase', 'a++', '2');
SELECT REGEXP_REPLACE(c1, 'a++', '2') from t1;
# ## repeating boundaries is not allowed (UE-1007)
SELECT REGEXP_REPLACE('OceanBase', '^?a', '2');
SELECT REGEXP_REPLACE(c1, '^?a', '2') from t1;
# ## zero width asserts ("lookarounds")
SELECT REGEXP_REPLACE('OceanBase', '(?=b)', '2');
SELECT REGEXP_REPLACE(c1, '(?=b)', '2') from t1;
# ## atomic groups
SELECT REGEXP_REPLACE('OceanBase', 'c(?>.{1,})n', '2');
SELECT REGEXP_REPLACE(c1, 'c(?>.{1,})n', '2') from t1;
# ## possessive quantifiers
SELECT REGEXP_REPLACE('OceanBase', '(ase|xyz){1,2}+', '2');
SELECT REGEXP_REPLACE(c1, '(ase|xyz){1,2}+', '2') from t1;
# ## back-reference inside a repeat (also too big, actually)
SELECT REGEXP_REPLACE('OceanBase', '^..\x02.{10,522}([^\00])\1{16}', '2');
SELECT REGEXP_REPLACE(c1, '^..\x02.{10,522}([^\00])\1{16}', '2') from t1;
# ## unhandled subroutines and backrefs
SELECT REGEXP_REPLACE('OceanBase', 'foo\\g''bar', '2');
SELECT REGEXP_REPLACE(c1, 'foo\\g''bar', '2') from t1;
# ## truly enormous and with complicated assert resolution (UE-1107)
SELECT REGEXP_REPLACE('OceanBase', '((c(p|p)h{2,}bh.|p|((((cq|j|c|(\\b)|.[^nbgn]|(\\B)[qfh]a)){10,12}|ih|a|mnde[pa].|.g)){5,8})){21,29}', '2');
SELECT REGEXP_REPLACE(c1, '((c(p|p)h{2,}bh.|p|((((cq|j|c|(\\b)|.[^nbgn]|(\\B)[qfh]a)){10,12}|ih|a|mnde[pa].|.g)){5,8})){21,29}', '2') from t1;
# ## bogus \g backrefs
SELECT REGEXP_REPLACE('OceanBase', 'a\\g', '2');
SELECT REGEXP_REPLACE(c1, 'a\\g', '2') from t1;
# ## malformed \g backrefs (see UE-950)
SELECT REGEXP_REPLACE('OceanBase', '^(O)\\g', '2');
SELECT REGEXP_REPLACE(c1, '^(O)\\g', '2') from t1;
# ## Non-greedy matching
SELECT REGEXP_REPLACE('abcabc', 'a.+?c', '2');
# ## The matching intervals of multiple groups of rules intersect
SELECT REGEXP_REPLACE('aabbbbb', '^[ab]{1,3}(ab*|b)', '2');
# ## A rule is matched multiple times and the matching Spaces intersect
SELECT REGEXP_REPLACE('abcdef', '[^a]{2,3}', '2');
# ## {n, m}
SELECT REGEXP_REPLACE('XBBB', 'a{,3}B', '2');
# ## (?)
SELECT REGEXP_REPLACE('ab', 'a(?)b', '2');
# ## timeout
SELECT REGEXP_REPLACE('abd', '(|ab)*?d', '2');
# ## Anonymous capture (non-capture grouping)
SELECT REGEXP_REPLACE('< >', '<(?x:[a b])>', '2');
# ## named capture
SELECT REGEXP_REPLACE('bon-bon', '(?<A>bon)-\g{A}', '2');
# ## [] grammar problem
SELECT REGEXP_REPLACE('p', '[abc[:x\]pq]', '2');
# ## Different interpretations of \0
SELECT REGEXP_REPLACE('abc', 'a\0yz', '2');
# ## Some patterns are not supported by the ICU
SELECT REGEXP_REPLACE('a:axyz', '(?\'abc\'\w+):\g{abc}{2}', '2');
# ## '^' and '$'
SELECT REGEXP_REPLACE('Ocean\nBase', '^', '2', 1, 0);
SELECT REGEXP_REPLACE(c1, '^', '2', 1, 0) from t2;
SELECT REGEXP_REPLACE('Ocean\nBase', '^', '2', 1, 0, 'm');
SELECT REGEXP_REPLACE(c1, '^', '2', 1, 0, 'm') from t2;
SELECT length(REGEXP_REPLACE('Ocean\nBase\rAntGroup', '^', '2', 1, 0, 'm'));
SELECT length(REGEXP_REPLACE(c1, '^', '2', 1, 0, 'm')) from t3;
SELECT length(REGEXP_REPLACE('Ocean\nBase\rAntGroup', '^', '2', 1, 0, 'mu'));
SELECT length(REGEXP_REPLACE(c1, '^', '2', 1, 0, 'mu')) from t3;
SELECT length(REGEXP_REPLACE('Ocean\nBase\rAnt\r\nGroup', '^', '2', 1, 0, 'm'));
SELECT length(REGEXP_REPLACE(c1, '^', '2', 1, 0, 'm')) from t4;
SELECT length(REGEXP_REPLACE('Ocean\nBase\rAnt\r\nGroup', '^', '2', 1, 0, 'mu'));
SELECT length(REGEXP_REPLACE(c1, '^', '2', 1, 0, 'mu')) from t4;
SELECT length(REGEXP_REPLACE('Ocean\nBase\rAntGroup', '$', '2', 1, 0, 'm'));
SELECT length(REGEXP_REPLACE(c1, '$', '2', 1, 0, 'm')) from t3;
SELECT length(REGEXP_REPLACE('Ocean\nBase\rAntGroup', '$', '2', 1, 0, 'mu'));
SELECT length(REGEXP_REPLACE(c1, '$', '2', 1, 0, 'mu')) from t3;
SELECT length(REGEXP_REPLACE('Ocean\nBase\rAnt\r\nGroup', '$', '2', 1, 0, 'm'));
SELECT length(REGEXP_REPLACE(c1, '$', '2', 1, 0, 'm')) from t4;
SELECT length(REGEXP_REPLACE('Ocean\nBase\rAnt\r\nGroup', '$', '2', 1, 0, 'mu'));
SELECT length(REGEXP_REPLACE(c1, '$', '2', 1, 0, 'mu')) from t4;
# ## '.' and match_type='n'
SELECT length(REGEXP_REPLACE('Ocean\nBase\rAntGroup', '.', '22'));
SELECT length(REGEXP_REPLACE(c1, '.', '22')) from t3;
SELECT length(REGEXP_REPLACE('\n\r', '.', '22'));
SELECT length(REGEXP_REPLACE(c1, '.', '22')) from t5;
# ## match_type='u'
SELECT length(REGEXP_REPLACE('Ocean\nBase\rAntGroup', '.', '22', 1, 0, 'u'));
SELECT length(REGEXP_REPLACE(c1, '.', '22', 1, 0, 'u')) from t3;
SELECT REGEXP_REPLACE('\n\r', '.', '2', 1, 0, 'u');
SELECT REGEXP_REPLACE(c1, '.', '2', 1, 0, 'u') from t5;
# ## Newline: Hyperscan unix_lines By default, this parameter is not supported
SELECT length(REGEXP_REPLACE('A\nB\rC\r\nD\n\rE\036F\025G', '^e', '222', 1, 0, 'im'));
SELECT length(REGEXP_REPLACE(c1, '^e', '222', 1, 0, 'im')) from t6;


# ICU
ALTER SYSTEM SET regexp_engine = 'ICU';
sleep 10;
# # Cases in which ICU and hyperscan perform consistently
# ## Zero parameters
SELECT REGEXP_REPLACE();
SELECT REGEXP_REPLACE() from t1;
# ## One parameter
SELECT REGEXP_REPLACE('OceanBase');
SELECT REGEXP_REPLACE(c1) from t1;
# ## Two parameters
SELECT REGEXP_REPLACE('OceanBase', 'a');
SELECT REGEXP_REPLACE(c1, 'a') from t1;
# ## Three parameters
SELECT REGEXP_REPLACE('OceanBase', 'a', '2');
SELECT REGEXP_REPLACE(c1, 'a', '2') from t1;
# ## Four parameters
SELECT REGEXP_REPLACE('OceanBase', 'a', '2', 7);
SELECT REGEXP_REPLACE(c1, 'a', '2', 7) from t1;
# ## Five parameters
SELECT REGEXP_REPLACE('OceanBase', 'a', '2', 1, 2);
SELECT REGEXP_REPLACE(c1, 'a', '2', 1, 2) from t1;
# ## Six parameters -> match_type
# ### Default case insensitive (depending on the current collation)
SELECT REGEXP_REPLACE('OceanBase', '[a-n]+', '2');
SELECT REGEXP_REPLACE(c1, '[a-n]+', '2') from t1;
SELECT REGEXP_REPLACE('OceanBase', 'o', '2');
SELECT REGEXP_REPLACE(c1, 'o', '2') from t1;
# ### 'c' is case sensitive
SELECT REGEXP_REPLACE('OceanBase', 'b', '2', 1, 0, 'c');
SELECT REGEXP_REPLACE(c1, 'b', '2', 1, 0, 'c') from t1;
# ### 'i' is case insensitive
SELECT REGEXP_REPLACE('OceanBase', 'b', '2', 1, 0, 'i');
SELECT REGEXP_REPLACE(c1, 'b', '2', 1, 0, 'i') from t1;
# ### 'm' multi-line mode
SELECT REGEXP_REPLACE('Ocean\nBase', '^B', '2', 1, 0);
SELECT REGEXP_REPLACE(c1, '^B', '2', 1, 0) from t2;
SELECT REGEXP_REPLACE('Ocean\nBase', '^B', '2', 1, 0, 'm');
SELECT REGEXP_REPLACE(c1, '^B', '2', 1, 0, 'm') from t2;
# ### 'n' contains newlines
SELECT REGEXP_REPLACE('Ocean\nBase', '.', '2', 1, 0);
SELECT REGEXP_REPLACE(c1, '.', '2', 1, 0) from t2;
SELECT REGEXP_REPLACE('Ocean\nBase', '.', '2', 1, 0, 'n');
SELECT REGEXP_REPLACE(c1, '.', '2', 1, 0, 'n') from t2;
SELECT length(REGEXP_REPLACE('Ocean\nBase\rAntGroup', '.', '22', 1, 0, 'n'));
SELECT length(REGEXP_REPLACE(c1, '.', '22', 1, 0, 'n')) from t3;
SELECT REGEXP_REPLACE('\n\r', '.', '2', 1, 0, 'n');
SELECT REGEXP_REPLACE(c1, '.', '2', 1, 0, 'n') from t5;
# ### 'u' unix lines
SELECT length(REGEXP_REPLACE('Ocean\nBase\rAnt\r\nGroup', '^u', '2', 1, 0, 'm'));
SELECT length(REGEXP_REPLACE(c1, '^u', '2', 1, 0, 'm')) from t4;
# ### Multiple match types
SELECT length(REGEXP_REPLACE('A\nB\rC\r\nD\n\rE\036F\025G', 'e', '222', 1, 0, 'ci'));
SELECT length(REGEXP_REPLACE(c1, 'e', '222', 1, 0, 'ci')) from t6;
SELECT length(REGEXP_REPLACE('A\nB\rC\r\nD\n\rE\036F\025G', 'e', '222', 1, 0, 'ic'));
SELECT length(REGEXP_REPLACE(c1, 'e', '222', 1, 0, 'ic')) from t6;
SELECT length(REGEXP_REPLACE('A\nB\rC\r\nD\n\rE\036F\025G', '.e', '222', 1, 0, 'cn'));
SELECT length(REGEXP_REPLACE(c1, '.e', '222', 1, 0, 'cn')) from t6;
SELECT length(REGEXP_REPLACE('A\nB\rC\r\nD\n\rE\036F\025G', '.e', '222', 1, 0, 'in'));
SELECT length(REGEXP_REPLACE(c1, '.e', '222', 1, 0, 'in')) from t6;
# ## Multiple matching problem
SELECT REGEXP_REPLACE('OceanBase', '[a-zA-Z]{2}', '2');
SELECT REGEXP_REPLACE(c1, '[a-zA-Z]{2}', '2') from t1;
# ## empty pattern
SELECT REGEXP_REPLACE('OceanBase', '', '2');
SELECT REGEXP_REPLACE(c1, '', '2') from t1;
# ## occurrence is too big
SELECT REGEXP_REPLACE('OceanBase', 'a', '2', 1, 3);
SELECT REGEXP_REPLACE(c1, 'a', '2', 1, 3) from t1;
# ## blob type
SELECT REGEXP_REPLACE(c1, 'a', '2') from t7;

# # Inconsistencies between ICU and hyperscan
# ## embedded anchors: Hyperscan does not support characters before ^ and after $
SELECT length(REGEXP_REPLACE('Ocean\nBase\rAnt\r\nGroup', '$u', '2', 1, 0, 'm'));
SELECT length(REGEXP_REPLACE(c1, '$u', '2', 1, 0, 'm')) from t4;
SELECT length(REGEXP_REPLACE('Ocean\nBase\rAnt\r\nGroup', '$u', '2', 1, 0, 'mu'));
SELECT length(REGEXP_REPLACE(c1, '$u', '2', 1, 0, 'mu')) from t4;
# ## hyperscan is not support too large NFA
SELECT REGEXP_REPLACE('OceanBase', '(ewh|m?uit|f|snmv.g.gx[yofl]|.[^g][hbd])((.h|((y|vypfw|dfg{4}|x+|o.|y{8,}))+|k{9}t|cgp...gsk+)){17,}', '2');
SELECT REGEXP_REPLACE(c1, '(ewh|m?uit|f|snmv.g.gx[yofl]|.[^g][hbd])((.h|((y|vypfw|dfg{4}|x+|o.|y{8,}))+|k{9}t|cgp...gsk+)){17,}', '2') from t1;
# ## vacuous patterns
SELECT REGEXP_REPLACE('OceanBase', 'a?', '2');
SELECT REGEXP_REPLACE(c1, 'a?', '2') from t1;
# ##illegal bounds
SELECT REGEXP_REPLACE('OceanBase', 'a{0}', '2');
SELECT REGEXP_REPLACE(c1, 'a{0}', '2') from t1;
# ## nothing to repeat
SELECT REGEXP_REPLACE('OceanBase', 'a++', '2');
SELECT REGEXP_REPLACE(c1, 'a++', '2') from t1;
# ## repeating boundaries is not allowed (UE-1007)
SELECT REGEXP_REPLACE('OceanBase', '^?a', '2');
SELECT REGEXP_REPLACE(c1, '^?a', '2') from t1;
# ## zero width asserts ("lookarounds")
SELECT REGEXP_REPLACE('OceanBase', '(?=b)', '2');
SELECT REGEXP_REPLACE(c1, '(?=b)', '2') from t1;
# ## atomic groups
SELECT REGEXP_REPLACE('OceanBase', 'c(?>.{1,})n', '2');
SELECT REGEXP_REPLACE(c1, 'c(?>.{1,})n', '2') from t1;
# ## possessive quantifiers
SELECT REGEXP_REPLACE('OceanBase', '(ase|xyz){1,2}+', '2');
SELECT REGEXP_REPLACE(c1, '(ase|xyz){1,2}+', '2') from t1;
# ## back-reference inside a repeat (also too big, actually)
SELECT REGEXP_REPLACE('OceanBase', '^..\x02.{10,522}([^\00])\1{16}', '2');
SELECT REGEXP_REPLACE(c1, '^..\x02.{10,522}([^\00])\1{16}', '2') from t1;
# ## unhandled subroutines and backrefs
SELECT REGEXP_REPLACE('OceanBase', 'foo\\g''bar', '2');
SELECT REGEXP_REPLACE(c1, 'foo\\g''bar', '2') from t1;
# ## truly enormous and with complicated assert resolution (UE-1107)
SELECT REGEXP_REPLACE('OceanBase', '((c(p|p)h{2,}bh.|p|((((cq|j|c|(\\b)|.[^nbgn]|(\\B)[qfh]a)){10,12}|ih|a|mnde[pa].|.g)){5,8})){21,29}', '2');
SELECT REGEXP_REPLACE(c1, '((c(p|p)h{2,}bh.|p|((((cq|j|c|(\\b)|.[^nbgn]|(\\B)[qfh]a)){10,12}|ih|a|mnde[pa].|.g)){5,8})){21,29}', '2') from t1;
# ## bogus \g backrefs
SELECT REGEXP_REPLACE('OceanBase', 'a\\g', '2');
SELECT REGEXP_REPLACE(c1, 'a\\g', '2') from t1;
# ## malformed \g backrefs (see UE-950)
SELECT REGEXP_REPLACE('OceanBase', '^(O)\\g', '2');
SELECT REGEXP_REPLACE(c1, '^(O)\\g', '2') from t1;
# ## Non-greedy matching
SELECT REGEXP_REPLACE('abcabc', 'a.+?c', '2');
# ## The matching intervals of multiple groups of rules intersect
SELECT REGEXP_REPLACE('aabbbbb', '^[ab]{1,3}(ab*|b)', '2');
# ## A rule is matched multiple times and the matching Spaces intersect
SELECT REGEXP_REPLACE('abcdef', '[^a]{2,3}', '2');
# ## {n, m}
SELECT REGEXP_REPLACE('XBBB', 'a{,3}B', '2');
# ## (?)
SELECT REGEXP_REPLACE('ab', 'a(?)b', '2');
# ## timeout
SELECT REGEXP_REPLACE('abd', '(|ab)*?d', '2');
# ## Anonymous capture (non-capture grouping)
SELECT REGEXP_REPLACE('< >', '<(?x:[a b])>', '2');
# ## named capture
SELECT REGEXP_REPLACE('bon-bon', '(?<A>bon)-\g{A}', '2');
# ## [] grammar problem
SELECT REGEXP_REPLACE('p', '[abc[:x\]pq]', '2');
# ## Different interpretations of \0
SELECT REGEXP_REPLACE('abc', 'a\0yz', '2');
# ## Some patterns are not supported by the ICU
SELECT REGEXP_REPLACE('a:axyz', '(?\'abc\'\w+):\g{abc}{2}', '2');
# ## '^' and '$'
SELECT REGEXP_REPLACE('Ocean\nBase', '^', '2', 1, 0);
SELECT REGEXP_REPLACE(c1, '^', '2', 1, 0) from t2;
SELECT REGEXP_REPLACE('Ocean\nBase', '^', '2', 1, 0, 'm');
SELECT REGEXP_REPLACE(c1, '^', '2', 1, 0, 'm') from t2;
SELECT length(REGEXP_REPLACE('Ocean\nBase\rAntGroup', '^', '2', 1, 0, 'm'));
SELECT length(REGEXP_REPLACE(c1, '^', '2', 1, 0, 'm')) from t3;
SELECT length(REGEXP_REPLACE('Ocean\nBase\rAntGroup', '^', '2', 1, 0, 'mu'));
SELECT length(REGEXP_REPLACE(c1, '^', '2', 1, 0, 'mu')) from t3;
SELECT length(REGEXP_REPLACE('Ocean\nBase\rAnt\r\nGroup', '^', '2', 1, 0, 'm'));
SELECT length(REGEXP_REPLACE(c1, '^', '2', 1, 0, 'm')) from t4;
SELECT length(REGEXP_REPLACE('Ocean\nBase\rAnt\r\nGroup', '^', '2', 1, 0, 'mu'));
SELECT length(REGEXP_REPLACE(c1, '^', '2', 1, 0, 'mu')) from t4;
SELECT length(REGEXP_REPLACE('Ocean\nBase\rAntGroup', '$', '2', 1, 0, 'm'));
SELECT length(REGEXP_REPLACE(c1, '$', '2', 1, 0, 'm')) from t3;
SELECT length(REGEXP_REPLACE('Ocean\nBase\rAntGroup', '$', '2', 1, 0, 'mu'));
SELECT length(REGEXP_REPLACE(c1, '$', '2', 1, 0, 'mu')) from t3;
SELECT length(REGEXP_REPLACE('Ocean\nBase\rAnt\r\nGroup', '$', '2', 1, 0, 'm'));
SELECT length(REGEXP_REPLACE(c1, '$', '2', 1, 0, 'm')) from t4;
SELECT length(REGEXP_REPLACE('Ocean\nBase\rAnt\r\nGroup', '$', '2', 1, 0, 'mu'));
SELECT length(REGEXP_REPLACE(c1, '$', '2', 1, 0, 'mu')) from t4;
# ## '.' and match_type='n'
SELECT length(REGEXP_REPLACE('Ocean\nBase\rAntGroup', '.', '22'));
SELECT length(REGEXP_REPLACE(c1, '.', '22')) from t3;
SELECT length(REGEXP_REPLACE('\n\r', '.', '22'));
SELECT length(REGEXP_REPLACE(c1, '.', '22')) from t5;
# ## match_type='u'
SELECT length(REGEXP_REPLACE('Ocean\nBase\rAntGroup', '.', '22', 1, 0, 'u'));
SELECT length(REGEXP_REPLACE(c1, '.', '22', 1, 0, 'u')) from t3;
SELECT REGEXP_REPLACE('\n\r', '.', '2', 1, 0, 'u');
SELECT REGEXP_REPLACE(c1, '.', '2', 1, 0, 'u') from t5;
# ## Newline: Hyperscan unix_lines By default, this parameter is not supported
SELECT length(REGEXP_REPLACE('A\nB\rC\r\nD\n\rE\036F\025G', '^e', '222', 1, 0, 'im'));
SELECT length(REGEXP_REPLACE(c1, '^e', '222', 1, 0, 'im')) from t6;


connection syscon;
--sleep 2
