result_format: 4
explain_protocol: 2
DROP DATABASE IF EXISTS DB_CONST_EXPR_PROPAGATE;
CREATE DATABASE DB_CONST_EXPR_PROPAGATE;
USE DB_CONST_EXPR_PROPAGATE;

drop table if exists t1, t2, t3, target;

create table t1(c1 int, c2 int, c3 int, c4 int, c5 int, c6 int);
create table t2(c1 int, c2 int, c3 int);
create table t3(c1 int, c2 varchar(64), c3 varchar(64));
create table target(c1 int, c2 int, c3 int);

insert/*trace*/ into t1 values(1,1,1,1,1,1), (2,2,2,2,2,2), (3,3,3,3,3,3), (4,4,4,4,4,4), (5,5,5,5,5,5);
insert/*trace*/ into t2 values(NULL, NULL, NULL);
insert/*trace*/ into t3 values(1, "aaa", "is_aaa"), (2, "bbb", "is_bbb"), (3, "ccc", "is_ccc"), (4, "ddd", "is_ddd");

set ob_enable_plan_cache = 0;

**************************** testcase for condition expr **************************** 

== case 1
EXPLAIN select /*+no_rewrite*/ * from t1 where c1 > c2 and c1 = 1 and (c2 > c3 and case when c1 > c2 then c1 else c2 end > 1);
Query Plan
===============================================
|ID|OPERATOR       |NAME|EST.ROWS|EST.TIME(us)|
-----------------------------------------------
|0 |TABLE FULL SCAN|t1  |1       |5           |
===============================================
Outputs & filters:
-------------------------------------
  0 - output([t1.c1], [t1.c2], [t1.c3], [t1.c4], [t1.c5], [t1.c6]), filter([t1.c1 = 1], [t1.c1 > t1.c2], [t1.c2 > t1.c3], [CASE WHEN t1.c1 > t1.c2 THEN 
      t1.c1 ELSE t1.c2 END > 1]), rowset=256
      access([t1.c1], [t1.c2], [t1.c3], [t1.c4], [t1.c5], [t1.c6]), partitions(p0)
      is_index_back=false, is_global_index=false, filter_before_indexback[false,false,false,false], 
      range_key([t1.__pk_increment]), range(MIN ; MAX)always true
select /*+no_rewrite*/ * from t1 where c1 > c2 and c1 = 1 and (c2 > c3 and case when c1 > c2 then c1 else c2 end > 1);
+------+------+------+------+------+------+
| c1   | c2   | c3   | c4   | c5   | c6   |
+------+------+------+------+------+------+
+------+------+------+------+------+------+
EXPLAIN select * from t1 where c1 > c2 and c1 = 1 and (c2 > c3 and case when c1 > c2 then c1 else c2 end > 1);
Query Plan
===============================================
|ID|OPERATOR       |NAME|EST.ROWS|EST.TIME(us)|
-----------------------------------------------
|0 |TABLE FULL SCAN|t1  |5       |5           |
===============================================
Outputs & filters:
-------------------------------------
  0 - output([t1.c1], [t1.c2], [t1.c3], [t1.c4], [t1.c5], [t1.c6]), filter(nil), startup_filter([0]), rowset=256
      access([t1.c1], [t1.c2], [t1.c3], [t1.c4], [t1.c5], [t1.c6]), partitions(p0)
      is_index_back=false, is_global_index=false, 
      range_key([t1.__pk_increment]), range(MIN ; MAX)always true
select * from t1 where c1 > c2 and c1 = 1 and (c2 > c3 and case when c1 > c2 then c1 else c2 end > 1);
+------+------+------+------+------+------+
| c1   | c2   | c3   | c4   | c5   | c6   |
+------+------+------+------+------+------+
+------+------+------+------+------+------+


== case 2
EXPLAIN select /*+no_rewrite*/ * from t1 where c1 > 0 or (c1 > c2 and case when c1 > c2 then c1 else c2 end > 1);
Query Plan
===============================================
|ID|OPERATOR       |NAME|EST.ROWS|EST.TIME(us)|
-----------------------------------------------
|0 |TABLE FULL SCAN|t1  |1       |5           |
===============================================
Outputs & filters:
-------------------------------------
  0 - output([t1.c1], [t1.c2], [t1.c3], [t1.c4], [t1.c5], [t1.c6]), filter([t1.c1 > 0 OR t1.c1 > t1.c2 AND CASE WHEN t1.c1 > t1.c2 THEN t1.c1 ELSE t1.c2 
      END > 1]), rowset=256
      access([t1.c1], [t1.c2], [t1.c3], [t1.c4], [t1.c5], [t1.c6]), partitions(p0)
      is_index_back=false, is_global_index=false, filter_before_indexback[false], 
      range_key([t1.__pk_increment]), range(MIN ; MAX)always true
select /*+no_rewrite*/ * from t1 where c1 > 0 or (c1 > c2 and case when c1 > c2 then c1 else c2 end > 1);
+------+------+------+------+------+------+
| c1   | c2   | c3   | c4   | c5   | c6   |
+------+------+------+------+------+------+
|    1 |    1 |    1 |    1 |    1 |    1 |
|    2 |    2 |    2 |    2 |    2 |    2 |
|    3 |    3 |    3 |    3 |    3 |    3 |
|    4 |    4 |    4 |    4 |    4 |    4 |
|    5 |    5 |    5 |    5 |    5 |    5 |
+------+------+------+------+------+------+
EXPLAIN select * from t1 where c1 > 0 or (c1 > c2 and case when c1 > c2 then c1 else c2 end > 1);
Query Plan
===============================================
|ID|OPERATOR       |NAME|EST.ROWS|EST.TIME(us)|
-----------------------------------------------
|0 |TABLE FULL SCAN|t1  |1       |5           |
===============================================
Outputs & filters:
-------------------------------------
  0 - output([t1.c1], [t1.c2], [t1.c3], [t1.c4], [t1.c5], [t1.c6]), filter([t1.c1 > 0 OR t1.c1 > t1.c2 AND t1.c1 > 1]), rowset=256
      access([t1.c1], [t1.c2], [t1.c3], [t1.c4], [t1.c5], [t1.c6]), partitions(p0)
      is_index_back=false, is_global_index=false, filter_before_indexback[false], 
      range_key([t1.__pk_increment]), range(MIN ; MAX)always true
select * from t1 where c1 > 0 or (c1 > c2 and case when c1 > c2 then c1 else c2 end > 1);
+------+------+------+------+------+------+
| c1   | c2   | c3   | c4   | c5   | c6   |
+------+------+------+------+------+------+
|    1 |    1 |    1 |    1 |    1 |    1 |
|    2 |    2 |    2 |    2 |    2 |    2 |
|    3 |    3 |    3 |    3 |    3 |    3 |
|    4 |    4 |    4 |    4 |    4 |    4 |
|    5 |    5 |    5 |    5 |    5 |    5 |
+------+------+------+------+------+------+


== case 3
EXPLAIN select /*+no_rewrite*/ * from t1 where c1 > c2 and c2 > c3 and (c1 > 0 or (c2 > 0 and case when c2 > 0 then c2 else 0 end > 1));
Query Plan
===============================================
|ID|OPERATOR       |NAME|EST.ROWS|EST.TIME(us)|
-----------------------------------------------
|0 |TABLE FULL SCAN|t1  |1       |5           |
===============================================
Outputs & filters:
-------------------------------------
  0 - output([t1.c1], [t1.c2], [t1.c3], [t1.c4], [t1.c5], [t1.c6]), filter([t1.c1 > 0 OR t1.c2 > 0 AND CASE WHEN t1.c2 > 0 THEN t1.c2 ELSE 0 END > 1], [t1.c1 
      > t1.c2], [t1.c2 > t1.c3]), rowset=256
      access([t1.c1], [t1.c2], [t1.c3], [t1.c4], [t1.c5], [t1.c6]), partitions(p0)
      is_index_back=false, is_global_index=false, filter_before_indexback[false,false,false], 
      range_key([t1.__pk_increment]), range(MIN ; MAX)always true
select /*+no_rewrite*/ * from t1 where c1 > c2 and c2 > c3 and (c1 > 0 or (c2 > 0 and case when c2 > 0 then c2 else 0 end > 1));
+------+------+------+------+------+------+
| c1   | c2   | c3   | c4   | c5   | c6   |
+------+------+------+------+------+------+
+------+------+------+------+------+------+
EXPLAIN select * from t1 where c1 > c2 and c2 > c3 and (c1 > 0 or (c2 > 0 and case when c2 > 0 then c2 else 0 end > 1));
Query Plan
===============================================
|ID|OPERATOR       |NAME|EST.ROWS|EST.TIME(us)|
-----------------------------------------------
|0 |TABLE FULL SCAN|t1  |1       |5           |
===============================================
Outputs & filters:
-------------------------------------
  0 - output([t1.c1], [t1.c2], [t1.c3], [t1.c4], [t1.c5], [t1.c6]), filter([t1.c1 > 0 OR t1.c2 > 0 AND t1.c2 > 1], [t1.c1 > t1.c2], [t1.c2 > t1.c3]), rowset=256
      access([t1.c1], [t1.c2], [t1.c3], [t1.c4], [t1.c5], [t1.c6]), partitions(p0)
      is_index_back=false, is_global_index=false, filter_before_indexback[false,false,false], 
      range_key([t1.__pk_increment]), range(MIN ; MAX)always true
select * from t1 where c1 > c2 and c2 > c3 and (c1 > 0 or (c2 > 0 and case when c2 > 0 then c2 else 0 end > 1));
+------+------+------+------+------+------+
| c1   | c2   | c3   | c4   | c5   | c6   |
+------+------+------+------+------+------+
+------+------+------+------+------+------+


== case 4
EXPLAIN select /*+no_rewrite*/ * from t1 where c1 > c2 and case when 0 > 1 then c1 when 1 > 2 then c2 when c1 > c2 then c3 end > 1;
Query Plan
===============================================
|ID|OPERATOR       |NAME|EST.ROWS|EST.TIME(us)|
-----------------------------------------------
|0 |TABLE FULL SCAN|t1  |1       |5           |
===============================================
Outputs & filters:
-------------------------------------
  0 - output([t1.c1], [t1.c2], [t1.c3], [t1.c4], [t1.c5], [t1.c6]), filter([t1.c1 > t1.c2], [CASE WHEN 0 > 1 THEN t1.c1 WHEN 1 > 2 THEN t1.c2 WHEN t1.c1 
      > t1.c2 THEN t1.c3 ELSE NULL END > 1]), rowset=256
      access([t1.c1], [t1.c2], [t1.c3], [t1.c4], [t1.c5], [t1.c6]), partitions(p0)
      is_index_back=false, is_global_index=false, filter_before_indexback[false,false], 
      range_key([t1.__pk_increment]), range(MIN ; MAX)always true
select /*+no_rewrite*/ * from t1 where c1 > c2 and case when 0 > 1 then c1 when 1 > 2 then c2 when c1 > c2 then c3 end > 1;
+------+------+------+------+------+------+
| c1   | c2   | c3   | c4   | c5   | c6   |
+------+------+------+------+------+------+
+------+------+------+------+------+------+
EXPLAIN select * from t1 where c1 > c2 and case when 0 > 1 then c1 when 1 > 2 then c2 when c1 > c2 then c3 end > 1;
Query Plan
===============================================
|ID|OPERATOR       |NAME|EST.ROWS|EST.TIME(us)|
-----------------------------------------------
|0 |TABLE FULL SCAN|t1  |1       |5           |
===============================================
Outputs & filters:
-------------------------------------
  0 - output([t1.c1], [t1.c2], [t1.c3], [t1.c4], [t1.c5], [t1.c6]), filter([t1.c3 > 1], [t1.c1 > t1.c2]), rowset=256
      access([t1.c1], [t1.c2], [t1.c3], [t1.c4], [t1.c5], [t1.c6]), partitions(p0)
      is_index_back=false, is_global_index=false, filter_before_indexback[false,false], 
      range_key([t1.__pk_increment]), range(MIN ; MAX)always true
select * from t1 where c1 > c2 and case when 0 > 1 then c1 when 1 > 2 then c2 when c1 > c2 then c3 end > 1;
+------+------+------+------+------+------+
| c1   | c2   | c3   | c4   | c5   | c6   |
+------+------+------+------+------+------+
+------+------+------+------+------+------+


== case 5
EXPLAIN select /*+no_rewrite*/ * from t1 where c1 > c2 and case when c1 > 1 then 1 when c2 > 2 then 2 when c1 > c2 then c3 end > 1;
Query Plan
===============================================
|ID|OPERATOR       |NAME|EST.ROWS|EST.TIME(us)|
-----------------------------------------------
|0 |TABLE FULL SCAN|t1  |1       |5           |
===============================================
Outputs & filters:
-------------------------------------
  0 - output([t1.c1], [t1.c2], [t1.c3], [t1.c4], [t1.c5], [t1.c6]), filter([t1.c1 > t1.c2], [CASE WHEN t1.c1 > 1 THEN 1 WHEN t1.c2 > 2 THEN 2 WHEN t1.c1 
      > t1.c2 THEN t1.c3 ELSE NULL END > 1]), rowset=256
      access([t1.c1], [t1.c2], [t1.c3], [t1.c4], [t1.c5], [t1.c6]), partitions(p0)
      is_index_back=false, is_global_index=false, filter_before_indexback[false,false], 
      range_key([t1.__pk_increment]), range(MIN ; MAX)always true
select /*+no_rewrite*/ * from t1 where c1 > c2 and case when c1 > 1 then 1 when c2 > 2 then 2 when c1 > c2 then c3 end > 1;
+------+------+------+------+------+------+
| c1   | c2   | c3   | c4   | c5   | c6   |
+------+------+------+------+------+------+
+------+------+------+------+------+------+
EXPLAIN select * from t1 where c1 > c2 and case when c1 > 1 then 1 when c2 > 2 then 2 when c1 > c2 then c3 end > 1;
Query Plan
===============================================
|ID|OPERATOR       |NAME|EST.ROWS|EST.TIME(us)|
-----------------------------------------------
|0 |TABLE FULL SCAN|t1  |1       |5           |
===============================================
Outputs & filters:
-------------------------------------
  0 - output([t1.c1], [t1.c2], [t1.c3], [t1.c4], [t1.c5], [t1.c6]), filter([t1.c1 > t1.c2], [CASE WHEN t1.c1 > 1 THEN 1 WHEN t1.c2 > 2 THEN 2 WHEN 1 THEN 
      t1.c3 ELSE NULL END > 1]), rowset=256
      access([t1.c1], [t1.c2], [t1.c3], [t1.c4], [t1.c5], [t1.c6]), partitions(p0)
      is_index_back=false, is_global_index=false, filter_before_indexback[false,false], 
      range_key([t1.__pk_increment]), range(MIN ; MAX)always true
select * from t1 where c1 > c2 and case when c1 > 1 then 1 when c2 > 2 then 2 when c1 > c2 then c3 end > 1;
+------+------+------+------+------+------+
| c1   | c2   | c3   | c4   | c5   | c6   |
+------+------+------+------+------+------+
+------+------+------+------+------+------+


== case 6: case when expr is nested in then expr
EXPLAIN select /*+no_rewrite*/ * from t1 where c1 > c2 and c2 > c3 and case when c1 > c2 then (case when c2 > c3 then c2 else c3 end) else c2 end > 1;
Query Plan
===============================================
|ID|OPERATOR       |NAME|EST.ROWS|EST.TIME(us)|
-----------------------------------------------
|0 |TABLE FULL SCAN|t1  |1       |5           |
===============================================
Outputs & filters:
-------------------------------------
  0 - output([t1.c1], [t1.c2], [t1.c3], [t1.c4], [t1.c5], [t1.c6]), filter([t1.c1 > t1.c2], [t1.c2 > t1.c3], [CASE WHEN t1.c1 > t1.c2 THEN CASE WHEN t1.c2 
      > t1.c3 THEN t1.c2 ELSE t1.c3 END ELSE t1.c2 END > 1]), rowset=256
      access([t1.c1], [t1.c2], [t1.c3], [t1.c4], [t1.c5], [t1.c6]), partitions(p0)
      is_index_back=false, is_global_index=false, filter_before_indexback[false,false,false], 
      range_key([t1.__pk_increment]), range(MIN ; MAX)always true
select /*+no_rewrite*/ * from t1 where c1 > c2 and c2 > c3 and case when c1 > c2 then (case when c2 > c3 then c2 else c3 end) else c2 end > 1;
+------+------+------+------+------+------+
| c1   | c2   | c3   | c4   | c5   | c6   |
+------+------+------+------+------+------+
+------+------+------+------+------+------+
EXPLAIN select * from t1 where c1 > c2 and c2 > c3 and case when c1 > c2 then (case when c2 > c3 then c2 else c3 end) else c2 end > 1;
Query Plan
===============================================
|ID|OPERATOR       |NAME|EST.ROWS|EST.TIME(us)|
-----------------------------------------------
|0 |TABLE FULL SCAN|t1  |1       |5           |
===============================================
Outputs & filters:
-------------------------------------
  0 - output([t1.c1], [t1.c2], [t1.c3], [t1.c4], [t1.c5], [t1.c6]), filter([t1.c2 > 1], [t1.c1 > t1.c2], [t1.c2 > t1.c3]), rowset=256
      access([t1.c1], [t1.c2], [t1.c3], [t1.c4], [t1.c5], [t1.c6]), partitions(p0)
      is_index_back=false, is_global_index=false, filter_before_indexback[false,false,false], 
      range_key([t1.__pk_increment]), range(MIN ; MAX)always true
select * from t1 where c1 > c2 and c2 > c3 and case when c1 > c2 then (case when c2 > c3 then c2 else c3 end) else c2 end > 1;
+------+------+------+------+------+------+
| c1   | c2   | c3   | c4   | c5   | c6   |
+------+------+------+------+------+------+
+------+------+------+------+------+------+


== case 7
EXPLAIN select /*+no_rewrite*/* from t1 where c1 > c2 and case when c1 > c2 and c1 > 0 and c2 > 0 then c1 else c2 end > 1;
Query Plan
===============================================
|ID|OPERATOR       |NAME|EST.ROWS|EST.TIME(us)|
-----------------------------------------------
|0 |TABLE FULL SCAN|t1  |1       |5           |
===============================================
Outputs & filters:
-------------------------------------
  0 - output([t1.c1], [t1.c2], [t1.c3], [t1.c4], [t1.c5], [t1.c6]), filter([t1.c1 > t1.c2], [CASE WHEN (T_OP_AND, t1.c1 > t1.c2, t1.c1 > 0, t1.c2 > 0) THEN 
      t1.c1 ELSE t1.c2 END > 1]), rowset=256
      access([t1.c1], [t1.c2], [t1.c3], [t1.c4], [t1.c5], [t1.c6]), partitions(p0)
      is_index_back=false, is_global_index=false, filter_before_indexback[false,false], 
      range_key([t1.__pk_increment]), range(MIN ; MAX)always true
select /*+no_rewrite*/* from t1 where c1 > c2 and case when c1 > c2 and c1 > 0 and c2 > 0 then c1 else c2 end > 1;
+------+------+------+------+------+------+
| c1   | c2   | c3   | c4   | c5   | c6   |
+------+------+------+------+------+------+
+------+------+------+------+------+------+
EXPLAIN select * from t1 where c1 > c2 and case when c1 > c2 and c1 > 0 and c2 > 0 then c1 else c2 end > 1;
Query Plan
===============================================
|ID|OPERATOR       |NAME|EST.ROWS|EST.TIME(us)|
-----------------------------------------------
|0 |TABLE FULL SCAN|t1  |1       |5           |
===============================================
Outputs & filters:
-------------------------------------
  0 - output([t1.c1], [t1.c2], [t1.c3], [t1.c4], [t1.c5], [t1.c6]), filter([t1.c1 > t1.c2], [CASE WHEN (T_OP_AND, 1, t1.c1 > 0, t1.c2 > 0) THEN t1.c1 ELSE 
      t1.c2 END > 1]), rowset=256
      access([t1.c1], [t1.c2], [t1.c3], [t1.c4], [t1.c5], [t1.c6]), partitions(p0)
      is_index_back=false, is_global_index=false, filter_before_indexback[false,false], 
      range_key([t1.__pk_increment]), range(MIN ; MAX)always true
select * from t1 where c1 > c2 and case when c1 > c2 and c1 > 0 and c2 > 0 then c1 else c2 end > 1;
+------+------+------+------+------+------+
| c1   | c2   | c3   | c4   | c5   | c6   |
+------+------+------+------+------+------+
+------+------+------+------+------+------+


== case 8
EXPLAIN select /*+no_rewrite*/ * from t1 where c1 > c2 and case when c1 > c2 or c1 > 0 and c2 > 0 then c1 else c2 end > 1;
Query Plan
===============================================
|ID|OPERATOR       |NAME|EST.ROWS|EST.TIME(us)|
-----------------------------------------------
|0 |TABLE FULL SCAN|t1  |1       |5           |
===============================================
Outputs & filters:
-------------------------------------
  0 - output([t1.c1], [t1.c2], [t1.c3], [t1.c4], [t1.c5], [t1.c6]), filter([t1.c1 > t1.c2], [CASE WHEN t1.c1 > t1.c2 OR t1.c1 > 0 AND t1.c2 > 0 THEN t1.c1 
      ELSE t1.c2 END > 1]), rowset=256
      access([t1.c1], [t1.c2], [t1.c3], [t1.c4], [t1.c5], [t1.c6]), partitions(p0)
      is_index_back=false, is_global_index=false, filter_before_indexback[false,false], 
      range_key([t1.__pk_increment]), range(MIN ; MAX)always true
select /*+no_rewrite*/ * from t1 where c1 > c2 and case when c1 > c2 or c1 > 0 and c2 > 0 then c1 else c2 end > 1;
+------+------+------+------+------+------+
| c1   | c2   | c3   | c4   | c5   | c6   |
+------+------+------+------+------+------+
+------+------+------+------+------+------+
EXPLAIN select * from t1 where c1 > c2 and case when c1 > c2 or c1 > 0 and c2 > 0 then c1 else c2 end > 1;
Query Plan
===============================================
|ID|OPERATOR       |NAME|EST.ROWS|EST.TIME(us)|
-----------------------------------------------
|0 |TABLE FULL SCAN|t1  |1       |5           |
===============================================
Outputs & filters:
-------------------------------------
  0 - output([t1.c1], [t1.c2], [t1.c3], [t1.c4], [t1.c5], [t1.c6]), filter([t1.c1 > t1.c2], [CASE WHEN 1 OR t1.c1 > 0 AND t1.c2 > 0 THEN t1.c1 ELSE t1.c2 
      END > 1]), rowset=256
      access([t1.c1], [t1.c2], [t1.c3], [t1.c4], [t1.c5], [t1.c6]), partitions(p0)
      is_index_back=false, is_global_index=false, filter_before_indexback[false,false], 
      range_key([t1.__pk_increment]), range(MIN ; MAX)always true
select * from t1 where c1 > c2 and case when c1 > c2 or c1 > 0 and c2 > 0 then c1 else c2 end > 1;
+------+------+------+------+------+------+
| c1   | c2   | c3   | c4   | c5   | c6   |
+------+------+------+------+------+------+
+------+------+------+------+------+------+

**************************** testcase for crud **************************** 
EXPLAIN insert into target select /*+no_rewrite*/ c1, c2, c3 from t2 where c1 > c2 and case when c1 > c2 then c1 else c2 end > 1;
Query Plan
==============================================================
|ID|OPERATOR           |NAME           |EST.ROWS|EST.TIME(us)|
--------------------------------------------------------------
|0 |INSERT             |               |1       |12          |
|1 |??SUBPLAN SCAN     |ANONYMOUS_VIEW1|1       |4           |
|2 |  ??TABLE FULL SCAN|t2             |1       |4           |
==============================================================
Outputs & filters:
-------------------------------------
  0 - output(nil), filter(nil)
      columns([{target: ({target: (target.__pk_increment, target.c1, target.c2, target.c3)})}]), partitions(p0), 
      column_values([T_HIDDEN_PK], [column_conv(INT,PS:(11,0),NULL,ANONYMOUS_VIEW1.c1)], [column_conv(INT,PS:(11,0),NULL,ANONYMOUS_VIEW1.c2)], [column_conv(INT,
      PS:(11,0),NULL,ANONYMOUS_VIEW1.c3)])
  1 - output([ANONYMOUS_VIEW1.c1], [ANONYMOUS_VIEW1.c2], [ANONYMOUS_VIEW1.c3]), filter(nil), rowset=256
      access([ANONYMOUS_VIEW1.c1], [ANONYMOUS_VIEW1.c2], [ANONYMOUS_VIEW1.c3])
  2 - output([t2.c1], [t2.c2], [t2.c3]), filter([t2.c1 > t2.c2], [CASE WHEN t2.c1 > t2.c2 THEN t2.c1 ELSE t2.c2 END > 1]), rowset=256
      access([t2.c1], [t2.c2], [t2.c3]), partitions(p0)
      is_index_back=false, is_global_index=false, filter_before_indexback[false,false], 
      range_key([t2.__pk_increment]), range(MIN ; MAX)always true
insert into target select /*+no_rewrite*/ c1, c2, c3 from t2 where c1 > c2 and case when c1 > c2 then c1 else c2 end > 1;
EXPLAIN insert into target select c1, c2, c3 from t2 where c1 > c2 and case when c1 > c2 then c1 else c2 end > 1;
Query Plan
==============================================================
|ID|OPERATOR           |NAME           |EST.ROWS|EST.TIME(us)|
--------------------------------------------------------------
|0 |INSERT             |               |1       |11          |
|1 |??SUBPLAN SCAN     |ANONYMOUS_VIEW1|1       |4           |
|2 |  ??TABLE FULL SCAN|t2             |1       |4           |
==============================================================
Outputs & filters:
-------------------------------------
  0 - output(nil), filter(nil)
      columns([{target: ({target: (target.__pk_increment, target.c1, target.c2, target.c3)})}]), partitions(p0), 
      column_values([T_HIDDEN_PK], [column_conv(INT,PS:(11,0),NULL,ANONYMOUS_VIEW1.c1)], [column_conv(INT,PS:(11,0),NULL,ANONYMOUS_VIEW1.c2)], [column_conv(INT,
      PS:(11,0),NULL,ANONYMOUS_VIEW1.c3)])
  1 - output([ANONYMOUS_VIEW1.c1], [ANONYMOUS_VIEW1.c2], [ANONYMOUS_VIEW1.c3]), filter(nil), rowset=256
      access([ANONYMOUS_VIEW1.c1], [ANONYMOUS_VIEW1.c2], [ANONYMOUS_VIEW1.c3])
  2 - output([t2.c1], [t2.c2], [t2.c3]), filter([t2.c1 > 1], [t2.c1 > t2.c2]), rowset=256
      access([t2.c1], [t2.c2], [t2.c3]), partitions(p0)
      is_index_back=false, is_global_index=false, filter_before_indexback[false,false], 
      range_key([t2.__pk_increment]), range(MIN ; MAX)always true
insert into target select c1, c2, c3 from t2 where c1 > c2 and case when c1 > c2 then c1 else c2 end > 1;

EXPLAIN update /*+no_rewrite*/ target set c1 = c2 + 1 where c1 > c2 and case when c1 > c2 then c1 else c2 end > 1;
Query Plan
===================================================
|ID|OPERATOR         |NAME  |EST.ROWS|EST.TIME(us)|
---------------------------------------------------
|0 |UPDATE           |      |1       |29          |
|1 |??TABLE FULL SCAN|target|1       |4           |
===================================================
Outputs & filters:
-------------------------------------
  0 - output(nil), filter(nil)
      table_columns([{target: ({target: (target.__pk_increment, target.c1, target.c2, target.c3)})}]),
      update([target.c1=column_conv(INT,PS:(11,0),NULL,cast(target.c2 + 1, INT(-1, 0)))])
  1 - output([target.__pk_increment], [target.c1], [target.c2], [target.c3]), filter([target.c1 > target.c2], [CASE WHEN target.c1 > target.c2 THEN target.c1 
      ELSE target.c2 END > 1]), rowset=256
      access([target.__pk_increment], [target.c1], [target.c2], [target.c3]), partitions(p0)
      is_index_back=false, is_global_index=false, filter_before_indexback[false,false], 
      range_key([target.__pk_increment]), range(MIN ; MAX)always true
update /*+no_rewrite*/ target set c1 = c2 + 1 where c1 > c2 and case when c1 > c2 then c1 else c2 end > 1;
EXPLAIN update target set c1 = c2 + 1 where c1 > c2 and case when c1 > c2 then c1 else c2 end > 1;
Query Plan
===================================================
|ID|OPERATOR         |NAME  |EST.ROWS|EST.TIME(us)|
---------------------------------------------------
|0 |UPDATE           |      |1       |29          |
|1 |??TABLE FULL SCAN|target|1       |4           |
===================================================
Outputs & filters:
-------------------------------------
  0 - output(nil), filter(nil)
      table_columns([{target: ({target: (target.__pk_increment, target.c1, target.c2, target.c3)})}]),
      update([target.c1=column_conv(INT,PS:(11,0),NULL,cast(target.c2 + 1, INT(-1, 0)))])
  1 - output([target.__pk_increment], [target.c1], [target.c2], [target.c3]), filter([target.c1 > 1], [target.c1 > target.c2]), rowset=256
      access([target.__pk_increment], [target.c1], [target.c2], [target.c3]), partitions(p0)
      is_index_back=false, is_global_index=false, filter_before_indexback[false,false], 
      range_key([target.__pk_increment]), range(MIN ; MAX)always true
update target set c1 = c2 + 1 where c1 > c2 and case when c1 > c2 then c1 else c2 end > 1;

EXPLAIN delete /*+no_rewrite*/ from target where c1 > c2 and case when c1 > c2 then c1 else c2 end > 1;
Query Plan
===================================================
|ID|OPERATOR         |NAME  |EST.ROWS|EST.TIME(us)|
---------------------------------------------------
|0 |DELETE           |      |1       |11          |
|1 |??TABLE FULL SCAN|target|1       |4           |
===================================================
Outputs & filters:
-------------------------------------
  0 - output(nil), filter(nil)
      table_columns([{target: ({target: (target.__pk_increment, target.c1, target.c2, target.c3)})}])
  1 - output([target.__pk_increment], [target.c1], [target.c2], [target.c3]), filter([target.c1 > target.c2], [CASE WHEN target.c1 > target.c2 THEN target.c1 
      ELSE target.c2 END > 1]), rowset=256
      access([target.__pk_increment], [target.c1], [target.c2], [target.c3]), partitions(p0)
      is_index_back=false, is_global_index=false, filter_before_indexback[false,false], 
      range_key([target.__pk_increment]), range(MIN ; MAX)always true
delete /*+no_rewrite*/ from target where c1 > c2 and case when c1 > c2 then c1 else c2 end > 1;
EXPLAIN delete from target where c1 > c2 and case when c1 > c2 then c1 else c2 end > 1;
Query Plan
===================================================
|ID|OPERATOR         |NAME  |EST.ROWS|EST.TIME(us)|
---------------------------------------------------
|0 |DELETE           |      |1       |11          |
|1 |??TABLE FULL SCAN|target|1       |4           |
===================================================
Outputs & filters:
-------------------------------------
  0 - output(nil), filter(nil)
      table_columns([{target: ({target: (target.__pk_increment, target.c1, target.c2, target.c3)})}])
  1 - output([target.__pk_increment], [target.c1], [target.c2], [target.c3]), filter([target.c1 > 1], [target.c1 > target.c2]), rowset=256
      access([target.__pk_increment], [target.c1], [target.c2], [target.c3]), partitions(p0)
      is_index_back=false, is_global_index=false, filter_before_indexback[false,false], 
      range_key([target.__pk_increment]), range(MIN ; MAX)always true
delete from target where c1 > c2 and case when c1 > c2 then c1 else c2 end > 1;

**************************** testcase for semi-join **************************** 
EXPLAIN select /*+no_rewrite*/ 1 from t1 where exists (select /*+no_rewrite*/ 1 from t2 where t1.c1 > t2.c1 and case when t1.c1 > t2.c1 then t1.c1 else t2.c1 end > 1);
Query Plan
=================================================
|ID|OPERATOR         |NAME|EST.ROWS|EST.TIME(us)|
-------------------------------------------------
|0 |SUBPLAN FILTER   |    |3       |24          |
|1 |??TABLE FULL SCAN|t1  |5       |4           |
|2 |??TABLE FULL SCAN|t2  |1       |4           |
=================================================
Outputs & filters:
-------------------------------------
  0 - output([1]), filter([(T_OP_EXISTS, subquery(1))]), rowset=256
      exec_params_([t1.c1(:0)]), onetime_exprs_(nil), init_plan_idxs_(nil), use_batch=false
  1 - output([t1.c1]), filter(nil), rowset=256
      access([t1.c1]), partitions(p0)
      is_index_back=false, is_global_index=false, 
      range_key([t1.__pk_increment]), range(MIN ; MAX)always true
  2 - output([1]), filter([:0 > t2.c1], [CASE WHEN :0 > t2.c1 THEN :0 ELSE t2.c1 END > 1]), rowset=256
      access([t2.c1]), partitions(p0)
      is_index_back=false, is_global_index=false, filter_before_indexback[false,false], 
      range_key([t2.__pk_increment]), range(MIN ; MAX)always true
select /*+no_rewrite*/ 1 from t1 where exists (select /*+no_rewrite*/ 1 from t2 where t1.c1 > t2.c1 and case when t1.c1 > t2.c1 then t1.c1 else t2.c1 end > 1);
+---+
| 1 |
+---+
+---+
EXPLAIN select 1 from t1 where exists (select 1 from t2 where t1.c1 > t2.c1 and case when t1.c1 > t2.c1 then t1.c1 else t2.c1 end > 1);
Query Plan
======================================================
|ID|OPERATOR              |NAME|EST.ROWS|EST.TIME(us)|
------------------------------------------------------
|0 |NESTED-LOOP SEMI JOIN |    |1       |8           |
|1 |??TABLE FULL SCAN     |t1  |1       |5           |
|2 |??MATERIAL            |    |1       |4           |
|3 |  ??TABLE FULL SCAN   |t2  |1       |4           |
======================================================
Outputs & filters:
-------------------------------------
  0 - output([1]), filter(nil), rowset=256
      conds([t1.c1 > t2.c1]), nl_params_(nil), use_batch=false
  1 - output([t1.c1]), filter([t1.c1 > 1]), rowset=256
      access([t1.c1]), partitions(p0)
      is_index_back=false, is_global_index=false, filter_before_indexback[false], 
      range_key([t1.__pk_increment]), range(MIN ; MAX)always true
  2 - output([t2.c1]), filter(nil), rowset=256
  3 - output([t2.c1]), filter(nil), rowset=256
      access([t2.c1]), partitions(p0)
      is_index_back=false, is_global_index=false, 
      range_key([t2.__pk_increment]), range(MIN ; MAX)always true
select 1 from t1 where exists (select 1 from t2 where t1.c1 > t2.c1 and case when t1.c1 > t2.c1 then t1.c1 else t2.c1 end > 1);
+---+
| 1 |
+---+
+---+

**************************** testcase for new scope situation **************************** 
==== OR
EXPLAIN select /*+no_rewrite*/* from t1 where c1 > c2 and c2 > 0 and (c3 > 0 or case when c1 > 0 then c1 else c2 end > 1) and c1 > 0;
Query Plan
===============================================
|ID|OPERATOR       |NAME|EST.ROWS|EST.TIME(us)|
-----------------------------------------------
|0 |TABLE FULL SCAN|t1  |1       |5           |
===============================================
Outputs & filters:
-------------------------------------
  0 - output([t1.c1], [t1.c2], [t1.c3], [t1.c4], [t1.c5], [t1.c6]), filter([t1.c2 > 0], [t1.c1 > 0], [t1.c1 > t1.c2], [t1.c3 > 0 OR CASE WHEN t1.c1 > 0 
      THEN t1.c1 ELSE t1.c2 END > 1]), rowset=256
      access([t1.c1], [t1.c2], [t1.c3], [t1.c4], [t1.c5], [t1.c6]), partitions(p0)
      is_index_back=false, is_global_index=false, filter_before_indexback[false,false,false,false], 
      range_key([t1.__pk_increment]), range(MIN ; MAX)always true
select /*+no_rewrite*/* from t1 where c1 > c2 and c2 > 0 and (c3 > 0 or case when c1 > 0 then c1 else c2 end > 1) and c1 > 0;
+------+------+------+------+------+------+
| c1   | c2   | c3   | c4   | c5   | c6   |
+------+------+------+------+------+------+
+------+------+------+------+------+------+
EXPLAIN select * from t1 where c1 > c2 and c2 > 0 and (c3 > 0 or case when c1 > 0 then c1 else c2 end > 1) and c1 > 0;
Query Plan
===============================================
|ID|OPERATOR       |NAME|EST.ROWS|EST.TIME(us)|
-----------------------------------------------
|0 |TABLE FULL SCAN|t1  |1       |5           |
===============================================
Outputs & filters:
-------------------------------------
  0 - output([t1.c1], [t1.c2], [t1.c3], [t1.c4], [t1.c5], [t1.c6]), filter([t1.c2 > 0], [t1.c3 > 0 OR t1.c1 > 1], [t1.c1 > t1.c2]), rowset=256
      access([t1.c1], [t1.c2], [t1.c3], [t1.c4], [t1.c5], [t1.c6]), partitions(p0)
      is_index_back=false, is_global_index=false, filter_before_indexback[false,false,false], 
      range_key([t1.__pk_increment]), range(MIN ; MAX)always true
select * from t1 where c1 > c2 and c2 > 0 and (c3 > 0 or case when c1 > 0 then c1 else c2 end > 1) and c1 > 0;
+------+------+------+------+------+------+
| c1   | c2   | c3   | c4   | c5   | c6   |
+------+------+------+------+------+------+
+------+------+------+------+------+------+

EXPLAIN select /*+no_rewrite*/ * from t1 where (c1 > 0 and case when c1 > 0 then c1 else 1 end > 0) or (c2 > 0 and case when c2 > 0 then c2 else 2 end > 1);
Query Plan
===============================================
|ID|OPERATOR       |NAME|EST.ROWS|EST.TIME(us)|
-----------------------------------------------
|0 |TABLE FULL SCAN|t1  |1       |5           |
===============================================
Outputs & filters:
-------------------------------------
  0 - output([t1.c1], [t1.c2], [t1.c3], [t1.c4], [t1.c5], [t1.c6]), filter([t1.c1 > 0 AND CASE WHEN t1.c1 > 0 THEN t1.c1 ELSE 1 END > 0 OR t1.c2 > 0 AND 
      CASE WHEN t1.c2 > 0 THEN t1.c2 ELSE 2 END > 1]), rowset=256
      access([t1.c1], [t1.c2], [t1.c3], [t1.c4], [t1.c5], [t1.c6]), partitions(p0)
      is_index_back=false, is_global_index=false, filter_before_indexback[false], 
      range_key([t1.__pk_increment]), range(MIN ; MAX)always true
select /*+no_rewrite*/ * from t1 where (c1 > 0 and case when c1 > 0 then c1 else 1 end > 0) or (c2 > 0 and case when c2 > 0 then c2 else 2 end > 1);
+------+------+------+------+------+------+
| c1   | c2   | c3   | c4   | c5   | c6   |
+------+------+------+------+------+------+
|    1 |    1 |    1 |    1 |    1 |    1 |
|    2 |    2 |    2 |    2 |    2 |    2 |
|    3 |    3 |    3 |    3 |    3 |    3 |
|    4 |    4 |    4 |    4 |    4 |    4 |
|    5 |    5 |    5 |    5 |    5 |    5 |
+------+------+------+------+------+------+
EXPLAIN select * from t1 where (c1 > 0 and case when c1 > 0 then c1 else 1 end > 0) or (c2 > 0 and case when c2 > 0 then c2 else 2 end > 1);
Query Plan
===============================================
|ID|OPERATOR       |NAME|EST.ROWS|EST.TIME(us)|
-----------------------------------------------
|0 |TABLE FULL SCAN|t1  |1       |5           |
===============================================
Outputs & filters:
-------------------------------------
  0 - output([t1.c1], [t1.c2], [t1.c3], [t1.c4], [t1.c5], [t1.c6]), filter([t1.c1 > 0 AND t1.c1 > 0 OR t1.c2 > 0 AND t1.c2 > 1]), rowset=256
      access([t1.c1], [t1.c2], [t1.c3], [t1.c4], [t1.c5], [t1.c6]), partitions(p0)
      is_index_back=false, is_global_index=false, filter_before_indexback[false], 
      range_key([t1.__pk_increment]), range(MIN ; MAX)always true
select * from t1 where (c1 > 0 and case when c1 > 0 then c1 else 1 end > 0) or (c2 > 0 and case when c2 > 0 then c2 else 2 end > 1);
+------+------+------+------+------+------+
| c1   | c2   | c3   | c4   | c5   | c6   |
+------+------+------+------+------+------+
|    1 |    1 |    1 |    1 |    1 |    1 |
|    2 |    2 |    2 |    2 |    2 |    2 |
|    3 |    3 |    3 |    3 |    3 |    3 |
|    4 |    4 |    4 |    4 |    4 |    4 |
|    5 |    5 |    5 |    5 |    5 |    5 |
+------+------+------+------+------+------+

EXPLAIN select /*+no_rewrite*/ * from t1 where case when c1 > c2 then c1 else c2 end > 1 and (c1 > c2 or c1 > 0);
Query Plan
===============================================
|ID|OPERATOR       |NAME|EST.ROWS|EST.TIME(us)|
-----------------------------------------------
|0 |TABLE FULL SCAN|t1  |1       |5           |
===============================================
Outputs & filters:
-------------------------------------
  0 - output([t1.c1], [t1.c2], [t1.c3], [t1.c4], [t1.c5], [t1.c6]), filter([CASE WHEN t1.c1 > t1.c2 THEN t1.c1 ELSE t1.c2 END > 1], [t1.c1 > t1.c2 OR t1.c1 
      > 0]), rowset=256
      access([t1.c1], [t1.c2], [t1.c3], [t1.c4], [t1.c5], [t1.c6]), partitions(p0)
      is_index_back=false, is_global_index=false, filter_before_indexback[false,false], 
      range_key([t1.__pk_increment]), range(MIN ; MAX)always true
select /*+no_rewrite*/ * from t1 where case when c1 > c2 then c1 else c2 end > 1 and (c1 > c2 or c1 > 0);
+------+------+------+------+------+------+
| c1   | c2   | c3   | c4   | c5   | c6   |
+------+------+------+------+------+------+
|    2 |    2 |    2 |    2 |    2 |    2 |
|    3 |    3 |    3 |    3 |    3 |    3 |
|    4 |    4 |    4 |    4 |    4 |    4 |
|    5 |    5 |    5 |    5 |    5 |    5 |
+------+------+------+------+------+------+
EXPLAIN select * from t1 where case when c1 > c2 then c1 else c2 end > 1 and (c1 > c2 or c1 > 0);
Query Plan
===============================================
|ID|OPERATOR       |NAME|EST.ROWS|EST.TIME(us)|
-----------------------------------------------
|0 |TABLE FULL SCAN|t1  |1       |5           |
===============================================
Outputs & filters:
-------------------------------------
  0 - output([t1.c1], [t1.c2], [t1.c3], [t1.c4], [t1.c5], [t1.c6]), filter([CASE WHEN t1.c1 > t1.c2 THEN t1.c1 ELSE t1.c2 END > 1], [t1.c1 > t1.c2 OR t1.c1 
      > 0]), rowset=256
      access([t1.c1], [t1.c2], [t1.c3], [t1.c4], [t1.c5], [t1.c6]), partitions(p0)
      is_index_back=false, is_global_index=false, filter_before_indexback[false,false], 
      range_key([t1.__pk_increment]), range(MIN ; MAX)always true
select * from t1 where case when c1 > c2 then c1 else c2 end > 1 and (c1 > c2 or c1 > 0);
+------+------+------+------+------+------+
| c1   | c2   | c3   | c4   | c5   | c6   |
+------+------+------+------+------+------+
|    2 |    2 |    2 |    2 |    2 |    2 |
|    3 |    3 |    3 |    3 |    3 |    3 |
|    4 |    4 |    4 |    4 |    4 |    4 |
|    5 |    5 |    5 |    5 |    5 |    5 |
+------+------+------+------+------+------+

==== CaseWhen
EXPLAIN select /*+no_rewrite*/* from t1 where case when c1 > 0 then (case when c1 > 0 then c1 else 0 end) else 0 end > 1;
Query Plan
===============================================
|ID|OPERATOR       |NAME|EST.ROWS|EST.TIME(us)|
-----------------------------------------------
|0 |TABLE FULL SCAN|t1  |2       |5           |
===============================================
Outputs & filters:
-------------------------------------
  0 - output([t1.c1], [t1.c2], [t1.c3], [t1.c4], [t1.c5], [t1.c6]), filter([CASE WHEN t1.c1 > 0 THEN CASE WHEN t1.c1 > 0 THEN t1.c1 ELSE 0 END ELSE 0 END 
      > 1]), rowset=256
      access([t1.c1], [t1.c2], [t1.c3], [t1.c4], [t1.c5], [t1.c6]), partitions(p0)
      is_index_back=false, is_global_index=false, filter_before_indexback[false], 
      range_key([t1.__pk_increment]), range(MIN ; MAX)always true
select /*+no_rewrite*/* from t1 where case when c1 > 0 then (case when c1 > 0 then c1 else 0 end) else 0 end > 1;
+------+------+------+------+------+------+
| c1   | c2   | c3   | c4   | c5   | c6   |
+------+------+------+------+------+------+
|    2 |    2 |    2 |    2 |    2 |    2 |
|    3 |    3 |    3 |    3 |    3 |    3 |
|    4 |    4 |    4 |    4 |    4 |    4 |
|    5 |    5 |    5 |    5 |    5 |    5 |
+------+------+------+------+------+------+
EXPLAIN select * from t1 where case when c1 > 0 then (case when c1 > 0 then c1 else 0 end) else 0 end > 1;
Query Plan
===============================================
|ID|OPERATOR       |NAME|EST.ROWS|EST.TIME(us)|
-----------------------------------------------
|0 |TABLE FULL SCAN|t1  |1       |5           |
===============================================
Outputs & filters:
-------------------------------------
  0 - output([t1.c1], [t1.c2], [t1.c3], [t1.c4], [t1.c5], [t1.c6]), filter([t1.c1 > 0], [t1.c1 > 1]), rowset=256
      access([t1.c1], [t1.c2], [t1.c3], [t1.c4], [t1.c5], [t1.c6]), partitions(p0)
      is_index_back=false, is_global_index=false, filter_before_indexback[false,false], 
      range_key([t1.__pk_increment]), range(MIN ; MAX)always true
select * from t1 where case when c1 > 0 then (case when c1 > 0 then c1 else 0 end) else 0 end > 1;
+------+------+------+------+------+------+
| c1   | c2   | c3   | c4   | c5   | c6   |
+------+------+------+------+------+------+
|    2 |    2 |    2 |    2 |    2 |    2 |
|    3 |    3 |    3 |    3 |    3 |    3 |
|    4 |    4 |    4 |    4 |    4 |    4 |
|    5 |    5 |    5 |    5 |    5 |    5 |
+------+------+------+------+------+------+

EXPLAIN select /*+no_rewrite*/ * from t1 where case when c1 > 0 then (case when c1 > 0 then c1 else 1 end) 
                            when c2 > 0 then (case when c2 > 0 then c2 else 2 end) 
                            else 0 end > 1;
Query Plan
===============================================
|ID|OPERATOR       |NAME|EST.ROWS|EST.TIME(us)|
-----------------------------------------------
|0 |TABLE FULL SCAN|t1  |2       |5           |
===============================================
Outputs & filters:
-------------------------------------
  0 - output([t1.c1], [t1.c2], [t1.c3], [t1.c4], [t1.c5], [t1.c6]), filter([CASE WHEN t1.c1 > 0 THEN CASE WHEN t1.c1 > 0 THEN t1.c1 ELSE 1 END WHEN t1.c2 
      > 0 THEN CASE WHEN t1.c2 > 0 THEN t1.c2 ELSE 2 END ELSE 0 END > 1]), rowset=256
      access([t1.c1], [t1.c2], [t1.c3], [t1.c4], [t1.c5], [t1.c6]), partitions(p0)
      is_index_back=false, is_global_index=false, filter_before_indexback[false], 
      range_key([t1.__pk_increment]), range(MIN ; MAX)always true
select /*+no_rewrite*/ * from t1 where case when c1 > 0 then (case when c1 > 0 then c1 else 1 end) 
                            when c2 > 0 then (case when c2 > 0 then c2 else 2 end) 
                            else 0 end > 1;
+------+------+------+------+------+------+
| c1   | c2   | c3   | c4   | c5   | c6   |
+------+------+------+------+------+------+
|    2 |    2 |    2 |    2 |    2 |    2 |
|    3 |    3 |    3 |    3 |    3 |    3 |
|    4 |    4 |    4 |    4 |    4 |    4 |
|    5 |    5 |    5 |    5 |    5 |    5 |
+------+------+------+------+------+------+
EXPLAIN select * from t1 where case when c1 > 0 then (case when c1 > 0 then c1 else 1 end) 
                            when c2 > 0 then (case when c2 > 0 then c2 else 2 end) 
                            else 0 end > 1;
Query Plan
===============================================
|ID|OPERATOR       |NAME|EST.ROWS|EST.TIME(us)|
-----------------------------------------------
|0 |TABLE FULL SCAN|t1  |2       |5           |
===============================================
Outputs & filters:
-------------------------------------
  0 - output([t1.c1], [t1.c2], [t1.c3], [t1.c4], [t1.c5], [t1.c6]), filter([CASE WHEN t1.c1 > 0 THEN t1.c1 WHEN t1.c2 > 0 THEN t1.c2 ELSE 0 END > 1]), rowset=256
      access([t1.c1], [t1.c2], [t1.c3], [t1.c4], [t1.c5], [t1.c6]), partitions(p0)
      is_index_back=false, is_global_index=false, filter_before_indexback[false], 
      range_key([t1.__pk_increment]), range(MIN ; MAX)always true
select * from t1 where case when c1 > 0 then (case when c1 > 0 then c1 else 1 end) 
                            when c2 > 0 then (case when c2 > 0 then c2 else 2 end) 
                            else 0 end > 1;
+------+------+------+------+------+------+
| c1   | c2   | c3   | c4   | c5   | c6   |
+------+------+------+------+------+------+
|    2 |    2 |    2 |    2 |    2 |    2 |
|    3 |    3 |    3 |    3 |    3 |    3 |
|    4 |    4 |    4 |    4 |    4 |    4 |
|    5 |    5 |    5 |    5 |    5 |    5 |
+------+------+------+------+------+------+

EXPLAIN select /*+no_rewrite*/* from t1 where case when c1 > 1 then (case when c1 > 0 then c1 else 0 end) else 0 end > 1;
Query Plan
===============================================
|ID|OPERATOR       |NAME|EST.ROWS|EST.TIME(us)|
-----------------------------------------------
|0 |TABLE FULL SCAN|t1  |2       |5           |
===============================================
Outputs & filters:
-------------------------------------
  0 - output([t1.c1], [t1.c2], [t1.c3], [t1.c4], [t1.c5], [t1.c6]), filter([CASE WHEN t1.c1 > 1 THEN CASE WHEN t1.c1 > 0 THEN t1.c1 ELSE 0 END ELSE 0 END 
      > 1]), rowset=256
      access([t1.c1], [t1.c2], [t1.c3], [t1.c4], [t1.c5], [t1.c6]), partitions(p0)
      is_index_back=false, is_global_index=false, filter_before_indexback[false], 
      range_key([t1.__pk_increment]), range(MIN ; MAX)always true
select /*+no_rewrite*/* from t1 where case when c1 > 1 then (case when c1 > 0 then c1 else 0 end) else 0 end > 1;
+------+------+------+------+------+------+
| c1   | c2   | c3   | c4   | c5   | c6   |
+------+------+------+------+------+------+
|    2 |    2 |    2 |    2 |    2 |    2 |
|    3 |    3 |    3 |    3 |    3 |    3 |
|    4 |    4 |    4 |    4 |    4 |    4 |
|    5 |    5 |    5 |    5 |    5 |    5 |
+------+------+------+------+------+------+
EXPLAIN select * from t1 where case when c1 > 1 then (case when c1 > 0 then c1 else 0 end) else 0 end > 1;
Query Plan
===============================================
|ID|OPERATOR       |NAME|EST.ROWS|EST.TIME(us)|
-----------------------------------------------
|0 |TABLE FULL SCAN|t1  |1       |5           |
===============================================
Outputs & filters:
-------------------------------------
  0 - output([t1.c1], [t1.c2], [t1.c3], [t1.c4], [t1.c5], [t1.c6]), filter([t1.c1 > 1], [t1.c1 > 0]), rowset=256
      access([t1.c1], [t1.c2], [t1.c3], [t1.c4], [t1.c5], [t1.c6]), partitions(p0)
      is_index_back=false, is_global_index=false, filter_before_indexback[false,false], 
      range_key([t1.__pk_increment]), range(MIN ; MAX)always true
select * from t1 where case when c1 > 1 then (case when c1 > 0 then c1 else 0 end) else 0 end > 1;
+------+------+------+------+------+------+
| c1   | c2   | c3   | c4   | c5   | c6   |
+------+------+------+------+------+------+
|    2 |    2 |    2 |    2 |    2 |    2 |
|    3 |    3 |    3 |    3 |    3 |    3 |
|    4 |    4 |    4 |    4 |    4 |    4 |
|    5 |    5 |    5 |    5 |    5 |    5 |
+------+------+------+------+------+------+

EXPLAIN select /*+no_rewrite*/ * from t1 where case when c1 > 0 then (case when c1 > 1 then c1 else 1 end) 
                            when c2 > 0 then (case when c2 > 0 then c2 else 2 end) 
                            else 0 end > 1;
Query Plan
===============================================
|ID|OPERATOR       |NAME|EST.ROWS|EST.TIME(us)|
-----------------------------------------------
|0 |TABLE FULL SCAN|t1  |2       |5           |
===============================================
Outputs & filters:
-------------------------------------
  0 - output([t1.c1], [t1.c2], [t1.c3], [t1.c4], [t1.c5], [t1.c6]), filter([CASE WHEN t1.c1 > 0 THEN CASE WHEN t1.c1 > 1 THEN t1.c1 ELSE 1 END WHEN t1.c2 
      > 0 THEN CASE WHEN t1.c2 > 0 THEN t1.c2 ELSE 2 END ELSE 0 END > 1]), rowset=256
      access([t1.c1], [t1.c2], [t1.c3], [t1.c4], [t1.c5], [t1.c6]), partitions(p0)
      is_index_back=false, is_global_index=false, filter_before_indexback[false], 
      range_key([t1.__pk_increment]), range(MIN ; MAX)always true
select /*+no_rewrite*/ * from t1 where case when c1 > 0 then (case when c1 > 1 then c1 else 1 end) 
                            when c2 > 0 then (case when c2 > 0 then c2 else 2 end) 
                            else 0 end > 1;
+------+------+------+------+------+------+
| c1   | c2   | c3   | c4   | c5   | c6   |
+------+------+------+------+------+------+
|    2 |    2 |    2 |    2 |    2 |    2 |
|    3 |    3 |    3 |    3 |    3 |    3 |
|    4 |    4 |    4 |    4 |    4 |    4 |
|    5 |    5 |    5 |    5 |    5 |    5 |
+------+------+------+------+------+------+
EXPLAIN select * from t1 where case when c1 > 0 then (case when c1 > 1 then c1 else 1 end) 
                            when c2 > 0 then (case when c2 > 0 then c2 else 2 end) 
                            else 0 end > 1;
Query Plan
===============================================
|ID|OPERATOR       |NAME|EST.ROWS|EST.TIME(us)|
-----------------------------------------------
|0 |TABLE FULL SCAN|t1  |2       |5           |
===============================================
Outputs & filters:
-------------------------------------
  0 - output([t1.c1], [t1.c2], [t1.c3], [t1.c4], [t1.c5], [t1.c6]), filter([CASE WHEN t1.c1 > 0 THEN CASE WHEN t1.c1 > 1 THEN t1.c1 ELSE 1 END WHEN t1.c2 
      > 0 THEN t1.c2 ELSE 0 END > 1]), rowset=256
      access([t1.c1], [t1.c2], [t1.c3], [t1.c4], [t1.c5], [t1.c6]), partitions(p0)
      is_index_back=false, is_global_index=false, filter_before_indexback[false], 
      range_key([t1.__pk_increment]), range(MIN ; MAX)always true
select * from t1 where case when c1 > 0 then (case when c1 > 1 then c1 else 1 end) 
                            when c2 > 0 then (case when c2 > 0 then c2 else 2 end) 
                            else 0 end > 1;
+------+------+------+------+------+------+
| c1   | c2   | c3   | c4   | c5   | c6   |
+------+------+------+------+------+------+
|    2 |    2 |    2 |    2 |    2 |    2 |
|    3 |    3 |    3 |    3 |    3 |    3 |
|    4 |    4 |    4 |    4 |    4 |    4 |
|    5 |    5 |    5 |    5 |    5 |    5 |
+------+------+------+------+------+------+

EXPLAIN select /*+no_rewrite*/ * from t1 where case when c1 > 0 then (case when c1 > 1 then c1 else 1 end) 
                            when c2 > 0 then (case when c2 > 2 then c2 else 2 end) 
                            else 0 end > 1;
Query Plan
===============================================
|ID|OPERATOR       |NAME|EST.ROWS|EST.TIME(us)|
-----------------------------------------------
|0 |TABLE FULL SCAN|t1  |2       |5           |
===============================================
Outputs & filters:
-------------------------------------
  0 - output([t1.c1], [t1.c2], [t1.c3], [t1.c4], [t1.c5], [t1.c6]), filter([CASE WHEN t1.c1 > 0 THEN CASE WHEN t1.c1 > 1 THEN t1.c1 ELSE 1 END WHEN t1.c2 
      > 0 THEN CASE WHEN t1.c2 > 2 THEN t1.c2 ELSE 2 END ELSE 0 END > 1]), rowset=256
      access([t1.c1], [t1.c2], [t1.c3], [t1.c4], [t1.c5], [t1.c6]), partitions(p0)
      is_index_back=false, is_global_index=false, filter_before_indexback[false], 
      range_key([t1.__pk_increment]), range(MIN ; MAX)always true
select /*+no_rewrite*/ * from t1 where case when c1 > 0 then (case when c1 > 1 then c1 else 1 end) 
                            when c2 > 0 then (case when c2 > 2 then c2 else 2 end) 
                            else 0 end > 1;
+------+------+------+------+------+------+
| c1   | c2   | c3   | c4   | c5   | c6   |
+------+------+------+------+------+------+
|    2 |    2 |    2 |    2 |    2 |    2 |
|    3 |    3 |    3 |    3 |    3 |    3 |
|    4 |    4 |    4 |    4 |    4 |    4 |
|    5 |    5 |    5 |    5 |    5 |    5 |
+------+------+------+------+------+------+
EXPLAIN select * from t1 where case when c1 > 0 then (case when c1 > 1 then c1 else 1 end) 
                            when c2 > 0 then (case when c2 > 2 then c2 else 2 end) 
                            else 0 end > 1;
Query Plan
===============================================
|ID|OPERATOR       |NAME|EST.ROWS|EST.TIME(us)|
-----------------------------------------------
|0 |TABLE FULL SCAN|t1  |2       |5           |
===============================================
Outputs & filters:
-------------------------------------
  0 - output([t1.c1], [t1.c2], [t1.c3], [t1.c4], [t1.c5], [t1.c6]), filter([CASE WHEN t1.c1 > 0 THEN CASE WHEN t1.c1 > 1 THEN t1.c1 ELSE 1 END WHEN t1.c2 
      > 0 THEN CASE WHEN t1.c2 > 2 THEN t1.c2 ELSE 2 END ELSE 0 END > 1]), rowset=256
      access([t1.c1], [t1.c2], [t1.c3], [t1.c4], [t1.c5], [t1.c6]), partitions(p0)
      is_index_back=false, is_global_index=false, filter_before_indexback[false], 
      range_key([t1.__pk_increment]), range(MIN ; MAX)always true
select * from t1 where case when c1 > 0 then (case when c1 > 1 then c1 else 1 end) 
                            when c2 > 0 then (case when c2 > 2 then c2 else 2 end) 
                            else 0 end > 1;
+------+------+------+------+------+------+
| c1   | c2   | c3   | c4   | c5   | c6   |
+------+------+------+------+------+------+
|    2 |    2 |    2 |    2 |    2 |    2 |
|    3 |    3 |    3 |    3 |    3 |    3 |
|    4 |    4 |    4 |    4 |    4 |    4 |
|    5 |    5 |    5 |    5 |    5 |    5 |
+------+------+------+------+------+------+

EXPLAIN select /*+no_rewrite*/ * from t1 where case when c1 > 0 and c2 > 0 then (case when c1 > 0 then c1 else 0 end) else 0 end > 1;
Query Plan
===============================================
|ID|OPERATOR       |NAME|EST.ROWS|EST.TIME(us)|
-----------------------------------------------
|0 |TABLE FULL SCAN|t1  |2       |5           |
===============================================
Outputs & filters:
-------------------------------------
  0 - output([t1.c1], [t1.c2], [t1.c3], [t1.c4], [t1.c5], [t1.c6]), filter([CASE WHEN t1.c1 > 0 AND t1.c2 > 0 THEN CASE WHEN t1.c1 > 0 THEN t1.c1 ELSE 0 
      END ELSE 0 END > 1]), rowset=256
      access([t1.c1], [t1.c2], [t1.c3], [t1.c4], [t1.c5], [t1.c6]), partitions(p0)
      is_index_back=false, is_global_index=false, filter_before_indexback[false], 
      range_key([t1.__pk_increment]), range(MIN ; MAX)always true
select /*+no_rewrite*/ * from t1 where case when c1 > 0 and c2 > 0 then (case when c1 > 0 then c1 else 0 end) else 0 end > 1;
+------+------+------+------+------+------+
| c1   | c2   | c3   | c4   | c5   | c6   |
+------+------+------+------+------+------+
|    2 |    2 |    2 |    2 |    2 |    2 |
|    3 |    3 |    3 |    3 |    3 |    3 |
|    4 |    4 |    4 |    4 |    4 |    4 |
|    5 |    5 |    5 |    5 |    5 |    5 |
+------+------+------+------+------+------+
EXPLAIN select * from t1 where case when c1 > 0 and c2 > 0 then (case when c1 > 0 then c1 else 0 end) else 0 end > 1;
Query Plan
===============================================
|ID|OPERATOR       |NAME|EST.ROWS|EST.TIME(us)|
-----------------------------------------------
|0 |TABLE FULL SCAN|t1  |1       |5           |
===============================================
Outputs & filters:
-------------------------------------
  0 - output([t1.c1], [t1.c2], [t1.c3], [t1.c4], [t1.c5], [t1.c6]), filter([t1.c1 > 0], [t1.c2 > 0], [t1.c1 > 1]), rowset=256
      access([t1.c1], [t1.c2], [t1.c3], [t1.c4], [t1.c5], [t1.c6]), partitions(p0)
      is_index_back=false, is_global_index=false, filter_before_indexback[false,false,false], 
      range_key([t1.__pk_increment]), range(MIN ; MAX)always true
select * from t1 where case when c1 > 0 and c2 > 0 then (case when c1 > 0 then c1 else 0 end) else 0 end > 1;
+------+------+------+------+------+------+
| c1   | c2   | c3   | c4   | c5   | c6   |
+------+------+------+------+------+------+
|    2 |    2 |    2 |    2 |    2 |    2 |
|    3 |    3 |    3 |    3 |    3 |    3 |
|    4 |    4 |    4 |    4 |    4 |    4 |
|    5 |    5 |    5 |    5 |    5 |    5 |
+------+------+------+------+------+------+

EXPLAIN select /*+no_rewrite*/ * from t1 where case when c1 > 0 or c2 > 0 then (case when c1 > 0 then c1 else 0 end) else 0 end > 1;
Query Plan
===============================================
|ID|OPERATOR       |NAME|EST.ROWS|EST.TIME(us)|
-----------------------------------------------
|0 |TABLE FULL SCAN|t1  |2       |5           |
===============================================
Outputs & filters:
-------------------------------------
  0 - output([t1.c1], [t1.c2], [t1.c3], [t1.c4], [t1.c5], [t1.c6]), filter([CASE WHEN t1.c1 > 0 OR t1.c2 > 0 THEN CASE WHEN t1.c1 > 0 THEN t1.c1 ELSE 0 
      END ELSE 0 END > 1]), rowset=256
      access([t1.c1], [t1.c2], [t1.c3], [t1.c4], [t1.c5], [t1.c6]), partitions(p0)
      is_index_back=false, is_global_index=false, filter_before_indexback[false], 
      range_key([t1.__pk_increment]), range(MIN ; MAX)always true
select /*+no_rewrite*/ * from t1 where case when c1 > 0 or c2 > 0 then (case when c1 > 0 then c1 else 0 end) else 0 end > 1;
+------+------+------+------+------+------+
| c1   | c2   | c3   | c4   | c5   | c6   |
+------+------+------+------+------+------+
|    2 |    2 |    2 |    2 |    2 |    2 |
|    3 |    3 |    3 |    3 |    3 |    3 |
|    4 |    4 |    4 |    4 |    4 |    4 |
|    5 |    5 |    5 |    5 |    5 |    5 |
+------+------+------+------+------+------+
EXPLAIN select * from t1 where case when c1 > 0 or c2 > 0 then (case when c1 > 0 then c1 else 0 end) else 0 end > 1;
Query Plan
===============================================
|ID|OPERATOR       |NAME|EST.ROWS|EST.TIME(us)|
-----------------------------------------------
|0 |TABLE FULL SCAN|t1  |1       |5           |
===============================================
Outputs & filters:
-------------------------------------
  0 - output([t1.c1], [t1.c2], [t1.c3], [t1.c4], [t1.c5], [t1.c6]), filter([t1.c1 > 0], [t1.c1 > 1], [t1.c1 > 0 OR t1.c2 > 0]), rowset=256
      access([t1.c1], [t1.c2], [t1.c3], [t1.c4], [t1.c5], [t1.c6]), partitions(p0)
      is_index_back=false, is_global_index=false, filter_before_indexback[false,false,false], 
      range_key([t1.__pk_increment]), range(MIN ; MAX)always true
select * from t1 where case when c1 > 0 or c2 > 0 then (case when c1 > 0 then c1 else 0 end) else 0 end > 1;
+------+------+------+------+------+------+
| c1   | c2   | c3   | c4   | c5   | c6   |
+------+------+------+------+------+------+
|    2 |    2 |    2 |    2 |    2 |    2 |
|    3 |    3 |    3 |    3 |    3 |    3 |
|    4 |    4 |    4 |    4 |    4 |    4 |
|    5 |    5 |    5 |    5 |    5 |    5 |
+------+------+------+------+------+------+

EXPLAIN select /*+no_rewrite*/ * from t1 where case when c1 > 0 and (c1 > 1 or c2 > 0) then (case when c1 > 0 then c1 else 0 end) else 0 end > 1;
Query Plan
===============================================
|ID|OPERATOR       |NAME|EST.ROWS|EST.TIME(us)|
-----------------------------------------------
|0 |TABLE FULL SCAN|t1  |2       |5           |
===============================================
Outputs & filters:
-------------------------------------
  0 - output([t1.c1], [t1.c2], [t1.c3], [t1.c4], [t1.c5], [t1.c6]), filter([CASE WHEN t1.c1 > 0 AND t1.c1 > 1 OR t1.c2 > 0 THEN CASE WHEN t1.c1 > 0 THEN 
      t1.c1 ELSE 0 END ELSE 0 END > 1]), rowset=256
      access([t1.c1], [t1.c2], [t1.c3], [t1.c4], [t1.c5], [t1.c6]), partitions(p0)
      is_index_back=false, is_global_index=false, filter_before_indexback[false], 
      range_key([t1.__pk_increment]), range(MIN ; MAX)always true
select /*+no_rewrite*/ * from t1 where case when c1 > 0 and (c1 > 1 or c2 > 0) then (case when c1 > 0 then c1 else 0 end) else 0 end > 1;
+------+------+------+------+------+------+
| c1   | c2   | c3   | c4   | c5   | c6   |
+------+------+------+------+------+------+
|    2 |    2 |    2 |    2 |    2 |    2 |
|    3 |    3 |    3 |    3 |    3 |    3 |
|    4 |    4 |    4 |    4 |    4 |    4 |
|    5 |    5 |    5 |    5 |    5 |    5 |
+------+------+------+------+------+------+
EXPLAIN select * from t1 where case when c1 > 0 and (c1 > 1 or c2 > 0) then (case when c1 > 0 then c1 else 0 end) else 0 end > 1;
Query Plan
===============================================
|ID|OPERATOR       |NAME|EST.ROWS|EST.TIME(us)|
-----------------------------------------------
|0 |TABLE FULL SCAN|t1  |1       |5           |
===============================================
Outputs & filters:
-------------------------------------
  0 - output([t1.c1], [t1.c2], [t1.c3], [t1.c4], [t1.c5], [t1.c6]), filter([t1.c1 > 0], [t1.c1 > 1], [t1.c1 > 1 OR t1.c2 > 0]), rowset=256
      access([t1.c1], [t1.c2], [t1.c3], [t1.c4], [t1.c5], [t1.c6]), partitions(p0)
      is_index_back=false, is_global_index=false, filter_before_indexback[false,false,false], 
      range_key([t1.__pk_increment]), range(MIN ; MAX)always true
select * from t1 where case when c1 > 0 and (c1 > 1 or c2 > 0) then (case when c1 > 0 then c1 else 0 end) else 0 end > 1;
+------+------+------+------+------+------+
| c1   | c2   | c3   | c4   | c5   | c6   |
+------+------+------+------+------+------+
|    2 |    2 |    2 |    2 |    2 |    2 |
|    3 |    3 |    3 |    3 |    3 |    3 |
|    4 |    4 |    4 |    4 |    4 |    4 |
|    5 |    5 |    5 |    5 |    5 |    5 |
+------+------+------+------+------+------+

**************************** testcase for scalar group by **************************** 
== case 1
EXPLAIN select /*+no_rewrite*/* from t1 having c1 > 0 and case when c1 > 0 then c1 else count(*) end > 1;
Query Plan
=================================================
|ID|OPERATOR         |NAME|EST.ROWS|EST.TIME(us)|
-------------------------------------------------
|0 |SCALAR GROUP BY  |    |1       |5           |
|1 |??TABLE FULL SCAN|t1  |5       |5           |
=================================================
Outputs & filters:
-------------------------------------
  0 - output([t1.c1], [t1.c2], [t1.c3], [t1.c4], [t1.c5], [t1.c6]), filter([CASE WHEN t1.c1 > 0 THEN t1.c1 ELSE T_FUN_COUNT_SUM(T_FUN_COUNT(*)) END > 1],
       [t1.c1 > 0]), rowset=256
      group(nil), agg_func([T_FUN_COUNT_SUM(T_FUN_COUNT(*))])
  1 - output([t1.c1], [t1.c2], [t1.c3], [t1.c4], [t1.c5], [t1.c6], [T_FUN_COUNT(*)], [t1.c1 > 0]), filter(nil), rowset=256
      access([t1.c1], [t1.c2], [t1.c3], [t1.c4], [t1.c5], [t1.c6]), partitions(p0)
      is_index_back=false, is_global_index=false, 
      range_key([t1.__pk_increment]), range(MIN ; MAX)always true
select /*+no_rewrite*/* from t1 having c1 > 0 and case when c1 > 0 then c1 else count(*) end > 1;
+------+------+------+------+------+------+
| c1   | c2   | c3   | c4   | c5   | c6   |
+------+------+------+------+------+------+
+------+------+------+------+------+------+
EXPLAIN select * from t1 having c1 > 0 and case when c1 > 0 then c1 else count(*) end > 1;
Query Plan
=================================================
|ID|OPERATOR         |NAME|EST.ROWS|EST.TIME(us)|
-------------------------------------------------
|0 |SCALAR GROUP BY  |    |1       |5           |
|1 |??TABLE FULL SCAN|t1  |5       |5           |
=================================================
Outputs & filters:
-------------------------------------
  0 - output([t1.c1], [t1.c2], [t1.c3], [t1.c4], [t1.c5], [t1.c6]), filter([CASE WHEN 1 THEN t1.c1 ELSE T_FUN_COUNT_SUM(T_FUN_COUNT(*)) END > 1], [t1.c1 
      > 0]), rowset=256
      group(nil), agg_func([T_FUN_COUNT_SUM(T_FUN_COUNT(*))])
  1 - output([t1.c1], [t1.c2], [t1.c3], [t1.c4], [t1.c5], [t1.c6], [T_FUN_COUNT(*)]), filter(nil), rowset=256
      access([t1.c1], [t1.c2], [t1.c3], [t1.c4], [t1.c5], [t1.c6]), partitions(p0)
      is_index_back=false, is_global_index=false, 
      range_key([t1.__pk_increment]), range(MIN ; MAX)always true
select * from t1 having c1 > 0 and case when c1 > 0 then c1 else count(*) end > 1;
+------+------+------+------+------+------+
| c1   | c2   | c3   | c4   | c5   | c6   |
+------+------+------+------+------+------+
+------+------+------+------+------+------+

== case 2
EXPLAIN select /*+no_rewrite*/ case when c1 > 0 then c1 else count(*) end from t1 where c1 > 0;
Query Plan
=================================================
|ID|OPERATOR         |NAME|EST.ROWS|EST.TIME(us)|
-------------------------------------------------
|0 |SCALAR GROUP BY  |    |1       |5           |
|1 |??TABLE FULL SCAN|t1  |1       |5           |
=================================================
Outputs & filters:
-------------------------------------
  0 - output([CASE WHEN t1.c1 > 0 THEN t1.c1 ELSE T_FUN_COUNT_SUM(T_FUN_COUNT(*)) END]), filter(nil), rowset=256
      group(nil), agg_func([T_FUN_COUNT_SUM(T_FUN_COUNT(*))])
  1 - output([t1.c1], [T_FUN_COUNT(*)], [t1.c1 > 0]), filter([t1.c1 > 0]), rowset=256
      access([t1.c1]), partitions(p0)
      is_index_back=false, is_global_index=false, filter_before_indexback[false], 
      range_key([t1.__pk_increment]), range(MIN ; MAX)always true
select /*+no_rewrite*/ case when c1 > 0 then c1 else count(*) end from t1 where c1 > 0;
+--------------------------------------------+
| case when c1 > 0 then c1 else count(*) end |
+--------------------------------------------+
|                                          1 |
+--------------------------------------------+
EXPLAIN select case when c1 > 0 then c1 else count(*) end from t1 where c1 > 0;
Query Plan
=================================================
|ID|OPERATOR         |NAME|EST.ROWS|EST.TIME(us)|
-------------------------------------------------
|0 |SCALAR GROUP BY  |    |1       |5           |
|1 |??TABLE FULL SCAN|t1  |1       |5           |
=================================================
Outputs & filters:
-------------------------------------
  0 - output([CASE WHEN 1 THEN t1.c1 ELSE T_FUN_COUNT_SUM(T_FUN_COUNT(*)) END]), filter(nil), rowset=256
      group(nil), agg_func([T_FUN_COUNT_SUM(T_FUN_COUNT(*))])
  1 - output([t1.c1], [T_FUN_COUNT(*)]), filter([t1.c1 > 0]), rowset=256
      access([t1.c1]), partitions(p0)
      is_index_back=false, is_global_index=false, filter_before_indexback[false], 
      range_key([t1.__pk_increment]), range(MIN ; MAX)always true
select case when c1 > 0 then c1 else count(*) end from t1 where c1 > 0;
+--------------------------------------------+
| case when c1 > 0 then c1 else count(*) end |
+--------------------------------------------+
|                                          1 |
+--------------------------------------------+

== case 3
EXPLAIN select /*+no_rewrite*/ case when c1 > 0 then c1 else 0 end from t1 where c1 > 0;
Query Plan
===============================================
|ID|OPERATOR       |NAME|EST.ROWS|EST.TIME(us)|
-----------------------------------------------
|0 |TABLE FULL SCAN|t1  |1       |5           |
===============================================
Outputs & filters:
-------------------------------------
  0 - output([CASE WHEN t1.c1 > 0 THEN t1.c1 ELSE 0 END]), filter([t1.c1 > 0]), rowset=256
      access([t1.c1]), partitions(p0)
      is_index_back=false, is_global_index=false, filter_before_indexback[false], 
      range_key([t1.__pk_increment]), range(MIN ; MAX)always true
select /*+no_rewrite*/ case when c1 > 0 then c1 else 0 end from t1 where c1 > 0;
+-------------------------------------+
| case when c1 > 0 then c1 else 0 end |
+-------------------------------------+
|                                   1 |
|                                   2 |
|                                   3 |
|                                   4 |
|                                   5 |
+-------------------------------------+
EXPLAIN select case when c1 > 0 then c1 else 0 end from t1 where c1 > 0;
Query Plan
===============================================
|ID|OPERATOR       |NAME|EST.ROWS|EST.TIME(us)|
-----------------------------------------------
|0 |TABLE FULL SCAN|t1  |1       |5           |
===============================================
Outputs & filters:
-------------------------------------
  0 - output([t1.c1]), filter([t1.c1 > 0]), rowset=256
      access([t1.c1]), partitions(p0)
      is_index_back=false, is_global_index=false, filter_before_indexback[false], 
      range_key([t1.__pk_increment]), range(MIN ; MAX)always true
select case when c1 > 0 then c1 else 0 end from t1 where c1 > 0;
+-------------------------------------+
| case when c1 > 0 then c1 else 0 end |
+-------------------------------------+
|                                   1 |
|                                   2 |
|                                   3 |
|                                   4 |
|                                   5 |
+-------------------------------------+

**************************** testcase for join condition **************************** 

== innner join
EXPLAIN select /*+no_rewrite*/ * from t1 join t2 on t1.c1 = t2.c1 where t1.c1 > 0 and case when t1.c1 = t2.c1 then t1.c1 else t2.c1 end > 1;
Query Plan
=================================================
|ID|OPERATOR         |NAME|EST.ROWS|EST.TIME(us)|
-------------------------------------------------
|0 |HASH JOIN        |    |1       |9           |
|1 |??TABLE FULL SCAN|t1  |1       |5           |
|2 |??TABLE FULL SCAN|t2  |1       |4           |
=================================================
Outputs & filters:
-------------------------------------
  0 - output([t1.c1], [t1.c2], [t1.c3], [t1.c4], [t1.c5], [t1.c6], [t2.c1], [t2.c2], [t2.c3]), filter(nil), rowset=256
      equal_conds([t1.c1 = t2.c1]), other_conds([CASE WHEN t1.c1 = t2.c1 THEN t1.c1 ELSE t2.c1 END > 1])
  1 - output([t1.c1], [t1.c2], [t1.c3], [t1.c4], [t1.c5], [t1.c6]), filter([t1.c1 > 0]), rowset=256
      access([t1.c1], [t1.c2], [t1.c3], [t1.c4], [t1.c5], [t1.c6]), partitions(p0)
      is_index_back=false, is_global_index=false, filter_before_indexback[false], 
      range_key([t1.__pk_increment]), range(MIN ; MAX)always true
  2 - output([t2.c1], [t2.c2], [t2.c3]), filter(nil), rowset=256
      access([t2.c1], [t2.c2], [t2.c3]), partitions(p0)
      is_index_back=false, is_global_index=false, 
      range_key([t2.__pk_increment]), range(MIN ; MAX)always true
select /*+no_rewrite*/ * from t1 join t2 on t1.c1 = t2.c1 where t1.c1 > 0 and case when t1.c1 = t2.c1 then t1.c1 else t2.c1 end > 1;
+------+------+------+------+------+------+------+------+------+
| c1   | c2   | c3   | c4   | c5   | c6   | c1   | c2   | c3   |
+------+------+------+------+------+------+------+------+------+
+------+------+------+------+------+------+------+------+------+
EXPLAIN select * from t1 join t2 on t1.c1 = t2.c1 where t1.c1 > 0 and case when t1.c1 = t2.c1 then t1.c1 else t2.c1 end > 1;
Query Plan
=================================================
|ID|OPERATOR         |NAME|EST.ROWS|EST.TIME(us)|
-------------------------------------------------
|0 |HASH JOIN        |    |1       |8           |
|1 |??TABLE FULL SCAN|t2  |1       |4           |
|2 |??TABLE FULL SCAN|t1  |1       |5           |
=================================================
Outputs & filters:
-------------------------------------
  0 - output([t1.c1], [t1.c2], [t1.c3], [t1.c4], [t1.c5], [t1.c6], [t2.c1], [t2.c2], [t2.c3]), filter(nil), rowset=256
      equal_conds([t1.c1 = t2.c1]), other_conds(nil)
  1 - output([t2.c1], [t2.c2], [t2.c3]), filter([t2.c1 > 0], [t2.c1 > 1]), rowset=256
      access([t2.c1], [t2.c2], [t2.c3]), partitions(p0)
      is_index_back=false, is_global_index=false, filter_before_indexback[false,false], 
      range_key([t2.__pk_increment]), range(MIN ; MAX)always true
  2 - output([t1.c1], [t1.c2], [t1.c3], [t1.c4], [t1.c5], [t1.c6]), filter([t1.c1 > 0], [t1.c1 > 1]), rowset=256
      access([t1.c1], [t1.c2], [t1.c3], [t1.c4], [t1.c5], [t1.c6]), partitions(p0)
      is_index_back=false, is_global_index=false, filter_before_indexback[false,false], 
      range_key([t1.__pk_increment]), range(MIN ; MAX)always true
select * from t1 join t2 on t1.c1 = t2.c1 where t1.c1 > 0 and case when t1.c1 = t2.c1 then t1.c1 else t2.c1 end > 1;
+------+------+------+------+------+------+------+------+------+
| c1   | c2   | c3   | c4   | c5   | c6   | c1   | c2   | c3   |
+------+------+------+------+------+------+------+------+------+
+------+------+------+------+------+------+------+------+------+

EXPLAIN select /*+no_rewrite*/ * from t1 join t2 on t1.c1 = t2.c1 and case when t1.c2 > t2.c2 then t1.c2 else t2.c2 end > 1 where t1.c2 > t2.c2;
Query Plan
=================================================
|ID|OPERATOR         |NAME|EST.ROWS|EST.TIME(us)|
-------------------------------------------------
|0 |HASH JOIN        |    |1       |10          |
|1 |??TABLE FULL SCAN|t2  |1       |4           |
|2 |??TABLE FULL SCAN|t1  |5       |5           |
=================================================
Outputs & filters:
-------------------------------------
  0 - output([t1.c1], [t1.c2], [t1.c3], [t1.c4], [t1.c5], [t1.c6], [t2.c1], [t2.c2], [t2.c3]), filter(nil), rowset=256
      equal_conds([t1.c1 = t2.c1]), other_conds([t1.c2 > t2.c2], [CASE WHEN t1.c2 > t2.c2 THEN t1.c2 ELSE t2.c2 END > 1])
  1 - output([t2.c1], [t2.c2], [t2.c3]), filter(nil), rowset=256
      access([t2.c1], [t2.c2], [t2.c3]), partitions(p0)
      is_index_back=false, is_global_index=false, 
      range_key([t2.__pk_increment]), range(MIN ; MAX)always true
  2 - output([t1.c1], [t1.c2], [t1.c3], [t1.c4], [t1.c5], [t1.c6]), filter(nil), rowset=256
      access([t1.c1], [t1.c2], [t1.c3], [t1.c4], [t1.c5], [t1.c6]), partitions(p0)
      is_index_back=false, is_global_index=false, 
      range_key([t1.__pk_increment]), range(MIN ; MAX)always true
select /*+no_rewrite*/ * from t1 join t2 on t1.c1 = t2.c1 and case when t1.c2 > t2.c2 then t1.c2 else t2.c2 end > 1 where t1.c2 > t2.c2;
+------+------+------+------+------+------+------+------+------+
| c1   | c2   | c3   | c4   | c5   | c6   | c1   | c2   | c3   |
+------+------+------+------+------+------+------+------+------+
+------+------+------+------+------+------+------+------+------+
EXPLAIN select * from t1 join t2 on t1.c1 = t2.c1 and case when t1.c2 > t2.c2 then t1.c2 else t2.c2 end > 1 where t1.c2 > t2.c2;
Query Plan
=================================================
|ID|OPERATOR         |NAME|EST.ROWS|EST.TIME(us)|
-------------------------------------------------
|0 |HASH JOIN        |    |1       |9           |
|1 |??TABLE FULL SCAN|t1  |1       |5           |
|2 |??TABLE FULL SCAN|t2  |1       |4           |
=================================================
Outputs & filters:
-------------------------------------
  0 - output([t1.c1], [t1.c2], [t1.c3], [t1.c4], [t1.c5], [t1.c6], [t2.c1], [t2.c2], [t2.c3]), filter(nil), rowset=256
      equal_conds([t1.c1 = t2.c1]), other_conds([t1.c2 > t2.c2])
  1 - output([t1.c1], [t1.c2], [t1.c3], [t1.c4], [t1.c5], [t1.c6]), filter([t1.c2 > 1]), rowset=256
      access([t1.c1], [t1.c2], [t1.c3], [t1.c4], [t1.c5], [t1.c6]), partitions(p0)
      is_index_back=false, is_global_index=false, filter_before_indexback[false], 
      range_key([t1.__pk_increment]), range(MIN ; MAX)always true
  2 - output([t2.c1], [t2.c2], [t2.c3]), filter(nil), rowset=256
      access([t2.c1], [t2.c2], [t2.c3]), partitions(p0)
      is_index_back=false, is_global_index=false, 
      range_key([t2.__pk_increment]), range(MIN ; MAX)always true
select * from t1 join t2 on t1.c1 = t2.c1 and case when t1.c2 > t2.c2 then t1.c2 else t2.c2 end > 1 where t1.c2 > t2.c2;
+------+------+------+------+------+------+------+------+------+
| c1   | c2   | c3   | c4   | c5   | c6   | c1   | c2   | c3   |
+------+------+------+------+------+------+------+------+------+
+------+------+------+------+------+------+------+------+------+


== outer join
EXPLAIN select /*+no_rewrite*/ * from t1 full join t2 on t1.c1 = t2.c1 where t1.c1 > 0 and case when t1.c1 = t2.c1 then t1.c1 else t2.c1 end > 1;
Query Plan
=====================================================
|ID|OPERATOR             |NAME|EST.ROWS|EST.TIME(us)|
-----------------------------------------------------
|0 |HASH FULL OUTER JOIN |    |1       |10          |
|1 |??TABLE FULL SCAN    |t2  |1       |4           |
|2 |??TABLE FULL SCAN    |t1  |5       |5           |
=====================================================
Outputs & filters:
-------------------------------------
  0 - output([t1.c1], [t1.c2], [t1.c3], [t1.c4], [t1.c5], [t1.c6], [t2.c1], [t2.c2], [t2.c3]), filter([t1.c1 > 0], [CASE WHEN t1.c1 = t2.c1 THEN t1.c1 ELSE 
      t2.c1 END > 1]), rowset=256
      equal_conds([t1.c1 = t2.c1]), other_conds(nil)
  1 - output([t2.c1], [t2.c2], [t2.c3]), filter(nil), rowset=256
      access([t2.c1], [t2.c2], [t2.c3]), partitions(p0)
      is_index_back=false, is_global_index=false, 
      range_key([t2.__pk_increment]), range(MIN ; MAX)always true
  2 - output([t1.c1], [t1.c2], [t1.c3], [t1.c4], [t1.c5], [t1.c6]), filter(nil), rowset=256
      access([t1.c1], [t1.c2], [t1.c3], [t1.c4], [t1.c5], [t1.c6]), partitions(p0)
      is_index_back=false, is_global_index=false, 
      range_key([t1.__pk_increment]), range(MIN ; MAX)always true
select /*+no_rewrite*/ * from t1 full join t2 on t1.c1 = t2.c1 where t1.c1 > 0 and case when t1.c1 = t2.c1 then t1.c1 else t2.c1 end > 1;
+------+------+------+------+------+------+------+------+------+
| c1   | c2   | c3   | c4   | c5   | c6   | c1   | c2   | c3   |
+------+------+------+------+------+------+------+------+------+
+------+------+------+------+------+------+------+------+------+
EXPLAIN select * from t1 full join t2 on t1.c1 = t2.c1 where t1.c1 > 0 and case when t1.c1 = t2.c1 then t1.c1 else t2.c1 end > 1;
Query Plan
======================================================
|ID|OPERATOR              |NAME|EST.ROWS|EST.TIME(us)|
------------------------------------------------------
|0 |HASH RIGHT OUTER JOIN |    |1       |8           |
|1 |??TABLE FULL SCAN     |t2  |1       |4           |
|2 |??TABLE FULL SCAN     |t1  |1       |5           |
======================================================
Outputs & filters:
-------------------------------------
  0 - output([t1.c1], [t1.c2], [t1.c3], [t1.c4], [t1.c5], [t1.c6], [t2.c1], [t2.c2], [t2.c3]), filter([CASE WHEN t1.c1 = t2.c1 THEN t1.c1 ELSE t2.c1 END 
      > 1]), rowset=256
      equal_conds([t1.c1 = t2.c1]), other_conds(nil)
  1 - output([t2.c1], [t2.c2], [t2.c3]), filter([t2.c1 > 0]), rowset=256
      access([t2.c1], [t2.c2], [t2.c3]), partitions(p0)
      is_index_back=false, is_global_index=false, filter_before_indexback[false], 
      range_key([t2.__pk_increment]), range(MIN ; MAX)always true
  2 - output([t1.c1], [t1.c2], [t1.c3], [t1.c4], [t1.c5], [t1.c6]), filter([t1.c1 > 0]), rowset=256
      access([t1.c1], [t1.c2], [t1.c3], [t1.c4], [t1.c5], [t1.c6]), partitions(p0)
      is_index_back=false, is_global_index=false, filter_before_indexback[false], 
      range_key([t1.__pk_increment]), range(MIN ; MAX)always true
select * from t1 full join t2 on t1.c1 = t2.c1 where t1.c1 > 0 and case when t1.c1 = t2.c1 then t1.c1 else t2.c1 end > 1;
+------+------+------+------+------+------+------+------+------+
| c1   | c2   | c3   | c4   | c5   | c6   | c1   | c2   | c3   |
+------+------+------+------+------+------+------+------+------+
+------+------+------+------+------+------+------+------+------+

EXPLAIN select /*+no_rewrite*/ * from t1 full join t2 on t1.c1 = t2.c1 and case when t1.c2 > t2.c2 then t1.c2 else t2.c2 end > 1 where t1.c2 > t2.c2;
Query Plan
=====================================================
|ID|OPERATOR             |NAME|EST.ROWS|EST.TIME(us)|
-----------------------------------------------------
|0 |HASH FULL OUTER JOIN |    |2       |10          |
|1 |??TABLE FULL SCAN    |t2  |1       |4           |
|2 |??TABLE FULL SCAN    |t1  |5       |5           |
=====================================================
Outputs & filters:
-------------------------------------
  0 - output([t1.c1], [t1.c2], [t1.c3], [t1.c4], [t1.c5], [t1.c6], [t2.c1], [t2.c2], [t2.c3]), filter([t1.c2 > t2.c2]), rowset=256
      equal_conds([t1.c1 = t2.c1]), other_conds([CASE WHEN t1.c2 > t2.c2 THEN t1.c2 ELSE t2.c2 END > 1])
  1 - output([t2.c1], [t2.c2], [t2.c3]), filter(nil), rowset=256
      access([t2.c1], [t2.c2], [t2.c3]), partitions(p0)
      is_index_back=false, is_global_index=false, 
      range_key([t2.__pk_increment]), range(MIN ; MAX)always true
  2 - output([t1.c1], [t1.c2], [t1.c3], [t1.c4], [t1.c5], [t1.c6]), filter(nil), rowset=256
      access([t1.c1], [t1.c2], [t1.c3], [t1.c4], [t1.c5], [t1.c6]), partitions(p0)
      is_index_back=false, is_global_index=false, 
      range_key([t1.__pk_increment]), range(MIN ; MAX)always true
select /*+no_rewrite*/ * from t1 full join t2 on t1.c1 = t2.c1 and case when t1.c2 > t2.c2 then t1.c2 else t2.c2 end > 1 where t1.c2 > t2.c2;
+------+------+------+------+------+------+------+------+------+
| c1   | c2   | c3   | c4   | c5   | c6   | c1   | c2   | c3   |
+------+------+------+------+------+------+------+------+------+
+------+------+------+------+------+------+------+------+------+
EXPLAIN select * from t1 full join t2 on t1.c1 = t2.c1 and case when t1.c2 > t2.c2 then t1.c2 else t2.c2 end > 1 where t1.c2 > t2.c2;
Query Plan
=================================================
|ID|OPERATOR         |NAME|EST.ROWS|EST.TIME(us)|
-------------------------------------------------
|0 |HASH JOIN        |    |1       |9           |
|1 |??TABLE FULL SCAN|t1  |1       |5           |
|2 |??TABLE FULL SCAN|t2  |1       |4           |
=================================================
Outputs & filters:
-------------------------------------
  0 - output([t1.c1], [t1.c2], [t1.c3], [t1.c4], [t1.c5], [t1.c6], [t2.c1], [t2.c2], [t2.c3]), filter(nil), rowset=256
      equal_conds([t1.c1 = t2.c1]), other_conds([t1.c2 > t2.c2])
  1 - output([t1.c1], [t1.c2], [t1.c3], [t1.c4], [t1.c5], [t1.c6]), filter([t1.c2 > 1]), rowset=256
      access([t1.c1], [t1.c2], [t1.c3], [t1.c4], [t1.c5], [t1.c6]), partitions(p0)
      is_index_back=false, is_global_index=false, filter_before_indexback[false], 
      range_key([t1.__pk_increment]), range(MIN ; MAX)always true
  2 - output([t2.c1], [t2.c2], [t2.c3]), filter(nil), rowset=256
      access([t2.c1], [t2.c2], [t2.c3]), partitions(p0)
      is_index_back=false, is_global_index=false, 
      range_key([t2.__pk_increment]), range(MIN ; MAX)always true
select * from t1 full join t2 on t1.c1 = t2.c1 and case when t1.c2 > t2.c2 then t1.c2 else t2.c2 end > 1 where t1.c2 > t2.c2;
+------+------+------+------+------+------+------+------+------+
| c1   | c2   | c3   | c4   | c5   | c6   | c1   | c2   | c3   |
+------+------+------+------+------+------+------+------+------+
+------+------+------+------+------+------+------+------+------+

EXPLAIN select /*+no_rewrite*/ * from t1 left join t2 on t1.c1 = t2.c1 and case when t1.c2 > t2.c2 then t1.c2 else t2.c2 end > 1 where t1.c2 > t2.c2;
Query Plan
======================================================
|ID|OPERATOR              |NAME|EST.ROWS|EST.TIME(us)|
------------------------------------------------------
|0 |HASH RIGHT OUTER JOIN |    |2       |10          |
|1 |??TABLE FULL SCAN     |t2  |1       |4           |
|2 |??TABLE FULL SCAN     |t1  |5       |5           |
======================================================
Outputs & filters:
-------------------------------------
  0 - output([t1.c1], [t1.c2], [t1.c3], [t1.c4], [t1.c5], [t1.c6], [t2.c1], [t2.c2], [t2.c3]), filter([t1.c2 > t2.c2]), rowset=256
      equal_conds([t1.c1 = t2.c1]), other_conds([CASE WHEN t1.c2 > t2.c2 THEN t1.c2 ELSE t2.c2 END > 1])
  1 - output([t2.c1], [t2.c2], [t2.c3]), filter(nil), rowset=256
      access([t2.c1], [t2.c2], [t2.c3]), partitions(p0)
      is_index_back=false, is_global_index=false, 
      range_key([t2.__pk_increment]), range(MIN ; MAX)always true
  2 - output([t1.c1], [t1.c2], [t1.c3], [t1.c4], [t1.c5], [t1.c6]), filter(nil), rowset=256
      access([t1.c1], [t1.c2], [t1.c3], [t1.c4], [t1.c5], [t1.c6]), partitions(p0)
      is_index_back=false, is_global_index=false, 
      range_key([t1.__pk_increment]), range(MIN ; MAX)always true
select /*+no_rewrite*/ * from t1 left join t2 on t1.c1 = t2.c1 and case when t1.c2 > t2.c2 then t1.c2 else t2.c2 end > 1 where t1.c2 > t2.c2;
+------+------+------+------+------+------+------+------+------+
| c1   | c2   | c3   | c4   | c5   | c6   | c1   | c2   | c3   |
+------+------+------+------+------+------+------+------+------+
+------+------+------+------+------+------+------+------+------+
EXPLAIN select * from t1 left join t2 on t1.c1 = t2.c1 and case when t1.c2 > t2.c2 then t1.c2 else t2.c2 end > 1 where t1.c2 > t2.c2;
Query Plan
=================================================
|ID|OPERATOR         |NAME|EST.ROWS|EST.TIME(us)|
-------------------------------------------------
|0 |HASH JOIN        |    |1       |9           |
|1 |??TABLE FULL SCAN|t1  |1       |5           |
|2 |??TABLE FULL SCAN|t2  |1       |4           |
=================================================
Outputs & filters:
-------------------------------------
  0 - output([t1.c1], [t1.c2], [t1.c3], [t1.c4], [t1.c5], [t1.c6], [t2.c1], [t2.c2], [t2.c3]), filter(nil), rowset=256
      equal_conds([t1.c1 = t2.c1]), other_conds([t1.c2 > t2.c2])
  1 - output([t1.c1], [t1.c2], [t1.c3], [t1.c4], [t1.c5], [t1.c6]), filter([t1.c2 > 1]), rowset=256
      access([t1.c1], [t1.c2], [t1.c3], [t1.c4], [t1.c5], [t1.c6]), partitions(p0)
      is_index_back=false, is_global_index=false, filter_before_indexback[false], 
      range_key([t1.__pk_increment]), range(MIN ; MAX)always true
  2 - output([t2.c1], [t2.c2], [t2.c3]), filter(nil), rowset=256
      access([t2.c1], [t2.c2], [t2.c3]), partitions(p0)
      is_index_back=false, is_global_index=false, 
      range_key([t2.__pk_increment]), range(MIN ; MAX)always true
select * from t1 left join t2 on t1.c1 = t2.c1 and case when t1.c2 > t2.c2 then t1.c2 else t2.c2 end > 1 where t1.c2 > t2.c2;
+------+------+------+------+------+------+------+------+------+
| c1   | c2   | c3   | c4   | c5   | c6   | c1   | c2   | c3   |
+------+------+------+------+------+------+------+------+------+
+------+------+------+------+------+------+------+------+------+

EXPLAIN select /*+no_rewrite*/ * from t1 left join t2 on t1.c1 = t2.c1 and case when t1.c2 > t2.c2 then t1.c2 else t2.c2 end > 1 where t1.c2 > t2.c2;
Query Plan
======================================================
|ID|OPERATOR              |NAME|EST.ROWS|EST.TIME(us)|
------------------------------------------------------
|0 |HASH RIGHT OUTER JOIN |    |2       |10          |
|1 |??TABLE FULL SCAN     |t2  |1       |4           |
|2 |??TABLE FULL SCAN     |t1  |5       |5           |
======================================================
Outputs & filters:
-------------------------------------
  0 - output([t1.c1], [t1.c2], [t1.c3], [t1.c4], [t1.c5], [t1.c6], [t2.c1], [t2.c2], [t2.c3]), filter([t1.c2 > t2.c2]), rowset=256
      equal_conds([t1.c1 = t2.c1]), other_conds([CASE WHEN t1.c2 > t2.c2 THEN t1.c2 ELSE t2.c2 END > 1])
  1 - output([t2.c1], [t2.c2], [t2.c3]), filter(nil), rowset=256
      access([t2.c1], [t2.c2], [t2.c3]), partitions(p0)
      is_index_back=false, is_global_index=false, 
      range_key([t2.__pk_increment]), range(MIN ; MAX)always true
  2 - output([t1.c1], [t1.c2], [t1.c3], [t1.c4], [t1.c5], [t1.c6]), filter(nil), rowset=256
      access([t1.c1], [t1.c2], [t1.c3], [t1.c4], [t1.c5], [t1.c6]), partitions(p0)
      is_index_back=false, is_global_index=false, 
      range_key([t1.__pk_increment]), range(MIN ; MAX)always true
select /*+no_rewrite*/ * from t1 left join t2 on t1.c1 = t2.c1 and case when t1.c2 > t2.c2 then t1.c2 else t2.c2 end > 1 where t1.c2 > t2.c2;
+------+------+------+------+------+------+------+------+------+
| c1   | c2   | c3   | c4   | c5   | c6   | c1   | c2   | c3   |
+------+------+------+------+------+------+------+------+------+
+------+------+------+------+------+------+------+------+------+
EXPLAIN select * from t1 left join t2 on t1.c1 = t2.c1 and case when t1.c2 > t2.c2 then t1.c2 else t2.c2 end > 1 where t1.c2 > t2.c2;
Query Plan
=================================================
|ID|OPERATOR         |NAME|EST.ROWS|EST.TIME(us)|
-------------------------------------------------
|0 |HASH JOIN        |    |1       |9           |
|1 |??TABLE FULL SCAN|t1  |1       |5           |
|2 |??TABLE FULL SCAN|t2  |1       |4           |
=================================================
Outputs & filters:
-------------------------------------
  0 - output([t1.c1], [t1.c2], [t1.c3], [t1.c4], [t1.c5], [t1.c6], [t2.c1], [t2.c2], [t2.c3]), filter(nil), rowset=256
      equal_conds([t1.c1 = t2.c1]), other_conds([t1.c2 > t2.c2])
  1 - output([t1.c1], [t1.c2], [t1.c3], [t1.c4], [t1.c5], [t1.c6]), filter([t1.c2 > 1]), rowset=256
      access([t1.c1], [t1.c2], [t1.c3], [t1.c4], [t1.c5], [t1.c6]), partitions(p0)
      is_index_back=false, is_global_index=false, filter_before_indexback[false], 
      range_key([t1.__pk_increment]), range(MIN ; MAX)always true
  2 - output([t2.c1], [t2.c2], [t2.c3]), filter(nil), rowset=256
      access([t2.c1], [t2.c2], [t2.c3]), partitions(p0)
      is_index_back=false, is_global_index=false, 
      range_key([t2.__pk_increment]), range(MIN ; MAX)always true
select * from t1 left join t2 on t1.c1 = t2.c1 and case when t1.c2 > t2.c2 then t1.c2 else t2.c2 end > 1 where t1.c2 > t2.c2;
+------+------+------+------+------+------+------+------+------+
| c1   | c2   | c3   | c4   | c5   | c6   | c1   | c2   | c3   |
+------+------+------+------+------+------+------+------+------+
+------+------+------+------+------+------+------+------+------+

**************************** testcase for shared expr **************************** 

== case 1
EXPLAIN select /*+no_rewrite*/ case when c1 > c2 then c1 else c2 end > 1 from t1 where c1 > c2 and case when c1 > c2 then c1 else c2 end > 1;
Query Plan
===============================================
|ID|OPERATOR       |NAME|EST.ROWS|EST.TIME(us)|
-----------------------------------------------
|0 |TABLE FULL SCAN|t1  |1       |5           |
===============================================
Outputs & filters:
-------------------------------------
  0 - output([CASE WHEN t1.c1 > t1.c2 THEN t1.c1 ELSE t1.c2 END > 1]), filter([t1.c1 > t1.c2], [CASE WHEN t1.c1 > t1.c2 THEN t1.c1 ELSE t1.c2 END > 1]), rowset=256
      access([t1.c1], [t1.c2]), partitions(p0)
      is_index_back=false, is_global_index=false, filter_before_indexback[false,false], 
      range_key([t1.__pk_increment]), range(MIN ; MAX)always true
select /*+no_rewrite*/ case when c1 > c2 then c1 else c2 end > 1 from t1 where c1 > c2 and case when c1 > c2 then c1 else c2 end > 1;
+-------------------------------------------+
| case when c1 > c2 then c1 else c2 end > 1 |
+-------------------------------------------+
+-------------------------------------------+
EXPLAIN select case when c1 > c2 then c1 else c2 end > 1 from t1 where c1 > c2 and case when c1 > c2 then c1 else c2 end > 1;
Query Plan
===============================================
|ID|OPERATOR       |NAME|EST.ROWS|EST.TIME(us)|
-----------------------------------------------
|0 |TABLE FULL SCAN|t1  |1       |5           |
===============================================
Outputs & filters:
-------------------------------------
  0 - output([CASE WHEN t1.c1 > t1.c2 THEN t1.c1 ELSE t1.c2 END > 1]), filter([t1.c1 > t1.c2], [CASE WHEN t1.c1 > t1.c2 THEN t1.c1 ELSE t1.c2 END > 1]), rowset=256
      access([t1.c1], [t1.c2]), partitions(p0)
      is_index_back=false, is_global_index=false, filter_before_indexback[false,false], 
      range_key([t1.__pk_increment]), range(MIN ; MAX)always true
select case when c1 > c2 then c1 else c2 end > 1 from t1 where c1 > c2 and case when c1 > c2 then c1 else c2 end > 1;
+-------------------------------------------+
| case when c1 > c2 then c1 else c2 end > 1 |
+-------------------------------------------+
+-------------------------------------------+


== case 2
EXPLAIN select /*+no_rewrite*/ c1 > 1 or c2 > 1 from t1 where c1 > 1 and case when c1 > 1 or c2 > 1 then c1 else c2 end > 1;
Query Plan
===============================================
|ID|OPERATOR       |NAME|EST.ROWS|EST.TIME(us)|
-----------------------------------------------
|0 |TABLE FULL SCAN|t1  |1       |5           |
===============================================
Outputs & filters:
-------------------------------------
  0 - output([t1.c1 > 1 OR t1.c2 > 1]), filter([t1.c1 > 1], [CASE WHEN t1.c1 > 1 OR t1.c2 > 1 THEN t1.c1 ELSE t1.c2 END > 1]), rowset=256
      access([t1.c1], [t1.c2]), partitions(p0)
      is_index_back=false, is_global_index=false, filter_before_indexback[false,false], 
      range_key([t1.__pk_increment]), range(MIN ; MAX)always true
select /*+no_rewrite*/ c1 > 1 or c2 > 1 from t1 where c1 > 1 and case when c1 > 1 or c2 > 1 then c1 else c2 end > 1;
+------------------+
| c1 > 1 or c2 > 1 |
+------------------+
|                1 |
|                1 |
|                1 |
|                1 |
+------------------+
EXPLAIN select c1 > 1 or c2 > 1 from t1 where c1 > 1 and case when c1 > 1 or c2 > 1 then c1 else c2 end > 1;
Query Plan
===============================================
|ID|OPERATOR       |NAME|EST.ROWS|EST.TIME(us)|
-----------------------------------------------
|0 |TABLE FULL SCAN|t1  |1       |5           |
===============================================
Outputs & filters:
-------------------------------------
  0 - output([t1.c1 > 1 OR t1.c2 > 1]), filter([t1.c1 > 1], [CASE WHEN t1.c1 > 1 OR t1.c2 > 1 THEN t1.c1 ELSE t1.c2 END > 1]), rowset=256
      access([t1.c1], [t1.c2]), partitions(p0)
      is_index_back=false, is_global_index=false, filter_before_indexback[false,false], 
      range_key([t1.__pk_increment]), range(MIN ; MAX)always true
select c1 > 1 or c2 > 1 from t1 where c1 > 1 and case when c1 > 1 or c2 > 1 then c1 else c2 end > 1;
+------------------+
| c1 > 1 or c2 > 1 |
+------------------+
|                1 |
|                1 |
|                1 |
|                1 |
+------------------+

**************************** testcase for plan cache **************************** 

== case 1
set ob_enable_plan_cache = 1;
alter system flush plan cache global;

EXPLAIN select * from t1 where c1 > 1 and case when c1 > 1 then c1 else 1 end > 0;
Query Plan
===============================================
|ID|OPERATOR       |NAME|EST.ROWS|EST.TIME(us)|
-----------------------------------------------
|0 |TABLE FULL SCAN|t1  |1       |5           |
===============================================
Outputs & filters:
-------------------------------------
  0 - output([t1.c1], [t1.c2], [t1.c3], [t1.c4], [t1.c5], [t1.c6]), filter([t1.c1 > 1], [t1.c1 > 0]), rowset=256
      access([t1.c1], [t1.c2], [t1.c3], [t1.c4], [t1.c5], [t1.c6]), partitions(p0)
      is_index_back=false, is_global_index=false, filter_before_indexback[false,false], 
      range_key([t1.__pk_increment]), range(MIN ; MAX)always true
select * from t1 where c1 > 1 and case when c1 > 1 then c1 else 1 end > 0;
+------+------+------+------+------+------+
| c1   | c2   | c3   | c4   | c5   | c6   |
+------+------+------+------+------+------+
|    2 |    2 |    2 |    2 |    2 |    2 |
|    3 |    3 |    3 |    3 |    3 |    3 |
|    4 |    4 |    4 |    4 |    4 |    4 |
|    5 |    5 |    5 |    5 |    5 |    5 |
+------+------+------+------+------+------+
EXPLAIN select * from t1 where c1 > 0 and case when c1 > 1 then c1 else 1 end > 0;
Query Plan
===============================================
|ID|OPERATOR       |NAME|EST.ROWS|EST.TIME(us)|
-----------------------------------------------
|0 |TABLE FULL SCAN|t1  |1       |5           |
===============================================
Outputs & filters:
-------------------------------------
  0 - output([t1.c1], [t1.c2], [t1.c3], [t1.c4], [t1.c5], [t1.c6]), filter([t1.c1 > 0], [CASE WHEN t1.c1 > 1 THEN t1.c1 ELSE 1 END > 0]), rowset=256
      access([t1.c1], [t1.c2], [t1.c3], [t1.c4], [t1.c5], [t1.c6]), partitions(p0)
      is_index_back=false, is_global_index=false, filter_before_indexback[false,false], 
      range_key([t1.__pk_increment]), range(MIN ; MAX)always true
select * from t1 where c1 > 0 and case when c1 > 1 then c1 else 1 end > 0;
+------+------+------+------+------+------+
| c1   | c2   | c3   | c4   | c5   | c6   |
+------+------+------+------+------+------+
|    1 |    1 |    1 |    1 |    1 |    1 |
|    2 |    2 |    2 |    2 |    2 |    2 |
|    3 |    3 |    3 |    3 |    3 |    3 |
|    4 |    4 |    4 |    4 |    4 |    4 |
|    5 |    5 |    5 |    5 |    5 |    5 |
+------+------+------+------+------+------+

EXPLAIN select hit_count, sql_id, query_sql from oceanbase.V$OB_PLAN_CACHE_PLAN_STAT where statement like "select * from t1 where c1 > ? and case when c1 > ? then c1 else ? end > ?";
Query Plan
==================================================================
|ID|OPERATOR       |NAME                   |EST.ROWS|EST.TIME(us)|
------------------------------------------------------------------
|0 |TABLE FULL SCAN|__all_virtual_plan_stat|16      |150         |
==================================================================
Outputs & filters:
-------------------------------------
  0 - output([__all_virtual_plan_stat.hit_count], [__all_virtual_plan_stat.sql_id], [__all_virtual_plan_stat.query_sql]), filter([(T_OP_LIKE, cast(__all_virtual_plan_stat.statement,
       VARCHAR(1048576)), cast('select * from t1 where c1 > ? and case when c1 > ? then c1 else ? end > ?', VARCHAR(1048576)), '\\')], [__all_virtual_plan_stat.object_status 
      = 0], [__all_virtual_plan_stat.is_in_pc = 1], [__all_virtual_plan_stat.svr_port = RPC_PORT()], [__all_virtual_plan_stat.svr_ip = HOST_IP()])
      access([__all_virtual_plan_stat.svr_ip], [__all_virtual_plan_stat.svr_port], [__all_virtual_plan_stat.object_status], [__all_virtual_plan_stat.is_in_pc],
       [__all_virtual_plan_stat.sql_id], [__all_virtual_plan_stat.statement], [__all_virtual_plan_stat.query_sql], [__all_virtual_plan_stat.hit_count]), partitions(p1)
      is_index_back=false, is_global_index=false, filter_before_indexback[false,false,false,false,false], 
      range_key(nil), range(MIN ; MAX)
select hit_count, sql_id, query_sql from oceanbase.V$OB_PLAN_CACHE_PLAN_STAT where statement like "select * from t1 where c1 > ? and case when c1 > ? then c1 else ? end > ?";
+-----------+----------------------------------+---------------------------------------------------------------------------+
| hit_count | sql_id                           | query_sql                                                                 |
+-----------+----------------------------------+---------------------------------------------------------------------------+
|         0 | F95C3D23FD6AD829431511617967A954 | select * from t1 where c1 > 1 and case when c1 > 1 then c1 else 1 end > 0 |
|         0 | F95C3D23FD6AD829431511617967A954 | select * from t1 where c1 > 0 and case when c1 > 1 then c1 else 1 end > 0 |
+-----------+----------------------------------+---------------------------------------------------------------------------+
expectation 2 cache 
== case 2
alter system flush plan cache global;

EXPLAIN select * from t1 where c1 > 1 and case when c1 > 1 then c1 else 1 end > 1;
Query Plan
===============================================
|ID|OPERATOR       |NAME|EST.ROWS|EST.TIME(us)|
-----------------------------------------------
|0 |TABLE FULL SCAN|t1  |1       |5           |
===============================================
Outputs & filters:
-------------------------------------
  0 - output([t1.c1], [t1.c2], [t1.c3], [t1.c4], [t1.c5], [t1.c6]), filter([t1.c1 > 1]), rowset=256
      access([t1.c1], [t1.c2], [t1.c3], [t1.c4], [t1.c5], [t1.c6]), partitions(p0)
      is_index_back=false, is_global_index=false, filter_before_indexback[false], 
      range_key([t1.__pk_increment]), range(MIN ; MAX)always true
select * from t1 where c1 > 1 and case when c1 > 1 then c1 else 1 end > 1;
+------+------+------+------+------+------+
| c1   | c2   | c3   | c4   | c5   | c6   |
+------+------+------+------+------+------+
|    2 |    2 |    2 |    2 |    2 |    2 |
|    3 |    3 |    3 |    3 |    3 |    3 |
|    4 |    4 |    4 |    4 |    4 |    4 |
|    5 |    5 |    5 |    5 |    5 |    5 |
+------+------+------+------+------+------+
EXPLAIN select * from t1 where c1 > 1 and case when c1 > 1 then c1 else 1 end > 0;
Query Plan
===============================================
|ID|OPERATOR       |NAME|EST.ROWS|EST.TIME(us)|
-----------------------------------------------
|0 |TABLE FULL SCAN|t1  |1       |5           |
===============================================
Outputs & filters:
-------------------------------------
  0 - output([t1.c1], [t1.c2], [t1.c3], [t1.c4], [t1.c5], [t1.c6]), filter([t1.c1 > 1], [t1.c1 > 0]), rowset=256
      access([t1.c1], [t1.c2], [t1.c3], [t1.c4], [t1.c5], [t1.c6]), partitions(p0)
      is_index_back=false, is_global_index=false, filter_before_indexback[false,false], 
      range_key([t1.__pk_increment]), range(MIN ; MAX)always true
select * from t1 where c1 > 1 and case when c1 > 1 then c1 else 1 end > 0;
+------+------+------+------+------+------+
| c1   | c2   | c3   | c4   | c5   | c6   |
+------+------+------+------+------+------+
|    2 |    2 |    2 |    2 |    2 |    2 |
|    3 |    3 |    3 |    3 |    3 |    3 |
|    4 |    4 |    4 |    4 |    4 |    4 |
|    5 |    5 |    5 |    5 |    5 |    5 |
+------+------+------+------+------+------+

EXPLAIN select hit_count, sql_id, query_sql from oceanbase.V$OB_PLAN_CACHE_PLAN_STAT where statement like "select * from t1 where c1 > ? and case when c1 > ? then c1 else ? end > ?";
Query Plan
==================================================================
|ID|OPERATOR       |NAME                   |EST.ROWS|EST.TIME(us)|
------------------------------------------------------------------
|0 |TABLE FULL SCAN|__all_virtual_plan_stat|16      |150         |
==================================================================
Outputs & filters:
-------------------------------------
  0 - output([__all_virtual_plan_stat.hit_count], [__all_virtual_plan_stat.sql_id], [__all_virtual_plan_stat.query_sql]), filter([(T_OP_LIKE, cast(__all_virtual_plan_stat.statement,
       VARCHAR(1048576)), cast('select * from t1 where c1 > ? and case when c1 > ? then c1 else ? end > ?', VARCHAR(1048576)), '\\')], [__all_virtual_plan_stat.object_status 
      = 0], [__all_virtual_plan_stat.is_in_pc = 1], [__all_virtual_plan_stat.svr_port = RPC_PORT()], [__all_virtual_plan_stat.svr_ip = HOST_IP()])
      access([__all_virtual_plan_stat.svr_ip], [__all_virtual_plan_stat.svr_port], [__all_virtual_plan_stat.object_status], [__all_virtual_plan_stat.is_in_pc],
       [__all_virtual_plan_stat.sql_id], [__all_virtual_plan_stat.statement], [__all_virtual_plan_stat.query_sql], [__all_virtual_plan_stat.hit_count]), partitions(p1)
      is_index_back=false, is_global_index=false, filter_before_indexback[false,false,false,false,false], 
      range_key(nil), range(MIN ; MAX)
select hit_count, sql_id, query_sql from oceanbase.V$OB_PLAN_CACHE_PLAN_STAT where statement like "select * from t1 where c1 > ? and case when c1 > ? then c1 else ? end > ?";
+-----------+----------------------------------+---------------------------------------------------------------------------+
| hit_count | sql_id                           | query_sql                                                                 |
+-----------+----------------------------------+---------------------------------------------------------------------------+
|         0 | F95C3D23FD6AD829431511617967A954 | select * from t1 where c1 > 1 and case when c1 > 1 then c1 else 1 end > 1 |
|         0 | F95C3D23FD6AD829431511617967A954 | select * from t1 where c1 > 1 and case when c1 > 1 then c1 else 1 end > 0 |
+-----------+----------------------------------+---------------------------------------------------------------------------+
expectation 2 cache 
== case 3
alter system flush plan cache global;

EXPLAIN select * from t1 where c1 > 1 and case when c1 > 1 then c1 else 1 end > 0;
Query Plan
===============================================
|ID|OPERATOR       |NAME|EST.ROWS|EST.TIME(us)|
-----------------------------------------------
|0 |TABLE FULL SCAN|t1  |1       |5           |
===============================================
Outputs & filters:
-------------------------------------
  0 - output([t1.c1], [t1.c2], [t1.c3], [t1.c4], [t1.c5], [t1.c6]), filter([t1.c1 > 1], [t1.c1 > 0]), rowset=256
      access([t1.c1], [t1.c2], [t1.c3], [t1.c4], [t1.c5], [t1.c6]), partitions(p0)
      is_index_back=false, is_global_index=false, filter_before_indexback[false,false], 
      range_key([t1.__pk_increment]), range(MIN ; MAX)always true
select * from t1 where c1 > 1 and case when c1 > 1 then c1 else 1 end > 0;
+------+------+------+------+------+------+
| c1   | c2   | c3   | c4   | c5   | c6   |
+------+------+------+------+------+------+
|    2 |    2 |    2 |    2 |    2 |    2 |
|    3 |    3 |    3 |    3 |    3 |    3 |
|    4 |    4 |    4 |    4 |    4 |    4 |
|    5 |    5 |    5 |    5 |    5 |    5 |
+------+------+------+------+------+------+
EXPLAIN select * from t1 where c1 > 1 and case when c1 > 1 then c1 else 1 end > 1;
Query Plan
===============================================
|ID|OPERATOR       |NAME|EST.ROWS|EST.TIME(us)|
-----------------------------------------------
|0 |TABLE FULL SCAN|t1  |1       |5           |
===============================================
Outputs & filters:
-------------------------------------
  0 - output([t1.c1], [t1.c2], [t1.c3], [t1.c4], [t1.c5], [t1.c6]), filter([t1.c1 > 1]), rowset=256
      access([t1.c1], [t1.c2], [t1.c3], [t1.c4], [t1.c5], [t1.c6]), partitions(p0)
      is_index_back=false, is_global_index=false, filter_before_indexback[false], 
      range_key([t1.__pk_increment]), range(MIN ; MAX)always true
select * from t1 where c1 > 1 and case when c1 > 1 then c1 else 1 end > 1;
+------+------+------+------+------+------+
| c1   | c2   | c3   | c4   | c5   | c6   |
+------+------+------+------+------+------+
|    2 |    2 |    2 |    2 |    2 |    2 |
|    3 |    3 |    3 |    3 |    3 |    3 |
|    4 |    4 |    4 |    4 |    4 |    4 |
|    5 |    5 |    5 |    5 |    5 |    5 |
+------+------+------+------+------+------+

EXPLAIN select hit_count, sql_id, query_sql from oceanbase.V$OB_PLAN_CACHE_PLAN_STAT where statement like "select * from t1 where c1 > ? and case when c1 > ? then c1 else ? end > ?";
Query Plan
==================================================================
|ID|OPERATOR       |NAME                   |EST.ROWS|EST.TIME(us)|
------------------------------------------------------------------
|0 |TABLE FULL SCAN|__all_virtual_plan_stat|16      |150         |
==================================================================
Outputs & filters:
-------------------------------------
  0 - output([__all_virtual_plan_stat.hit_count], [__all_virtual_plan_stat.sql_id], [__all_virtual_plan_stat.query_sql]), filter([(T_OP_LIKE, cast(__all_virtual_plan_stat.statement,
       VARCHAR(1048576)), cast('select * from t1 where c1 > ? and case when c1 > ? then c1 else ? end > ?', VARCHAR(1048576)), '\\')], [__all_virtual_plan_stat.object_status 
      = 0], [__all_virtual_plan_stat.is_in_pc = 1], [__all_virtual_plan_stat.svr_port = RPC_PORT()], [__all_virtual_plan_stat.svr_ip = HOST_IP()])
      access([__all_virtual_plan_stat.svr_ip], [__all_virtual_plan_stat.svr_port], [__all_virtual_plan_stat.object_status], [__all_virtual_plan_stat.is_in_pc],
       [__all_virtual_plan_stat.sql_id], [__all_virtual_plan_stat.statement], [__all_virtual_plan_stat.query_sql], [__all_virtual_plan_stat.hit_count]), partitions(p1)
      is_index_back=false, is_global_index=false, filter_before_indexback[false,false,false,false,false], 
      range_key(nil), range(MIN ; MAX)
select hit_count, sql_id, query_sql from oceanbase.V$OB_PLAN_CACHE_PLAN_STAT where statement like "select * from t1 where c1 > ? and case when c1 > ? then c1 else ? end > ?";
+-----------+----------------------------------+---------------------------------------------------------------------------+
| hit_count | sql_id                           | query_sql                                                                 |
+-----------+----------------------------------+---------------------------------------------------------------------------+
|         1 | F95C3D23FD6AD829431511617967A954 | select * from t1 where c1 > 1 and case when c1 > 1 then c1 else 1 end > 0 |
+-----------+----------------------------------+---------------------------------------------------------------------------+
expectation 1 cache 

drop table t1;
drop table t2;
drop table t3;

USE DB_CONST_EXPR_PROPAGATE;
drop database DB_CONST_EXPR_PROPAGATE;
