result_format: 4
explain_protocol: 2
DROP DATABASE IF EXISTS DB_CONVERT_CASE_WHEN;
CREATE DATABASE DB_CONVERT_CASE_WHEN;
USE DB_CONVERT_CASE_WHEN;

create table t1(c1 int, c2 int, c3 int, c4 int, c5 int, c6 int);
create table t2(c1 int, c2 int, c3 int);

insert/*trace*/ into t1 values(1,1,1,1,1,1), (2,2,2,2,2,2), (3,3,3,3,3,3), (4,4,4,4,4,4), (5,5,5,5,5,5);

set ob_enable_plan_cache = 0;
**************************** convert when exprs test **************************** 

== case 1
EXPLAIN select /*+no_rewrite*/ * from t1 where c1 > 0 and case when 2 > 1 then c1 else c2 end > 1;
Query Plan
===============================================
|ID|OPERATOR       |NAME|EST.ROWS|EST.TIME(us)|
-----------------------------------------------
|0 |TABLE FULL SCAN|t1  |1       |5           |
===============================================
Outputs & filters:
-------------------------------------
  0 - output([t1.c1], [t1.c2], [t1.c3], [t1.c4], [t1.c5], [t1.c6]), filter([t1.c1 > 0], [CASE WHEN 2 > 1 THEN t1.c1 ELSE t1.c2 END > 1]), rowset=256
      access([t1.c1], [t1.c2], [t1.c3], [t1.c4], [t1.c5], [t1.c6]), partitions(p0)
      is_index_back=false, is_global_index=false, filter_before_indexback[false,false], 
      range_key([t1.__pk_increment]), range(MIN ; MAX)always true
select /*+no_rewrite*/ * from t1 where c1 > 0 and case when 2 > 1 then c1 else c2 end > 1;
+------+------+------+------+------+------+
| c1   | c2   | c3   | c4   | c5   | c6   |
+------+------+------+------+------+------+
|    2 |    2 |    2 |    2 |    2 |    2 |
|    3 |    3 |    3 |    3 |    3 |    3 |
|    4 |    4 |    4 |    4 |    4 |    4 |
|    5 |    5 |    5 |    5 |    5 |    5 |
+------+------+------+------+------+------+
EXPLAIN select * from t1 where c1 > 0 and case when 2 > 1 then c1 else c2 end > 1;
Query Plan
===============================================
|ID|OPERATOR       |NAME|EST.ROWS|EST.TIME(us)|
-----------------------------------------------
|0 |TABLE FULL SCAN|t1  |1       |5           |
===============================================
Outputs & filters:
-------------------------------------
  0 - output([t1.c1], [t1.c2], [t1.c3], [t1.c4], [t1.c5], [t1.c6]), filter([t1.c1 > 0], [t1.c1 > 1]), rowset=256
      access([t1.c1], [t1.c2], [t1.c3], [t1.c4], [t1.c5], [t1.c6]), partitions(p0)
      is_index_back=false, is_global_index=false, filter_before_indexback[false,false], 
      range_key([t1.__pk_increment]), range(MIN ; MAX)always true
select * from t1 where c1 > 0 and case when 2 > 1 then c1 else c2 end > 1;
+------+------+------+------+------+------+
| c1   | c2   | c3   | c4   | c5   | c6   |
+------+------+------+------+------+------+
|    2 |    2 |    2 |    2 |    2 |    2 |
|    3 |    3 |    3 |    3 |    3 |    3 |
|    4 |    4 |    4 |    4 |    4 |    4 |
|    5 |    5 |    5 |    5 |    5 |    5 |
+------+------+------+------+------+------+


== case 2
EXPLAIN select /*+no_rewrite*/ case when 2 > 1 then c1 else c2 end from t1 where c1 > 0 and case when 2 > 1 then c1 else c2 end > 1;
Query Plan
===============================================
|ID|OPERATOR       |NAME|EST.ROWS|EST.TIME(us)|
-----------------------------------------------
|0 |TABLE FULL SCAN|t1  |1       |5           |
===============================================
Outputs & filters:
-------------------------------------
  0 - output([CASE WHEN 2 > 1 THEN t1.c1 ELSE t1.c2 END]), filter([t1.c1 > 0], [CASE WHEN 2 > 1 THEN t1.c1 ELSE t1.c2 END > 1]), rowset=256
      access([t1.c1], [t1.c2]), partitions(p0)
      is_index_back=false, is_global_index=false, filter_before_indexback[false,false], 
      range_key([t1.__pk_increment]), range(MIN ; MAX)always true
select /*+no_rewrite*/ case when 2 > 1 then c1 else c2 end from t1 where c1 > 0 and case when 2 > 1 then c1 else c2 end > 1;
+-------------------------------------+
| case when 2 > 1 then c1 else c2 end |
+-------------------------------------+
|                                   2 |
|                                   3 |
|                                   4 |
|                                   5 |
+-------------------------------------+
EXPLAIN select case when 2 > 1 then c1 else c2 end from t1 where c1 > 0 and case when 2 > 1 then c1 else c2 end > 1;
Query Plan
===============================================
|ID|OPERATOR       |NAME|EST.ROWS|EST.TIME(us)|
-----------------------------------------------
|0 |TABLE FULL SCAN|t1  |1       |5           |
===============================================
Outputs & filters:
-------------------------------------
  0 - output([t1.c1]), filter([t1.c1 > 0], [t1.c1 > 1]), rowset=256
      access([t1.c1]), partitions(p0)
      is_index_back=false, is_global_index=false, filter_before_indexback[false,false], 
      range_key([t1.__pk_increment]), range(MIN ; MAX)always true
select case when 2 > 1 then c1 else c2 end from t1 where c1 > 0 and case when 2 > 1 then c1 else c2 end > 1;
+-------------------------------------+
| case when 2 > 1 then c1 else c2 end |
+-------------------------------------+
|                                   2 |
|                                   3 |
|                                   4 |
|                                   5 |
+-------------------------------------+


== case 3
EXPLAIN select /*+no_rewrite*/ 1 from t1 where case when c1 > c2 then c1 else c2 end > 1;
Query Plan
===============================================
|ID|OPERATOR       |NAME|EST.ROWS|EST.TIME(us)|
-----------------------------------------------
|0 |TABLE FULL SCAN|t1  |2       |5           |
===============================================
Outputs & filters:
-------------------------------------
  0 - output([1]), filter([CASE WHEN t1.c1 > t1.c2 THEN t1.c1 ELSE t1.c2 END > 1]), rowset=256
      access([t1.c1], [t1.c2]), partitions(p0)
      is_index_back=false, is_global_index=false, filter_before_indexback[false], 
      range_key([t1.__pk_increment]), range(MIN ; MAX)always true
select /*+no_rewrite*/ 1 from t1 where case when c1 > c2 then c1 else c2 end > 1;
+---+
| 1 |
+---+
| 1 |
| 1 |
| 1 |
| 1 |
+---+
EXPLAIN select 1 from t1 where case when c1 > c2 then c1 else c2 end > 1;
Query Plan
===============================================
|ID|OPERATOR       |NAME|EST.ROWS|EST.TIME(us)|
-----------------------------------------------
|0 |TABLE FULL SCAN|t1  |2       |5           |
===============================================
Outputs & filters:
-------------------------------------
  0 - output([1]), filter([CASE WHEN t1.c1 > t1.c2 THEN t1.c1 ELSE t1.c2 END > 1]), rowset=256
      access([t1.c1], [t1.c2]), partitions(p0)
      is_index_back=false, is_global_index=false, filter_before_indexback[false], 
      range_key([t1.__pk_increment]), range(MIN ; MAX)always true
select 1 from t1 where case when c1 > c2 then c1 else c2 end > 1;
+---+
| 1 |
+---+
| 1 |
| 1 |
| 1 |
| 1 |
+---+


== case 4
EXPLAIN select /*+no_rewrite*/ 1 from t1 where case when 2 > 2 then c1 
                                            when 1 > 2  then 2 
                                            when 2 < 3 then c2 
                                            else c3 end > 1;
Query Plan
===============================================
|ID|OPERATOR       |NAME|EST.ROWS|EST.TIME(us)|
-----------------------------------------------
|0 |TABLE FULL SCAN|t1  |2       |5           |
===============================================
Outputs & filters:
-------------------------------------
  0 - output([1]), filter([CASE WHEN 2 > 2 THEN t1.c1 WHEN 1 > 2 THEN 2 WHEN 2 < 3 THEN t1.c2 ELSE t1.c3 END > 1]), rowset=256
      access([t1.c1], [t1.c2], [t1.c3]), partitions(p0)
      is_index_back=false, is_global_index=false, filter_before_indexback[false], 
      range_key([t1.__pk_increment]), range(MIN ; MAX)always true
select /*+no_rewrite*/ 1 from t1 where case when 2 > 2 then c1 
                                            when 1 > 2  then 2 
                                            when 2 < 3 then c2 
                                            else c3 end > 1;
+---+
| 1 |
+---+
| 1 |
| 1 |
| 1 |
| 1 |
+---+
EXPLAIN select 1 from t1 where case when 2 > 2 then c1 
                            when 1 > 2  then 2 
                            when 2 < 3 then c2 
                            else c3 end > 1;
Query Plan
===============================================
|ID|OPERATOR       |NAME|EST.ROWS|EST.TIME(us)|
-----------------------------------------------
|0 |TABLE FULL SCAN|t1  |1       |5           |
===============================================
Outputs & filters:
-------------------------------------
  0 - output([1]), filter([t1.c2 > 1]), rowset=256
      access([t1.c2]), partitions(p0)
      is_index_back=false, is_global_index=false, filter_before_indexback[false], 
      range_key([t1.__pk_increment]), range(MIN ; MAX)always true
select 1 from t1 where case when 2 > 2 then c1 
                            when 1 > 2  then 2 
                            when 2 < 3 then c2 
                            else c3 end > 1;
+---+
| 1 |
+---+
| 1 |
| 1 |
| 1 |
| 1 |
+---+


== case 5
EXPLAIN select /*+no_rewrite*/ 1 from t1 where case when 2 > 1 then c1 
                                            when 1 > 2  then 2 
                                            when 2 < 3 then c2 
                                            else c3 end > 1;
Query Plan
===============================================
|ID|OPERATOR       |NAME|EST.ROWS|EST.TIME(us)|
-----------------------------------------------
|0 |TABLE FULL SCAN|t1  |2       |5           |
===============================================
Outputs & filters:
-------------------------------------
  0 - output([1]), filter([CASE WHEN 2 > 1 THEN t1.c1 WHEN 1 > 2 THEN 2 WHEN 2 < 3 THEN t1.c2 ELSE t1.c3 END > 1]), rowset=256
      access([t1.c1], [t1.c2], [t1.c3]), partitions(p0)
      is_index_back=false, is_global_index=false, filter_before_indexback[false], 
      range_key([t1.__pk_increment]), range(MIN ; MAX)always true
select /*+no_rewrite*/ 1 from t1 where case when 2 > 1 then c1 
                                            when 1 > 2  then 2 
                                            when 2 < 3 then c2 
                                            else c3 end > 1;
+---+
| 1 |
+---+
| 1 |
| 1 |
| 1 |
| 1 |
+---+
EXPLAIN select 1 from t1 where case when 2 > 1 then c1 
                            when 1 > 2  then 2 
                            when 2 < 3 then c2 
                            else c3 end > 1;
Query Plan
===============================================
|ID|OPERATOR       |NAME|EST.ROWS|EST.TIME(us)|
-----------------------------------------------
|0 |TABLE FULL SCAN|t1  |1       |5           |
===============================================
Outputs & filters:
-------------------------------------
  0 - output([1]), filter([t1.c1 > 1]), rowset=256
      access([t1.c1]), partitions(p0)
      is_index_back=false, is_global_index=false, filter_before_indexback[false], 
      range_key([t1.__pk_increment]), range(MIN ; MAX)always true
select 1 from t1 where case when 2 > 1 then c1 
                            when 1 > 2  then 2 
                            when 2 < 3 then c2 
                            else c3 end > 1;
+---+
| 1 |
+---+
| 1 |
| 1 |
| 1 |
| 1 |
+---+

== case 6
EXPLAIN select /*+no_rewrite*/ 1 from t1 where case when NULL > 1 then c1 
                                            when 1 > 2  then 2 
                                            when 2 < 3 then c2 
                                            else c3 end > 1;
Query Plan
===============================================
|ID|OPERATOR       |NAME|EST.ROWS|EST.TIME(us)|
-----------------------------------------------
|0 |TABLE FULL SCAN|t1  |2       |5           |
===============================================
Outputs & filters:
-------------------------------------
  0 - output([1]), filter([CASE WHEN NULL > 1 THEN t1.c1 WHEN 1 > 2 THEN 2 WHEN 2 < 3 THEN t1.c2 ELSE t1.c3 END > 1]), rowset=256
      access([t1.c1], [t1.c2], [t1.c3]), partitions(p0)
      is_index_back=false, is_global_index=false, filter_before_indexback[false], 
      range_key([t1.__pk_increment]), range(MIN ; MAX)always true
select /*+no_rewrite*/ 1 from t1 where case when NULL > 1 then c1 
                                            when 1 > 2  then 2 
                                            when 2 < 3 then c2 
                                            else c3 end > 1;
+---+
| 1 |
+---+
| 1 |
| 1 |
| 1 |
| 1 |
+---+
EXPLAIN select 1 from t1 where case when NULL > 1 then c1 
                            when 1 > 2  then 2 
                            when 2 < 3 then c2 
                            else c3 end > 1;
Query Plan
===============================================
|ID|OPERATOR       |NAME|EST.ROWS|EST.TIME(us)|
-----------------------------------------------
|0 |TABLE FULL SCAN|t1  |1       |5           |
===============================================
Outputs & filters:
-------------------------------------
  0 - output([1]), filter([t1.c2 > 1]), rowset=256
      access([t1.c2]), partitions(p0)
      is_index_back=false, is_global_index=false, filter_before_indexback[false], 
      range_key([t1.__pk_increment]), range(MIN ; MAX)always true
select 1 from t1 where case when NULL > 1 then c1 
                            when 1 > 2  then 2 
                            when 2 < 3 then c2 
                            else c3 end > 1;
+---+
| 1 |
+---+
| 1 |
| 1 |
| 1 |
| 1 |
+---+


== case 7
EXPLAIN select /*+no_rewrite*/ 1 from t1 where case when c1 > 1 then c1 
                                            when 1 > 2  then 2 
                                            when 2 < 3 then c2 
                                            else c3 end > 1;
Query Plan
===============================================
|ID|OPERATOR       |NAME|EST.ROWS|EST.TIME(us)|
-----------------------------------------------
|0 |TABLE FULL SCAN|t1  |2       |5           |
===============================================
Outputs & filters:
-------------------------------------
  0 - output([1]), filter([CASE WHEN t1.c1 > 1 THEN t1.c1 WHEN 1 > 2 THEN 2 WHEN 2 < 3 THEN t1.c2 ELSE t1.c3 END > 1]), rowset=256
      access([t1.c1], [t1.c2], [t1.c3]), partitions(p0)
      is_index_back=false, is_global_index=false, filter_before_indexback[false], 
      range_key([t1.__pk_increment]), range(MIN ; MAX)always true
select /*+no_rewrite*/ 1 from t1 where case when c1 > 1 then c1 
                                            when 1 > 2  then 2 
                                            when 2 < 3 then c2 
                                            else c3 end > 1;
+---+
| 1 |
+---+
| 1 |
| 1 |
| 1 |
| 1 |
+---+
EXPLAIN select 1 from t1 where case when c1 > 1 then c1 
                            when 1 > 2  then 2 
                            when 2 < 3 then c2 
                            else c3 end > 1;
Query Plan
===============================================
|ID|OPERATOR       |NAME|EST.ROWS|EST.TIME(us)|
-----------------------------------------------
|0 |TABLE FULL SCAN|t1  |2       |5           |
===============================================
Outputs & filters:
-------------------------------------
  0 - output([1]), filter([CASE WHEN t1.c1 > 1 THEN t1.c1 WHEN 1 > 2 THEN 2 WHEN 2 < 3 THEN t1.c2 ELSE t1.c3 END > 1]), rowset=256
      access([t1.c1], [t1.c2], [t1.c3]), partitions(p0)
      is_index_back=false, is_global_index=false, filter_before_indexback[false], 
      range_key([t1.__pk_increment]), range(MIN ; MAX)always true
select 1 from t1 where case when c1 > 1 then c1 
                            when 1 > 2  then 2 
                            when 2 < 3 then c2 
                            else c3 end > 1;
+---+
| 1 |
+---+
| 1 |
| 1 |
| 1 |
| 1 |
+---+


== case 8
EXPLAIN select /*+no_rewrite*/ 1 from t1 where case when 1 > 1 then c1 
                                            else c3 end > 1;
Query Plan
===============================================
|ID|OPERATOR       |NAME|EST.ROWS|EST.TIME(us)|
-----------------------------------------------
|0 |TABLE FULL SCAN|t1  |2       |5           |
===============================================
Outputs & filters:
-------------------------------------
  0 - output([1]), filter([CASE WHEN 1 > 1 THEN t1.c1 ELSE t1.c3 END > 1]), rowset=256
      access([t1.c1], [t1.c3]), partitions(p0)
      is_index_back=false, is_global_index=false, filter_before_indexback[false], 
      range_key([t1.__pk_increment]), range(MIN ; MAX)always true
select /*+no_rewrite*/ 1 from t1 where case when 1 > 1 then c1 
                                            else c3 end > 1;
+---+
| 1 |
+---+
| 1 |
| 1 |
| 1 |
| 1 |
+---+
EXPLAIN select 1 from t1 where case when 1 > 1 then c1 else c3 end > 1;
Query Plan
===============================================
|ID|OPERATOR       |NAME|EST.ROWS|EST.TIME(us)|
-----------------------------------------------
|0 |TABLE FULL SCAN|t1  |1       |5           |
===============================================
Outputs & filters:
-------------------------------------
  0 - output([1]), filter([t1.c3 > 1]), rowset=256
      access([t1.c3]), partitions(p0)
      is_index_back=false, is_global_index=false, filter_before_indexback[false], 
      range_key([t1.__pk_increment]), range(MIN ; MAX)always true
select 1 from t1 where case when 1 > 1 then c1 else c3 end > 1;
+---+
| 1 |
+---+
| 1 |
| 1 |
| 1 |
| 1 |
+---+


== case 9
EXPLAIN select /*+no_rewrite*/ * from t1 where case when 1 < 2 then 1 
                            when 2 > 3 then 2 
                            when 3 > 2 then c1
                            when c2 > 0 then c2
                            else c3
                        end > 2;
Query Plan
===============================================
|ID|OPERATOR       |NAME|EST.ROWS|EST.TIME(us)|
-----------------------------------------------
|0 |TABLE FULL SCAN|t1  |2       |5           |
===============================================
Outputs & filters:
-------------------------------------
  0 - output([t1.c1], [t1.c2], [t1.c3], [t1.c4], [t1.c5], [t1.c6]), filter([CASE WHEN 1 < 2 THEN 1 WHEN 2 > 3 THEN 2 WHEN 3 > 2 THEN t1.c1 WHEN t1.c2 > 
      0 THEN t1.c2 ELSE t1.c3 END > 2]), rowset=256
      access([t1.c1], [t1.c2], [t1.c3], [t1.c4], [t1.c5], [t1.c6]), partitions(p0)
      is_index_back=false, is_global_index=false, filter_before_indexback[false], 
      range_key([t1.__pk_increment]), range(MIN ; MAX)always true
select /*+no_rewrite*/ * from t1 where case when 1 < 2 then 1 
                            when 2 > 3 then 2 
                            when 3 > 2 then c1
                            when c2 > 0 then c2
                            else c3
                        end > 2;
+------+------+------+------+------+------+
| c1   | c2   | c3   | c4   | c5   | c6   |
+------+------+------+------+------+------+
+------+------+------+------+------+------+
EXPLAIN select * from t1 where case when 1 < 2 then 1 
                            when 2 > 3 then 2 
                            when 3 > 2 then c1
                            when c2 > 0 then c2
                            else c3
                        end > 2;
Query Plan
===============================================
|ID|OPERATOR       |NAME|EST.ROWS|EST.TIME(us)|
-----------------------------------------------
|0 |TABLE FULL SCAN|t1  |5       |5           |
===============================================
Outputs & filters:
-------------------------------------
  0 - output([t1.c1], [t1.c2], [t1.c3], [t1.c4], [t1.c5], [t1.c6]), filter(nil), startup_filter([0]), rowset=256
      access([t1.c1], [t1.c2], [t1.c3], [t1.c4], [t1.c5], [t1.c6]), partitions(p0)
      is_index_back=false, is_global_index=false, 
      range_key([t1.__pk_increment]), range(MIN ; MAX)always true
select * from t1 where case when 1 < 2 then 1 
                            when 2 > 3 then 2 
                            when 3 > 2 then c1
                            when c2 > 0 then c2
                            else c3
                        end > 2;
+------+------+------+------+------+------+
| c1   | c2   | c3   | c4   | c5   | c6   |
+------+------+------+------+------+------+
+------+------+------+------+------+------+


== case 10: with scala group by
EXPLAIN select /*+no_rewrite*/ 1 from t1 having case when 1 > 1 then count(*) 
                                             else 3 end > 1;
Query Plan
=================================================
|ID|OPERATOR         |NAME|EST.ROWS|EST.TIME(us)|
-------------------------------------------------
|0 |SCALAR GROUP BY  |    |1       |4           |
|1 |??TABLE FULL SCAN|t1  |5       |4           |
=================================================
Outputs & filters:
-------------------------------------
  0 - output([1]), filter([CASE WHEN 1 > 1 THEN T_FUN_COUNT_SUM(T_FUN_COUNT(*)) ELSE 3 END > 1]), rowset=256
      group(nil), agg_func([T_FUN_COUNT_SUM(T_FUN_COUNT(*))])
  1 - output([T_FUN_COUNT(*)]), filter(nil), rowset=256
      access(nil), partitions(p0)
      is_index_back=false, is_global_index=false, 
      range_key([t1.__pk_increment]), range(MIN ; MAX)always true
select /*+no_rewrite*/ 1 from t1 having case when 1 > 1 then count(*) 
                                             else 3 end > 1;
+---+
| 1 |
+---+
| 1 |
+---+
EXPLAIN select 1 from t1 having case when 1 > 1 then count(*) 
                        else 3 end > 1;
Query Plan
=================================================
|ID|OPERATOR         |NAME|EST.ROWS|EST.TIME(us)|
-------------------------------------------------
|0 |SCALAR GROUP BY  |    |1       |4           |
|1 |??TABLE FULL SCAN|t1  |5       |4           |
=================================================
Outputs & filters:
-------------------------------------
  0 - output([1]), filter([CASE WHEN 1 > 1 THEN T_FUN_COUNT_SUM(T_FUN_COUNT(*)) ELSE 3 END > 1]), rowset=256
      group(nil), agg_func([T_FUN_COUNT_SUM(T_FUN_COUNT(*))])
  1 - output([T_FUN_COUNT(*)]), filter(nil), rowset=256
      access(nil), partitions(p0)
      is_index_back=false, is_global_index=false, 
      range_key([t1.__pk_increment]), range(MIN ; MAX)always true
select 1 from t1 having case when 1 > 1 then count(*) 
                        else 3 end > 1;
+---+
| 1 |
+---+
| 1 |
+---+


== case 11: with scala group by
EXPLAIN select /*+no_rewrite*/ case when 1 then 2 else count(*) end from t1 
                        where c1 > 0 and case when 1 >= 1 then c1 else c2 end > 0
                        having case when 1 > 1 then count(*) else 3 end > 1;
Query Plan
=================================================
|ID|OPERATOR         |NAME|EST.ROWS|EST.TIME(us)|
-------------------------------------------------
|0 |SCALAR GROUP BY  |    |1       |5           |
|1 |??TABLE FULL SCAN|t1  |1       |5           |
=================================================
Outputs & filters:
-------------------------------------
  0 - output([CASE WHEN 1 THEN 2 ELSE T_FUN_COUNT_SUM(T_FUN_COUNT(*)) END]), filter([CASE WHEN 1 > 1 THEN T_FUN_COUNT_SUM(T_FUN_COUNT(*)) ELSE 3 END > 1]), rowset=256
      group(nil), agg_func([T_FUN_COUNT_SUM(T_FUN_COUNT(*))])
  1 - output([T_FUN_COUNT(*)]), filter([t1.c1 > 0], [CASE WHEN 1 >= 1 THEN t1.c1 ELSE t1.c2 END > 0]), rowset=256
      access([t1.c1], [t1.c2]), partitions(p0)
      is_index_back=false, is_global_index=false, filter_before_indexback[false,false], 
      range_key([t1.__pk_increment]), range(MIN ; MAX)always true
select /*+no_rewrite*/ case when 1 then 2 else count(*) end from t1 
                        where c1 > 0 and case when 1 >= 1 then c1 else c2 end > 0
                        having case when 1 > 1 then count(*) else 3 end > 1;
+--------------------------------------+
| case when 1 then 2 else count(*) end |
+--------------------------------------+
|                                    2 |
+--------------------------------------+
EXPLAIN select case when 1 then 2 else count(*) end from t1 
                        where c1 > 0 and case when 1 >= 1 then c1 else c2 end > 0
                        having case when 1 > 1 then count(*) else 3 end > 1;
Query Plan
=================================================
|ID|OPERATOR         |NAME|EST.ROWS|EST.TIME(us)|
-------------------------------------------------
|0 |SCALAR GROUP BY  |    |1       |5           |
|1 |??TABLE FULL SCAN|t1  |1       |5           |
=================================================
Outputs & filters:
-------------------------------------
  0 - output([CASE WHEN 1 THEN 2 ELSE T_FUN_COUNT_SUM(T_FUN_COUNT(*)) END]), filter([CASE WHEN 1 > 1 THEN T_FUN_COUNT_SUM(T_FUN_COUNT(*)) ELSE 3 END > 1]), rowset=256
      group(nil), agg_func([T_FUN_COUNT_SUM(T_FUN_COUNT(*))])
  1 - output([T_FUN_COUNT(*)]), filter([t1.c1 > 0]), rowset=256
      access([t1.c1]), partitions(p0)
      is_index_back=false, is_global_index=false, filter_before_indexback[false], 
      range_key([t1.__pk_increment]), range(MIN ; MAX)always true
select case when 1 then 2 else count(*) end from t1 
                        where c1 > 0 and case when 1 >= 1 then c1 else c2 end > 0
                        having case when 1 > 1 then count(*) else 3 end > 1;
+--------------------------------------+
| case when 1 then 2 else count(*) end |
+--------------------------------------+
|                                    2 |
+--------------------------------------+


== case 12: with scala group by
EXPLAIN select /*+no_rewrite*/ 1 from t1 having case when 1 > 1 then count(*) 
                                             when 2 > 1 then 2
                                             else 3 end > 1;
Query Plan
=================================================
|ID|OPERATOR         |NAME|EST.ROWS|EST.TIME(us)|
-------------------------------------------------
|0 |SCALAR GROUP BY  |    |1       |4           |
|1 |??TABLE FULL SCAN|t1  |5       |4           |
=================================================
Outputs & filters:
-------------------------------------
  0 - output([1]), filter([CASE WHEN 1 > 1 THEN T_FUN_COUNT_SUM(T_FUN_COUNT(*)) WHEN 2 > 1 THEN 2 ELSE 3 END > 1]), rowset=256
      group(nil), agg_func([T_FUN_COUNT_SUM(T_FUN_COUNT(*))])
  1 - output([T_FUN_COUNT(*)]), filter(nil), rowset=256
      access(nil), partitions(p0)
      is_index_back=false, is_global_index=false, 
      range_key([t1.__pk_increment]), range(MIN ; MAX)always true
select /*+no_rewrite*/ 1 from t1 having case when 1 > 1 then count(*) 
                                             when 2 > 1 then 2
                                             else 3 end > 1;
+---+
| 1 |
+---+
| 1 |
+---+
EXPLAIN select 1 from t1 having case when 1 > 1 then count(*) 
                                             when 2 > 1 then 2
                                             else 3 end > 1;
Query Plan
=================================================
|ID|OPERATOR         |NAME|EST.ROWS|EST.TIME(us)|
-------------------------------------------------
|0 |SCALAR GROUP BY  |    |1       |4           |
|1 |??TABLE FULL SCAN|t1  |5       |4           |
=================================================
Outputs & filters:
-------------------------------------
  0 - output([1]), filter([CASE WHEN 1 > 1 THEN T_FUN_COUNT_SUM(T_FUN_COUNT(*)) WHEN 2 > 1 THEN 2 ELSE 3 END > 1]), rowset=256
      group(nil), agg_func([T_FUN_COUNT_SUM(T_FUN_COUNT(*))])
  1 - output([T_FUN_COUNT(*)]), filter(nil), rowset=256
      access(nil), partitions(p0)
      is_index_back=false, is_global_index=false, 
      range_key([t1.__pk_increment]), range(MIN ; MAX)always true
select 1 from t1 having case when 1 > 1 then count(*) 
                                             when 2 > 1 then 2
                                             else 3 end > 1;
+---+
| 1 |
+---+
| 1 |
+---+


== case 13: with shared expr 
EXPLAIN select /*+no_rewrite*/ case when 2 > 1 then c1 else c2 end from t1 where 
                                    case when 2 > 1 then c1 
                                         else c2 
                                    end > 1;
Query Plan
===============================================
|ID|OPERATOR       |NAME|EST.ROWS|EST.TIME(us)|
-----------------------------------------------
|0 |TABLE FULL SCAN|t1  |2       |5           |
===============================================
Outputs & filters:
-------------------------------------
  0 - output([CASE WHEN 2 > 1 THEN t1.c1 ELSE t1.c2 END]), filter([CASE WHEN 2 > 1 THEN t1.c1 ELSE t1.c2 END > 1]), rowset=256
      access([t1.c1], [t1.c2]), partitions(p0)
      is_index_back=false, is_global_index=false, filter_before_indexback[false], 
      range_key([t1.__pk_increment]), range(MIN ; MAX)always true
select /*+no_rewrite*/ case when 2 > 1 then c1 else c2 end from t1 where 
                                    case when 2 > 1 then c1 
                                         else c2 
                                    end > 1;
+-------------------------------------+
| case when 2 > 1 then c1 else c2 end |
+-------------------------------------+
|                                   2 |
|                                   3 |
|                                   4 |
|                                   5 |
+-------------------------------------+
EXPLAIN select case when 2 > 1 then c1 else c2 end from t1 where 
                                    case when 2 > 1 then c1 
                                         else c2 
                                    end > 1;
Query Plan
===============================================
|ID|OPERATOR       |NAME|EST.ROWS|EST.TIME(us)|
-----------------------------------------------
|0 |TABLE FULL SCAN|t1  |1       |5           |
===============================================
Outputs & filters:
-------------------------------------
  0 - output([t1.c1]), filter([t1.c1 > 1]), rowset=256
      access([t1.c1]), partitions(p0)
      is_index_back=false, is_global_index=false, filter_before_indexback[false], 
      range_key([t1.__pk_increment]), range(MIN ; MAX)always true
select case when 2 > 1 then c1 else c2 end from t1 where 
                                    case when 2 > 1 then c1 
                                         else c2 
                                    end > 1;
+-------------------------------------+
| case when 2 > 1 then c1 else c2 end |
+-------------------------------------+
|                                   2 |
|                                   3 |
|                                   4 |
|                                   5 |
+-------------------------------------+


== case 14: with subquery 
EXPLAIN select /*+no_rewrite*/1 from t1 where c1 > 0 and c2 in (
    select c2 from t2 where 
    case when 0 > 1 then c1
         when 1 > 2 then c2
         else c3
    end > 0
) and c3 > 0;
Query Plan
=================================================
|ID|OPERATOR         |NAME|EST.ROWS|EST.TIME(us)|
-------------------------------------------------
|0 |SUBPLAN FILTER   |    |1       |8           |
|1 |??TABLE FULL SCAN|t1  |1       |5           |
|2 |??TABLE FULL SCAN|t2  |1       |4           |
=================================================
Outputs & filters:
-------------------------------------
  0 - output([1]), filter([t1.c2 = ANY(subquery(1))]), rowset=256
      exec_params_(nil), onetime_exprs_(nil), init_plan_idxs_([1]), use_batch=false
  1 - output([t1.c2]), filter([t1.c1 > 0], [t1.c3 > 0]), rowset=256
      access([t1.c1], [t1.c2], [t1.c3]), partitions(p0)
      is_index_back=false, is_global_index=false, filter_before_indexback[false,false], 
      range_key([t1.__pk_increment]), range(MIN ; MAX)always true
  2 - output([t2.c2]), filter([t2.c3 > 0]), rowset=256
      access([t2.c2], [t2.c3]), partitions(p0)
      is_index_back=false, is_global_index=false, filter_before_indexback[false], 
      range_key([t2.__pk_increment]), range(MIN ; MAX)always true
select /*+no_rewrite*/1 from t1 where c1 > 0 and c2 in (
    select c2 from t2 where 
    case when 0 > 1 then c1
         when 1 > 2 then c2
         else c3
    end > 0
) and c3 > 0;
+---+
| 1 |
+---+
+---+

EXPLAIN select 1 from t1 where c1 > 0 and c2 in (
    select c2 from t2 where 
    case when 0 > 1 then c1
         when 1 > 2 then c2
         else c3
    end > 0
) and c3 > 0;
Query Plan
====================================================
|ID|OPERATOR           |NAME |EST.ROWS|EST.TIME(us)|
----------------------------------------------------
|0 |HASH SEMI JOIN     |     |1       |8           |
|1 |??TABLE FULL SCAN  |t1   |1       |5           |
|2 |??SUBPLAN SCAN     |VIEW1|1       |4           |
|3 |  ??TABLE FULL SCAN|t2   |1       |4           |
====================================================
Outputs & filters:
-------------------------------------
  0 - output([1]), filter(nil), rowset=256
      equal_conds([t1.c2 = VIEW1.c2]), other_conds(nil)
  1 - output([t1.c2]), filter([t1.c1 > 0], [t1.c3 > 0]), rowset=256
      access([t1.c1], [t1.c2], [t1.c3]), partitions(p0)
      is_index_back=false, is_global_index=false, filter_before_indexback[false,false], 
      range_key([t1.__pk_increment]), range(MIN ; MAX)always true
  2 - output([VIEW1.c2]), filter(nil), rowset=256
      access([VIEW1.c2])
  3 - output([t2.c2]), filter([t2.c3 > 0]), rowset=256
      access([t2.c2], [t2.c3]), partitions(p0)
      is_index_back=false, is_global_index=false, filter_before_indexback[false], 
      range_key([t2.__pk_increment]), range(MIN ; MAX)always true
select 1 from t1 where c1 > 0 and c2 in (
    select c2 from t2 where 
    case when 0 > 1 then c1
         when 1 > 2 then c2
         else c3
    end > 0
) and c3 > 0;
+---+
| 1 |
+---+
+---+


== case 15: with subquery with scala group by
EXPLAIN select /*+no_rewrite*/1 from t1 where c1 > 0 and c2 in (
    select c2 from t2 having 
    case when 0 > 1 then count(*) 
         when 1 > 2 then 2
         else 2 
    end > 0
) and c3 > 0;
Query Plan
===================================================
|ID|OPERATOR           |NAME|EST.ROWS|EST.TIME(us)|
---------------------------------------------------
|0 |SUBPLAN FILTER     |    |1       |8           |
|1 |??TABLE FULL SCAN  |t1  |1       |5           |
|2 |??SCALAR GROUP BY  |    |1       |4           |
|3 |  ??TABLE FULL SCAN|t2  |1       |4           |
===================================================
Outputs & filters:
-------------------------------------
  0 - output([1]), filter([t1.c2 = ANY(subquery(1))]), rowset=256
      exec_params_(nil), onetime_exprs_(nil), init_plan_idxs_([1]), use_batch=false
  1 - output([t1.c2]), filter([t1.c1 > 0], [t1.c3 > 0]), rowset=256
      access([t1.c1], [t1.c2], [t1.c3]), partitions(p0)
      is_index_back=false, is_global_index=false, filter_before_indexback[false,false], 
      range_key([t1.__pk_increment]), range(MIN ; MAX)always true
  2 - output([t2.c2]), filter([CASE WHEN 0 > 1 THEN T_FUN_COUNT_SUM(T_FUN_COUNT(*)) WHEN 1 > 2 THEN 2 ELSE 2 END > 0]), rowset=256
      group(nil), agg_func([T_FUN_COUNT_SUM(T_FUN_COUNT(*))])
  3 - output([t2.c2], [T_FUN_COUNT(*)]), filter(nil), rowset=256
      access([t2.c2]), partitions(p0)
      is_index_back=false, is_global_index=false, 
      range_key([t2.__pk_increment]), range(MIN ; MAX)always true
select /*+no_rewrite*/1 from t1 where c1 > 0 and c2 in (
    select c2 from t2 having 
    case when 0 > 1 then count(*) 
         when 1 > 2 then 2
         else 2 
    end > 0
) and c3 > 0;
+---+
| 1 |
+---+
+---+

EXPLAIN select 1 from t1 where c1 > 0 and c2 in (
    select c2 from t2 having 
    case when 0 > 1 then count(*) 
         when 1 > 2 then 2
         else 2 
    end > 0
) and c3 > 0;
Query Plan
======================================================
|ID|OPERATOR             |NAME |EST.ROWS|EST.TIME(us)|
------------------------------------------------------
|0 |NESTED-LOOP JOIN     |     |1       |5           |
|1 |??SUBPLAN SCAN       |VIEW1|1       |4           |
|2 |? ??SCALAR GROUP BY  |     |1       |4           |
|3 |?   ??TABLE FULL SCAN|t2   |1       |4           |
|4 |??TABLE FULL SCAN    |t1   |1       |5           |
======================================================
Outputs & filters:
-------------------------------------
  0 - output([1]), filter(nil), rowset=256
      conds([t1.c2 = VIEW1.c2]), nl_params_(nil), use_batch=false
  1 - output([VIEW1.c2]), filter(nil), rowset=256
      access([VIEW1.c2])
  2 - output([t2.c2]), filter([CASE WHEN 0 > 1 THEN T_FUN_COUNT_SUM(T_FUN_COUNT(*)) WHEN 1 > 2 THEN 2 ELSE 2 END > 0]), rowset=256
      group(nil), agg_func([T_FUN_COUNT_SUM(T_FUN_COUNT(*))])
  3 - output([t2.c2], [T_FUN_COUNT(*)]), filter(nil), rowset=256
      access([t2.c2]), partitions(p0)
      is_index_back=false, is_global_index=false, 
      range_key([t2.__pk_increment]), range(MIN ; MAX)always true
  4 - output([t1.c2]), filter([t1.c1 > 0], [t1.c3 > 0]), rowset=256
      access([t1.c1], [t1.c2], [t1.c3]), partitions(p0)
      is_index_back=false, is_global_index=false, filter_before_indexback[false,false], 
      range_key([t1.__pk_increment]), range(MIN ; MAX)always true
select 1 from t1 where c1 > 0 and c2 in (
    select c2 from t2 having 
    case when 0 > 1 then count(*) 
         when 1 > 2 then 2
         else 2 
    end > 0
) and c3 > 0;
+---+
| 1 |
+---+
+---+


== case 16: with scalar static const expr 
EXPLAIN select /*+no_rewrite*/ 1 from t1 where case when 1 > 2 then c1
                            when 2 in (1,2,3) then c2
                            when c1 > 2 then c3 
                            else c4 
                        end > 1;
Query Plan
===============================================
|ID|OPERATOR       |NAME|EST.ROWS|EST.TIME(us)|
-----------------------------------------------
|0 |TABLE FULL SCAN|t1  |2       |5           |
===============================================
Outputs & filters:
-------------------------------------
  0 - output([1]), filter([CASE WHEN 1 > 2 THEN t1.c1 WHEN 2 IN (1, 2, 3) THEN t1.c2 WHEN t1.c1 > 2 THEN t1.c3 ELSE t1.c4 END > 1]), rowset=256
      access([t1.c1], [t1.c2], [t1.c3], [t1.c4]), partitions(p0)
      is_index_back=false, is_global_index=false, filter_before_indexback[false], 
      range_key([t1.__pk_increment]), range(MIN ; MAX)always true
select /*+no_rewrite*/ 1 from t1 where case when 1 > 2 then c1
                            when 2 in (1,2,3) then c2
                            when c1 > 2 then c3 
                            else c4 
                        end > 1;
+---+
| 1 |
+---+
| 1 |
| 1 |
| 1 |
| 1 |
+---+
EXPLAIN select 1 from t1 where case when 1 > 2 then c1
                            when 2 in (1,2,3) then c2
                            when c1 > 2 then c3 
                            else c4 
                        end > 1;
Query Plan
===============================================
|ID|OPERATOR       |NAME|EST.ROWS|EST.TIME(us)|
-----------------------------------------------
|0 |TABLE FULL SCAN|t1  |1       |5           |
===============================================
Outputs & filters:
-------------------------------------
  0 - output([1]), filter([t1.c2 > 1]), rowset=256
      access([t1.c2]), partitions(p0)
      is_index_back=false, is_global_index=false, filter_before_indexback[false], 
      range_key([t1.__pk_increment]), range(MIN ; MAX)always true
select 1 from t1 where case when 1 > 2 then c1
                            when 2 in (1,2,3) then c2
                            when c1 > 2 then c3 
                            else c4 
                        end > 1;
+---+
| 1 |
+---+
| 1 |
| 1 |
| 1 |
| 1 |
+---+


== case 17: debug  
EXPLAIN select /*+no_rewrite*/ 1 from t1 where case when 1 > 2 then c1
                            when 2 > 3 then c2
                            when c1 > 2 then c3 
                            when c2 > 2 then c4
                            when c3 > 2 then c4
                            else c4 
                        end > 1;
Query Plan
===============================================
|ID|OPERATOR       |NAME|EST.ROWS|EST.TIME(us)|
-----------------------------------------------
|0 |TABLE FULL SCAN|t1  |2       |5           |
===============================================
Outputs & filters:
-------------------------------------
  0 - output([1]), filter([CASE WHEN 1 > 2 THEN t1.c1 WHEN 2 > 3 THEN t1.c2 WHEN t1.c1 > 2 THEN t1.c3 WHEN t1.c2 > 2 THEN t1.c4 WHEN t1.c3 > 2 THEN t1.c4 
      ELSE t1.c4 END > 1]), rowset=256
      access([t1.c1], [t1.c2], [t1.c3], [t1.c4]), partitions(p0)
      is_index_back=false, is_global_index=false, filter_before_indexback[false], 
      range_key([t1.__pk_increment]), range(MIN ; MAX)always true
select /*+no_rewrite*/ 1 from t1 where case when 1 > 2 then c1
                            when 2 > 3 then c2
                            when c1 > 2 then c3 
                            when c2 > 2 then c4
                            when c3 > 2 then c4
                            else c4 
                        end > 1;
+---+
| 1 |
+---+
| 1 |
| 1 |
| 1 |
| 1 |
+---+
EXPLAIN select 1 from t1 where case when 1 > 2 then c1
                            when 2 > 3 then c2
                            when c1 > 2 then c3 
                            when c2 > 2 then c4
                            when c3 > 2 then c4
                            else c4 
                        end > 1;
Query Plan
===============================================
|ID|OPERATOR       |NAME|EST.ROWS|EST.TIME(us)|
-----------------------------------------------
|0 |TABLE FULL SCAN|t1  |2       |5           |
===============================================
Outputs & filters:
-------------------------------------
  0 - output([1]), filter([CASE WHEN t1.c1 > 2 THEN t1.c3 WHEN t1.c2 > 2 THEN t1.c4 WHEN t1.c3 > 2 THEN t1.c4 ELSE t1.c4 END > 1]), rowset=256
      access([t1.c1], [t1.c2], [t1.c3], [t1.c4]), partitions(p0)
      is_index_back=false, is_global_index=false, filter_before_indexback[false], 
      range_key([t1.__pk_increment]), range(MIN ; MAX)always true
select 1 from t1 where case when 1 > 2 then c1
                            when 2 > 3 then c2
                            when c1 > 2 then c3 
                            when c2 > 2 then c4
                            when c3 > 2 then c4
                            else c4 
                        end > 1;
+---+
| 1 |
+---+
| 1 |
| 1 |
| 1 |
| 1 |
+---+

**************************** convert then exprs test **************************** 

== case 1
EXPLAIN select /*+no_rewrite*/* from t1 where case when c1 > 0 then 0 else 1 end > 0;
Query Plan
===============================================
|ID|OPERATOR       |NAME|EST.ROWS|EST.TIME(us)|
-----------------------------------------------
|0 |TABLE FULL SCAN|t1  |2       |5           |
===============================================
Outputs & filters:
-------------------------------------
  0 - output([t1.c1], [t1.c2], [t1.c3], [t1.c4], [t1.c5], [t1.c6]), filter([CASE WHEN t1.c1 > 0 THEN 0 ELSE 1 END > 0]), rowset=256
      access([t1.c1], [t1.c2], [t1.c3], [t1.c4], [t1.c5], [t1.c6]), partitions(p0)
      is_index_back=false, is_global_index=false, filter_before_indexback[false], 
      range_key([t1.__pk_increment]), range(MIN ; MAX)always true
select /*+no_rewrite*/* from t1 where case when c1 > 0 then 0 else 1 end > 0;
+------+------+------+------+------+------+
| c1   | c2   | c3   | c4   | c5   | c6   |
+------+------+------+------+------+------+
+------+------+------+------+------+------+
EXPLAIN select * from t1 where case when c1 > 0 then 0 else 1 end > 0;
Query Plan
===============================================
|ID|OPERATOR       |NAME|EST.ROWS|EST.TIME(us)|
-----------------------------------------------
|0 |TABLE FULL SCAN|t1  |3       |5           |
===============================================
Outputs & filters:
-------------------------------------
  0 - output([t1.c1], [t1.c2], [t1.c3], [t1.c4], [t1.c5], [t1.c6]), filter([lnnvl(cast(t1.c1 > 0, TINYINT(-1, 0)))]), rowset=256
      access([t1.c1], [t1.c2], [t1.c3], [t1.c4], [t1.c5], [t1.c6]), partitions(p0)
      is_index_back=false, is_global_index=false, filter_before_indexback[false], 
      range_key([t1.__pk_increment]), range(MIN ; MAX)always true
select * from t1 where case when c1 > 0 then 0 else 1 end > 0;
+------+------+------+------+------+------+
| c1   | c2   | c3   | c4   | c5   | c6   |
+------+------+------+------+------+------+
+------+------+------+------+------+------+


== case 2
EXPLAIN select /*+no_rewrite*/* from t1 where case when c1 > 0 then 0 else 1 end > 1;
Query Plan
===============================================
|ID|OPERATOR       |NAME|EST.ROWS|EST.TIME(us)|
-----------------------------------------------
|0 |TABLE FULL SCAN|t1  |2       |5           |
===============================================
Outputs & filters:
-------------------------------------
  0 - output([t1.c1], [t1.c2], [t1.c3], [t1.c4], [t1.c5], [t1.c6]), filter([CASE WHEN t1.c1 > 0 THEN 0 ELSE 1 END > 1]), rowset=256
      access([t1.c1], [t1.c2], [t1.c3], [t1.c4], [t1.c5], [t1.c6]), partitions(p0)
      is_index_back=false, is_global_index=false, filter_before_indexback[false], 
      range_key([t1.__pk_increment]), range(MIN ; MAX)always true
select /*+no_rewrite*/* from t1 where case when c1 > 0 then 0 else 1 end > 1;
+------+------+------+------+------+------+
| c1   | c2   | c3   | c4   | c5   | c6   |
+------+------+------+------+------+------+
+------+------+------+------+------+------+
EXPLAIN select * from t1 where case when c1 > 0 then 0 else 1 end > 1;
Query Plan
===============================================
|ID|OPERATOR       |NAME|EST.ROWS|EST.TIME(us)|
-----------------------------------------------
|0 |TABLE FULL SCAN|t1  |5       |5           |
===============================================
Outputs & filters:
-------------------------------------
  0 - output([t1.c1], [t1.c2], [t1.c3], [t1.c4], [t1.c5], [t1.c6]), filter(nil), startup_filter([0]), rowset=256
      access([t1.c1], [t1.c2], [t1.c3], [t1.c4], [t1.c5], [t1.c6]), partitions(p0)
      is_index_back=false, is_global_index=false, 
      range_key([t1.__pk_increment]), range(MIN ; MAX)always true
select * from t1 where case when c1 > 0 then 0 else 1 end > 1;
+------+------+------+------+------+------+
| c1   | c2   | c3   | c4   | c5   | c6   |
+------+------+------+------+------+------+
+------+------+------+------+------+------+


== case 3
EXPLAIN select /*+no_rewrite*/ * from t1 where case when c1 > 0 then 0 
							when c2 > 0 then 0 
							else 1 
					   end > 1;
Query Plan
===============================================
|ID|OPERATOR       |NAME|EST.ROWS|EST.TIME(us)|
-----------------------------------------------
|0 |TABLE FULL SCAN|t1  |2       |5           |
===============================================
Outputs & filters:
-------------------------------------
  0 - output([t1.c1], [t1.c2], [t1.c3], [t1.c4], [t1.c5], [t1.c6]), filter([CASE WHEN t1.c1 > 0 THEN 0 WHEN t1.c2 > 0 THEN 0 ELSE 1 END > 1]), rowset=256
      access([t1.c1], [t1.c2], [t1.c3], [t1.c4], [t1.c5], [t1.c6]), partitions(p0)
      is_index_back=false, is_global_index=false, filter_before_indexback[false], 
      range_key([t1.__pk_increment]), range(MIN ; MAX)always true
select /*+no_rewrite*/ * from t1 where case when c1 > 0 then 0 
							when c2 > 0 then 0 
							else 1 
					   end > 1;
+------+------+------+------+------+------+
| c1   | c2   | c3   | c4   | c5   | c6   |
+------+------+------+------+------+------+
+------+------+------+------+------+------+
EXPLAIN select * from t1 where case when c1 > 0 then 0 
							when c2 > 0 then 0 
							else 1 
					   end > 1;
Query Plan
===============================================
|ID|OPERATOR       |NAME|EST.ROWS|EST.TIME(us)|
-----------------------------------------------
|0 |TABLE FULL SCAN|t1  |5       |5           |
===============================================
Outputs & filters:
-------------------------------------
  0 - output([t1.c1], [t1.c2], [t1.c3], [t1.c4], [t1.c5], [t1.c6]), filter(nil), startup_filter([0]), rowset=256
      access([t1.c1], [t1.c2], [t1.c3], [t1.c4], [t1.c5], [t1.c6]), partitions(p0)
      is_index_back=false, is_global_index=false, 
      range_key([t1.__pk_increment]), range(MIN ; MAX)always true
select * from t1 where case when c1 > 0 then 0 
							when c2 > 0 then 0 
							else 1 
					   end > 1;
+------+------+------+------+------+------+
| c1   | c2   | c3   | c4   | c5   | c6   |
+------+------+------+------+------+------+
+------+------+------+------+------+------+


== case 4
EXPLAIN select /*+no_rewrite*/ * from t1 where c1 > 0 and c2 > 0 and 
                            case when c1 > 0 then 1 
                                 when c2 > 0 then 2
                                 else 0 
                            end > 1;
Query Plan
===============================================
|ID|OPERATOR       |NAME|EST.ROWS|EST.TIME(us)|
-----------------------------------------------
|0 |TABLE FULL SCAN|t1  |1       |5           |
===============================================
Outputs & filters:
-------------------------------------
  0 - output([t1.c1], [t1.c2], [t1.c3], [t1.c4], [t1.c5], [t1.c6]), filter([t1.c1 > 0], [t1.c2 > 0], [CASE WHEN t1.c1 > 0 THEN 1 WHEN t1.c2 > 0 THEN 2 ELSE 
      0 END > 1]), rowset=256
      access([t1.c1], [t1.c2], [t1.c3], [t1.c4], [t1.c5], [t1.c6]), partitions(p0)
      is_index_back=false, is_global_index=false, filter_before_indexback[false,false,false], 
      range_key([t1.__pk_increment]), range(MIN ; MAX)always true
select /*+no_rewrite*/ * from t1 where c1 > 0 and c2 > 0 and 
                            case when c1 > 0 then 1 
                                 when c2 > 0 then 2
                                 else 0 
                            end > 1;
+------+------+------+------+------+------+
| c1   | c2   | c3   | c4   | c5   | c6   |
+------+------+------+------+------+------+
+------+------+------+------+------+------+
EXPLAIN select * from t1 where c1 > 0 and c2 > 0 and 
                            case when c1 > 0 then 1 
                                 when c2 > 0 then 2
                                 else 0 
                            end > 1;
Query Plan
===============================================
|ID|OPERATOR       |NAME|EST.ROWS|EST.TIME(us)|
-----------------------------------------------
|0 |TABLE FULL SCAN|t1  |1       |5           |
===============================================
Outputs & filters:
-------------------------------------
  0 - output([t1.c1], [t1.c2], [t1.c3], [t1.c4], [t1.c5], [t1.c6]), filter([t1.c1 > 0], [t1.c2 > 0], [lnnvl(cast(t1.c1 > 0, TINYINT(-1, 0)))]), rowset=256
      access([t1.c1], [t1.c2], [t1.c3], [t1.c4], [t1.c5], [t1.c6]), partitions(p0)
      is_index_back=false, is_global_index=false, filter_before_indexback[false,false,false], 
      range_key([t1.__pk_increment]), range(MIN ; MAX)always true
select * from t1 where c1 > 0 and c2 > 0 and 
                            case when c1 > 0 then 1 
                                 when c2 > 0 then 2
                                 else 0 
                            end > 1;
+------+------+------+------+------+------+
| c1   | c2   | c3   | c4   | c5   | c6   |
+------+------+------+------+------+------+
+------+------+------+------+------+------+


== case 5
EXPLAIN select /*+no_rewrite*/ * from t1 where c1 > 0 or (c2 > 0 and 
                                case when c1 > 0 then 1 
                                    when c2 > 0 then 2
                                    else 0 
                                end > 1);
Query Plan
===============================================
|ID|OPERATOR       |NAME|EST.ROWS|EST.TIME(us)|
-----------------------------------------------
|0 |TABLE FULL SCAN|t1  |1       |5           |
===============================================
Outputs & filters:
-------------------------------------
  0 - output([t1.c1], [t1.c2], [t1.c3], [t1.c4], [t1.c5], [t1.c6]), filter([t1.c1 > 0 OR t1.c2 > 0 AND CASE WHEN t1.c1 > 0 THEN 1 WHEN t1.c2 > 0 THEN 2 
      ELSE 0 END > 1]), rowset=256
      access([t1.c1], [t1.c2], [t1.c3], [t1.c4], [t1.c5], [t1.c6]), partitions(p0)
      is_index_back=false, is_global_index=false, filter_before_indexback[false], 
      range_key([t1.__pk_increment]), range(MIN ; MAX)always true
select /*+no_rewrite*/ * from t1 where c1 > 0 or (c2 > 0 and 
                                case when c1 > 0 then 1 
                                    when c2 > 0 then 2
                                    else 0 
                                end > 1);
+------+------+------+------+------+------+
| c1   | c2   | c3   | c4   | c5   | c6   |
+------+------+------+------+------+------+
|    1 |    1 |    1 |    1 |    1 |    1 |
|    2 |    2 |    2 |    2 |    2 |    2 |
|    3 |    3 |    3 |    3 |    3 |    3 |
|    4 |    4 |    4 |    4 |    4 |    4 |
|    5 |    5 |    5 |    5 |    5 |    5 |
+------+------+------+------+------+------+
EXPLAIN select * from t1 where c1 > 0 or (c2 > 0 and 
                                case when c1 > 0 then 1 
                                    when c2 > 0 then 2
                                    else 0 
                                end > 1);
Query Plan
===============================================
|ID|OPERATOR       |NAME|EST.ROWS|EST.TIME(us)|
-----------------------------------------------
|0 |TABLE FULL SCAN|t1  |1       |5           |
===============================================
Outputs & filters:
-------------------------------------
  0 - output([t1.c1], [t1.c2], [t1.c3], [t1.c4], [t1.c5], [t1.c6]), filter([t1.c1 > 0 OR t1.c2 > 0 AND lnnvl(cast(t1.c1 > 0, TINYINT(-1, 0))) AND t1.c2 
      > 0]), rowset=256
      access([t1.c1], [t1.c2], [t1.c3], [t1.c4], [t1.c5], [t1.c6]), partitions(p0)
      is_index_back=false, is_global_index=false, filter_before_indexback[false], 
      range_key([t1.__pk_increment]), range(MIN ; MAX)always true
select * from t1 where c1 > 0 or (c2 > 0 and 
                                case when c1 > 0 then 1 
                                    when c2 > 0 then 2
                                    else 0 
                                end > 1);
+------+------+------+------+------+------+
| c1   | c2   | c3   | c4   | c5   | c6   |
+------+------+------+------+------+------+
|    1 |    1 |    1 |    1 |    1 |    1 |
|    2 |    2 |    2 |    2 |    2 |    2 |
|    3 |    3 |    3 |    3 |    3 |    3 |
|    4 |    4 |    4 |    4 |    4 |    4 |
|    5 |    5 |    5 |    5 |    5 |    5 |
+------+------+------+------+------+------+


== case 6: test with scala group by
EXPLAIN select /*+no_rewrite*/ case when c1 > 0 then 1 else count(*) end > 2 from t1;
Query Plan
=================================================
|ID|OPERATOR         |NAME|EST.ROWS|EST.TIME(us)|
-------------------------------------------------
|0 |SCALAR GROUP BY  |    |1       |5           |
|1 |??TABLE FULL SCAN|t1  |5       |4           |
=================================================
Outputs & filters:
-------------------------------------
  0 - output([CASE WHEN t1.c1 > 0 THEN 1 ELSE T_FUN_COUNT_SUM(T_FUN_COUNT(*)) END > 2]), filter(nil), rowset=256
      group(nil), agg_func([T_FUN_COUNT_SUM(T_FUN_COUNT(*))])
  1 - output([t1.c1], [T_FUN_COUNT(*)]), filter(nil), rowset=256
      access([t1.c1]), partitions(p0)
      is_index_back=false, is_global_index=false, 
      range_key([t1.__pk_increment]), range(MIN ; MAX)always true
select /*+no_rewrite*/ case when c1 > 0 then 1 else count(*) end > 2 from t1;
+-----------------------------------------------+
| case when c1 > 0 then 1 else count(*) end > 2 |
+-----------------------------------------------+
|                                             0 |
+-----------------------------------------------+
EXPLAIN select case when c1 > 0 then 1 else count(*) end > 2 from t1;
Query Plan
=================================================
|ID|OPERATOR         |NAME|EST.ROWS|EST.TIME(us)|
-------------------------------------------------
|0 |SCALAR GROUP BY  |    |1       |5           |
|1 |??TABLE FULL SCAN|t1  |5       |4           |
=================================================
Outputs & filters:
-------------------------------------
  0 - output([CASE WHEN t1.c1 > 0 THEN 1 ELSE T_FUN_COUNT_SUM(T_FUN_COUNT(*)) END > 2]), filter(nil), rowset=256
      group(nil), agg_func([T_FUN_COUNT_SUM(T_FUN_COUNT(*))])
  1 - output([t1.c1], [T_FUN_COUNT(*)]), filter(nil), rowset=256
      access([t1.c1]), partitions(p0)
      is_index_back=false, is_global_index=false, 
      range_key([t1.__pk_increment]), range(MIN ; MAX)always true
select case when c1 > 0 then 1 else count(*) end > 2 from t1;
+-----------------------------------------------+
| case when c1 > 0 then 1 else count(*) end > 2 |
+-----------------------------------------------+
|                                             0 |
+-----------------------------------------------+


== case 7: test with scala group by
EXPLAIN select /*+no_rewrite*/ c2 > 0 and case when c1 > 0 then 1 else count(*) end > 2 from t1;
Query Plan
=================================================
|ID|OPERATOR         |NAME|EST.ROWS|EST.TIME(us)|
-------------------------------------------------
|0 |SCALAR GROUP BY  |    |1       |5           |
|1 |??TABLE FULL SCAN|t1  |5       |5           |
=================================================
Outputs & filters:
-------------------------------------
  0 - output([t1.c2 > 0 AND CASE WHEN t1.c1 > 0 THEN 1 ELSE T_FUN_COUNT_SUM(T_FUN_COUNT(*)) END > 2]), filter(nil), rowset=256
      group(nil), agg_func([T_FUN_COUNT_SUM(T_FUN_COUNT(*))])
  1 - output([t1.c2], [t1.c1], [T_FUN_COUNT(*)]), filter(nil), rowset=256
      access([t1.c2], [t1.c1]), partitions(p0)
      is_index_back=false, is_global_index=false, 
      range_key([t1.__pk_increment]), range(MIN ; MAX)always true
select /*+no_rewrite*/ c2 > 0 and case when c1 > 0 then 1 else count(*) end > 2 from t1;
+----------------------------------------------------------+
| c2 > 0 and case when c1 > 0 then 1 else count(*) end > 2 |
+----------------------------------------------------------+
|                                                        0 |
+----------------------------------------------------------+
EXPLAIN select c2 > 0 and case when c1 > 0 then 1 else count(*) end > 2 from t1;
Query Plan
=================================================
|ID|OPERATOR         |NAME|EST.ROWS|EST.TIME(us)|
-------------------------------------------------
|0 |SCALAR GROUP BY  |    |1       |5           |
|1 |??TABLE FULL SCAN|t1  |5       |5           |
=================================================
Outputs & filters:
-------------------------------------
  0 - output([t1.c2 > 0 AND CASE WHEN t1.c1 > 0 THEN 1 ELSE T_FUN_COUNT_SUM(T_FUN_COUNT(*)) END > 2]), filter(nil), rowset=256
      group(nil), agg_func([T_FUN_COUNT_SUM(T_FUN_COUNT(*))])
  1 - output([t1.c2], [t1.c1], [T_FUN_COUNT(*)]), filter(nil), rowset=256
      access([t1.c2], [t1.c1]), partitions(p0)
      is_index_back=false, is_global_index=false, 
      range_key([t1.__pk_increment]), range(MIN ; MAX)always true
select c2 > 0 and case when c1 > 0 then 1 else count(*) end > 2 from t1;
+----------------------------------------------------------+
| c2 > 0 and case when c1 > 0 then 1 else count(*) end > 2 |
+----------------------------------------------------------+
|                                                        0 |
+----------------------------------------------------------+


== case 8: test with scala group by
EXPLAIN select /*+no_rewrite*/ 1 from t1 having case when 1 then 1 else count(*) end > 2;
Query Plan
=================================================
|ID|OPERATOR         |NAME|EST.ROWS|EST.TIME(us)|
-------------------------------------------------
|0 |SCALAR GROUP BY  |    |1       |4           |
|1 |??TABLE FULL SCAN|t1  |5       |4           |
=================================================
Outputs & filters:
-------------------------------------
  0 - output([1]), filter([CASE WHEN 1 THEN 1 ELSE T_FUN_COUNT_SUM(T_FUN_COUNT(*)) END > 2]), rowset=256
      group(nil), agg_func([T_FUN_COUNT_SUM(T_FUN_COUNT(*))])
  1 - output([T_FUN_COUNT(*)]), filter(nil), rowset=256
      access(nil), partitions(p0)
      is_index_back=false, is_global_index=false, 
      range_key([t1.__pk_increment]), range(MIN ; MAX)always true
select /*+no_rewrite*/ 1 from t1 having case when 1 then 1 else count(*) end > 2;
+---+
| 1 |
+---+
+---+
EXPLAIN select 1 from t1 having case when 1 then 1 else count(*) end > 2;
Query Plan
=================================================
|ID|OPERATOR         |NAME|EST.ROWS|EST.TIME(us)|
-------------------------------------------------
|0 |SCALAR GROUP BY  |    |1       |4           |
|1 |??TABLE FULL SCAN|t1  |5       |4           |
=================================================
Outputs & filters:
-------------------------------------
  0 - output([1]), filter([CASE WHEN 1 THEN 1 ELSE T_FUN_COUNT_SUM(T_FUN_COUNT(*)) END > 2]), rowset=256
      group(nil), agg_func([T_FUN_COUNT_SUM(T_FUN_COUNT(*))])
  1 - output([T_FUN_COUNT(*)]), filter(nil), rowset=256
      access(nil), partitions(p0)
      is_index_back=false, is_global_index=false, 
      range_key([t1.__pk_increment]), range(MIN ; MAX)always true
select 1 from t1 having case when 1 then 1 else count(*) end > 2;
+---+
| 1 |
+---+
+---+


== case 9: test with scala group by
EXPLAIN select 1 from t1 where c1 > 0 or (c2 > 0 and 
                                    case when c1 > 0 then 1 
                                        when c2 > 0 then 2
                                        else 0 
                                    end > 1)
                    having case when 1 then 1 else count(*) end > 2;
Query Plan
=================================================
|ID|OPERATOR         |NAME|EST.ROWS|EST.TIME(us)|
-------------------------------------------------
|0 |SCALAR GROUP BY  |    |1       |5           |
|1 |??TABLE FULL SCAN|t1  |1       |5           |
=================================================
Outputs & filters:
-------------------------------------
  0 - output([1]), filter([CASE WHEN 1 THEN 1 ELSE T_FUN_COUNT_SUM(T_FUN_COUNT(*)) END > 2]), rowset=256
      group(nil), agg_func([T_FUN_COUNT_SUM(T_FUN_COUNT(*))])
  1 - output([T_FUN_COUNT(*)]), filter([t1.c1 > 0 OR t1.c2 > 0 AND lnnvl(cast(t1.c1 > 0, TINYINT(-1, 0))) AND t1.c2 > 0]), rowset=256
      access([t1.c1], [t1.c2]), partitions(p0)
      is_index_back=false, is_global_index=false, filter_before_indexback[false], 
      range_key([t1.__pk_increment]), range(MIN ; MAX)always true
select 1 from t1 where c1 > 0 or (c2 > 0 and 
                                    case when c1 > 0 then 1 
                                        when c2 > 0 then 2
                                        else 0 
                                    end > 1)
                    having case when 1 then 1 else count(*) end > 2;
+---+
| 1 |
+---+
+---+
EXPLAIN select /*+no_rewrite*/ 1 from t1 where c1 > 0 or (c2 > 0 and 
                                    case when c1 > 0 then 1 
                                        when c2 > 0 then 2
                                        else 0 
                                    end > 1)
                    having case when 1 then 1 else count(*) end > 2;
Query Plan
=================================================
|ID|OPERATOR         |NAME|EST.ROWS|EST.TIME(us)|
-------------------------------------------------
|0 |SCALAR GROUP BY  |    |1       |5           |
|1 |??TABLE FULL SCAN|t1  |1       |5           |
=================================================
Outputs & filters:
-------------------------------------
  0 - output([1]), filter([CASE WHEN 1 THEN 1 ELSE T_FUN_COUNT_SUM(T_FUN_COUNT(*)) END > 2]), rowset=256
      group(nil), agg_func([T_FUN_COUNT_SUM(T_FUN_COUNT(*))])
  1 - output([T_FUN_COUNT(*)]), filter([t1.c1 > 0 OR t1.c2 > 0 AND CASE WHEN t1.c1 > 0 THEN 1 WHEN t1.c2 > 0 THEN 2 ELSE 0 END > 1]), rowset=256
      access([t1.c1], [t1.c2]), partitions(p0)
      is_index_back=false, is_global_index=false, filter_before_indexback[false], 
      range_key([t1.__pk_increment]), range(MIN ; MAX)always true
select /*+no_rewrite*/ 1 from t1 where c1 > 0 or (c2 > 0 and 
                                    case when c1 > 0 then 1 
                                        when c2 > 0 then 2
                                        else 0 
                                    end > 1)
                    having case when 1 then 1 else count(*) end > 2;
+---+
| 1 |
+---+
+---+


== case 10: can't be rewrite 
EXPLAIN select /*+no_rewrite*/ * from t1 where case when c1 > 0 then 1 else 2 end > 0;
Query Plan
===============================================
|ID|OPERATOR       |NAME|EST.ROWS|EST.TIME(us)|
-----------------------------------------------
|0 |TABLE FULL SCAN|t1  |2       |5           |
===============================================
Outputs & filters:
-------------------------------------
  0 - output([t1.c1], [t1.c2], [t1.c3], [t1.c4], [t1.c5], [t1.c6]), filter([CASE WHEN t1.c1 > 0 THEN 1 ELSE 2 END > 0]), rowset=256
      access([t1.c1], [t1.c2], [t1.c3], [t1.c4], [t1.c5], [t1.c6]), partitions(p0)
      is_index_back=false, is_global_index=false, filter_before_indexback[false], 
      range_key([t1.__pk_increment]), range(MIN ; MAX)always true
select /*+no_rewrite*/ * from t1 where case when c1 > 0 then 1 else 2 end > 0;
+------+------+------+------+------+------+
| c1   | c2   | c3   | c4   | c5   | c6   |
+------+------+------+------+------+------+
|    1 |    1 |    1 |    1 |    1 |    1 |
|    2 |    2 |    2 |    2 |    2 |    2 |
|    3 |    3 |    3 |    3 |    3 |    3 |
|    4 |    4 |    4 |    4 |    4 |    4 |
|    5 |    5 |    5 |    5 |    5 |    5 |
+------+------+------+------+------+------+
EXPLAIN select * from t1 where case when c1 > 0 then 1 else 2 end > 0;
Query Plan
===============================================
|ID|OPERATOR       |NAME|EST.ROWS|EST.TIME(us)|
-----------------------------------------------
|0 |TABLE FULL SCAN|t1  |2       |5           |
===============================================
Outputs & filters:
-------------------------------------
  0 - output([t1.c1], [t1.c2], [t1.c3], [t1.c4], [t1.c5], [t1.c6]), filter([CASE WHEN t1.c1 > 0 THEN 1 ELSE 2 END > 0]), rowset=256
      access([t1.c1], [t1.c2], [t1.c3], [t1.c4], [t1.c5], [t1.c6]), partitions(p0)
      is_index_back=false, is_global_index=false, filter_before_indexback[false], 
      range_key([t1.__pk_increment]), range(MIN ; MAX)always true
select * from t1 where case when c1 > 0 then 1 else 2 end > 0;
+------+------+------+------+------+------+
| c1   | c2   | c3   | c4   | c5   | c6   |
+------+------+------+------+------+------+
|    1 |    1 |    1 |    1 |    1 |    1 |
|    2 |    2 |    2 |    2 |    2 |    2 |
|    3 |    3 |    3 |    3 |    3 |    3 |
|    4 |    4 |    4 |    4 |    4 |    4 |
|    5 |    5 |    5 |    5 |    5 |    5 |
+------+------+------+------+------+------+


== case 11: can't be rewrite 
EXPLAIN select /*+no_rewrite*/ * from t1 where case when c1 > 0 then 1 
                          	when c2 > 0 then 2
                      	    when c3 > 0 then 3
                          	else 4
                       end > 1;
Query Plan
===============================================
|ID|OPERATOR       |NAME|EST.ROWS|EST.TIME(us)|
-----------------------------------------------
|0 |TABLE FULL SCAN|t1  |2       |5           |
===============================================
Outputs & filters:
-------------------------------------
  0 - output([t1.c1], [t1.c2], [t1.c3], [t1.c4], [t1.c5], [t1.c6]), filter([CASE WHEN t1.c1 > 0 THEN 1 WHEN t1.c2 > 0 THEN 2 WHEN t1.c3 > 0 THEN 3 ELSE 
      4 END > 1]), rowset=256
      access([t1.c1], [t1.c2], [t1.c3], [t1.c4], [t1.c5], [t1.c6]), partitions(p0)
      is_index_back=false, is_global_index=false, filter_before_indexback[false], 
      range_key([t1.__pk_increment]), range(MIN ; MAX)always true
select /*+no_rewrite*/ * from t1 where case when c1 > 0 then 1 
                          	when c2 > 0 then 2
                      	    when c3 > 0 then 3
                          	else 4
                       end > 1;
+------+------+------+------+------+------+
| c1   | c2   | c3   | c4   | c5   | c6   |
+------+------+------+------+------+------+
+------+------+------+------+------+------+
EXPLAIN select * from t1 where case when c1 > 0 then 1 
                          	when c2 > 0 then 2
                      	    when c3 > 0 then 3
                          	else 4
                       end > 1;
Query Plan
===============================================
|ID|OPERATOR       |NAME|EST.ROWS|EST.TIME(us)|
-----------------------------------------------
|0 |TABLE FULL SCAN|t1  |2       |5           |
===============================================
Outputs & filters:
-------------------------------------
  0 - output([t1.c1], [t1.c2], [t1.c3], [t1.c4], [t1.c5], [t1.c6]), filter([CASE WHEN t1.c1 > 0 THEN 1 WHEN t1.c2 > 0 THEN 2 WHEN t1.c3 > 0 THEN 3 ELSE 
      4 END > 1]), rowset=256
      access([t1.c1], [t1.c2], [t1.c3], [t1.c4], [t1.c5], [t1.c6]), partitions(p0)
      is_index_back=false, is_global_index=false, filter_before_indexback[false], 
      range_key([t1.__pk_increment]), range(MIN ; MAX)always true
select * from t1 where case when c1 > 0 then 1 
                          	when c2 > 0 then 2
                      	    when c3 > 0 then 3
                          	else 4
                       end > 1;
+------+------+------+------+------+------+
| c1   | c2   | c3   | c4   | c5   | c6   |
+------+------+------+------+------+------+
+------+------+------+------+------+------+

== case 12: can't be rewrite 
EXPLAIN select /*+no_rewrite*/ * from t1 where case when c1 > 0 then c1 else c2 end > 0;
Query Plan
===============================================
|ID|OPERATOR       |NAME|EST.ROWS|EST.TIME(us)|
-----------------------------------------------
|0 |TABLE FULL SCAN|t1  |2       |5           |
===============================================
Outputs & filters:
-------------------------------------
  0 - output([t1.c1], [t1.c2], [t1.c3], [t1.c4], [t1.c5], [t1.c6]), filter([CASE WHEN t1.c1 > 0 THEN t1.c1 ELSE t1.c2 END > 0]), rowset=256
      access([t1.c1], [t1.c2], [t1.c3], [t1.c4], [t1.c5], [t1.c6]), partitions(p0)
      is_index_back=false, is_global_index=false, filter_before_indexback[false], 
      range_key([t1.__pk_increment]), range(MIN ; MAX)always true
select /*+no_rewrite*/ * from t1 where case when c1 > 0 then c1 else c2 end > 0;
+------+------+------+------+------+------+
| c1   | c2   | c3   | c4   | c5   | c6   |
+------+------+------+------+------+------+
|    1 |    1 |    1 |    1 |    1 |    1 |
|    2 |    2 |    2 |    2 |    2 |    2 |
|    3 |    3 |    3 |    3 |    3 |    3 |
|    4 |    4 |    4 |    4 |    4 |    4 |
|    5 |    5 |    5 |    5 |    5 |    5 |
+------+------+------+------+------+------+
EXPLAIN select * from t1 where case when c1 > 0 then c1 else c2 end > 0;
Query Plan
===============================================
|ID|OPERATOR       |NAME|EST.ROWS|EST.TIME(us)|
-----------------------------------------------
|0 |TABLE FULL SCAN|t1  |2       |5           |
===============================================
Outputs & filters:
-------------------------------------
  0 - output([t1.c1], [t1.c2], [t1.c3], [t1.c4], [t1.c5], [t1.c6]), filter([CASE WHEN t1.c1 > 0 THEN t1.c1 ELSE t1.c2 END > 0]), rowset=256
      access([t1.c1], [t1.c2], [t1.c3], [t1.c4], [t1.c5], [t1.c6]), partitions(p0)
      is_index_back=false, is_global_index=false, filter_before_indexback[false], 
      range_key([t1.__pk_increment]), range(MIN ; MAX)always true
select * from t1 where case when c1 > 0 then c1 else c2 end > 0;
+------+------+------+------+------+------+
| c1   | c2   | c3   | c4   | c5   | c6   |
+------+------+------+------+------+------+
|    1 |    1 |    1 |    1 |    1 |    1 |
|    2 |    2 |    2 |    2 |    2 |    2 |
|    3 |    3 |    3 |    3 |    3 |    3 |
|    4 |    4 |    4 |    4 |    4 |    4 |
|    5 |    5 |    5 |    5 |    5 |    5 |
+------+------+------+------+------+------+

== case 13: can't be rewrite 
EXPLAIN select /*+no_rewrite*/ * from t1 where case when c1 > 0 then c1 
                                when c2 > 0 then c2
                                when c3 > 0 then 0
                                else 0
                            end > 1;
Query Plan
===============================================
|ID|OPERATOR       |NAME|EST.ROWS|EST.TIME(us)|
-----------------------------------------------
|0 |TABLE FULL SCAN|t1  |2       |5           |
===============================================
Outputs & filters:
-------------------------------------
  0 - output([t1.c1], [t1.c2], [t1.c3], [t1.c4], [t1.c5], [t1.c6]), filter([CASE WHEN t1.c1 > 0 THEN t1.c1 WHEN t1.c2 > 0 THEN t1.c2 WHEN t1.c3 > 0 THEN 
      0 ELSE 0 END > 1]), rowset=256
      access([t1.c1], [t1.c2], [t1.c3], [t1.c4], [t1.c5], [t1.c6]), partitions(p0)
      is_index_back=false, is_global_index=false, filter_before_indexback[false], 
      range_key([t1.__pk_increment]), range(MIN ; MAX)always true
select /*+no_rewrite*/ * from t1 where case when c1 > 0 then c1 
                                when c2 > 0 then c2
                                when c3 > 0 then 0
                                else 0
                            end > 1;
+------+------+------+------+------+------+
| c1   | c2   | c3   | c4   | c5   | c6   |
+------+------+------+------+------+------+
|    2 |    2 |    2 |    2 |    2 |    2 |
|    3 |    3 |    3 |    3 |    3 |    3 |
|    4 |    4 |    4 |    4 |    4 |    4 |
|    5 |    5 |    5 |    5 |    5 |    5 |
+------+------+------+------+------+------+

EXPLAIN select * from t1 where case when c1 > 0 then c1 
                          	when c2 > 0 then c2
                      	    when c3 > 0 then 0
                          	else 0
                       end > 1;
Query Plan
===============================================
|ID|OPERATOR       |NAME|EST.ROWS|EST.TIME(us)|
-----------------------------------------------
|0 |TABLE FULL SCAN|t1  |2       |5           |
===============================================
Outputs & filters:
-------------------------------------
  0 - output([t1.c1], [t1.c2], [t1.c3], [t1.c4], [t1.c5], [t1.c6]), filter([CASE WHEN t1.c1 > 0 THEN t1.c1 WHEN t1.c2 > 0 THEN t1.c2 WHEN t1.c3 > 0 THEN 
      0 ELSE 0 END > 1]), rowset=256
      access([t1.c1], [t1.c2], [t1.c3], [t1.c4], [t1.c5], [t1.c6]), partitions(p0)
      is_index_back=false, is_global_index=false, filter_before_indexback[false], 
      range_key([t1.__pk_increment]), range(MIN ; MAX)always true
select * from t1 where case when c1 > 0 then c1 
                          	when c2 > 0 then c2
                      	    when c3 > 0 then 0
                          	else 0
                       end > 1;
+------+------+------+------+------+------+
| c1   | c2   | c3   | c4   | c5   | c6   |
+------+------+------+------+------+------+
|    2 |    2 |    2 |    2 |    2 |    2 |
|    3 |    3 |    3 |    3 |    3 |    3 |
|    4 |    4 |    4 |    4 |    4 |    4 |
|    5 |    5 |    5 |    5 |    5 |    5 |
+------+------+------+------+------+------+


== case 13: can't be rewrite with NULL
EXPLAIN select /*+no_rewrite*/ * from t1 where case when c1 > 0 then null else 0 end = 0;
Query Plan
===============================================
|ID|OPERATOR       |NAME|EST.ROWS|EST.TIME(us)|
-----------------------------------------------
|0 |TABLE FULL SCAN|t1  |1       |4           |
===============================================
Outputs & filters:
-------------------------------------
  0 - output([t1.c1], [t1.c2], [t1.c3], [t1.c4], [t1.c5], [t1.c6]), filter([CASE WHEN t1.c1 > 0 THEN NULL ELSE 0 END = 0]), rowset=256
      access([t1.c1], [t1.c2], [t1.c3], [t1.c4], [t1.c5], [t1.c6]), partitions(p0)
      is_index_back=false, is_global_index=false, filter_before_indexback[false], 
      range_key([t1.__pk_increment]), range(MIN ; MAX)always true
select /*+no_rewrite*/ * from t1 where case when c1 > 0 then null else 0 end = 0;
+------+------+------+------+------+------+
| c1   | c2   | c3   | c4   | c5   | c6   |
+------+------+------+------+------+------+
+------+------+------+------+------+------+
EXPLAIN select * from t1 where case when c1 > 0 then null else 0 end = 0;
Query Plan
===============================================
|ID|OPERATOR       |NAME|EST.ROWS|EST.TIME(us)|
-----------------------------------------------
|0 |TABLE FULL SCAN|t1  |1       |4           |
===============================================
Outputs & filters:
-------------------------------------
  0 - output([t1.c1], [t1.c2], [t1.c3], [t1.c4], [t1.c5], [t1.c6]), filter([CASE WHEN t1.c1 > 0 THEN NULL ELSE 0 END = 0]), rowset=256
      access([t1.c1], [t1.c2], [t1.c3], [t1.c4], [t1.c5], [t1.c6]), partitions(p0)
      is_index_back=false, is_global_index=false, filter_before_indexback[false], 
      range_key([t1.__pk_increment]), range(MIN ; MAX)always true
select * from t1 where case when c1 > 0 then null else 0 end = 0;
+------+------+------+------+------+------+
| c1   | c2   | c3   | c4   | c5   | c6   |
+------+------+------+------+------+------+
+------+------+------+------+------+------+


== case 13: can't be rewrite with NULL
EXPLAIN select * from t1 where case when c1 > 0 then 1
                            when c2 > 0 then 2
                          	when c3 > 0 then 3
                            else null
                       end > 2;
Query Plan
===============================================
|ID|OPERATOR       |NAME|EST.ROWS|EST.TIME(us)|
-----------------------------------------------
|0 |TABLE FULL SCAN|t1  |2       |5           |
===============================================
Outputs & filters:
-------------------------------------
  0 - output([t1.c1], [t1.c2], [t1.c3], [t1.c4], [t1.c5], [t1.c6]), filter([CASE WHEN t1.c1 > 0 THEN 1 WHEN t1.c2 > 0 THEN 2 WHEN t1.c3 > 0 THEN 3 ELSE 
      NULL END > 2]), rowset=256
      access([t1.c1], [t1.c2], [t1.c3], [t1.c4], [t1.c5], [t1.c6]), partitions(p0)
      is_index_back=false, is_global_index=false, filter_before_indexback[false], 
      range_key([t1.__pk_increment]), range(MIN ; MAX)always true
select * from t1 where case when c1 > 0 then 1
                            when c2 > 0 then 2
                          	when c3 > 0 then 3
                            else null
                       end > 2;
+------+------+------+------+------+------+
| c1   | c2   | c3   | c4   | c5   | c6   |
+------+------+------+------+------+------+
+------+------+------+------+------+------+
EXPLAIN select /*+no_rewrite*/ * from t1 where case when c1 > 0 then 1
                            when c2 > 0 then 2
                          	when c3 > 0 then 3
                            else null
                       end > 2;
Query Plan
===============================================
|ID|OPERATOR       |NAME|EST.ROWS|EST.TIME(us)|
-----------------------------------------------
|0 |TABLE FULL SCAN|t1  |2       |5           |
===============================================
Outputs & filters:
-------------------------------------
  0 - output([t1.c1], [t1.c2], [t1.c3], [t1.c4], [t1.c5], [t1.c6]), filter([CASE WHEN t1.c1 > 0 THEN 1 WHEN t1.c2 > 0 THEN 2 WHEN t1.c3 > 0 THEN 3 ELSE 
      NULL END > 2]), rowset=256
      access([t1.c1], [t1.c2], [t1.c3], [t1.c4], [t1.c5], [t1.c6]), partitions(p0)
      is_index_back=false, is_global_index=false, filter_before_indexback[false], 
      range_key([t1.__pk_increment]), range(MIN ; MAX)always true
select /*+no_rewrite*/ * from t1 where case when c1 > 0 then 1
                            when c2 > 0 then 2
                          	when c3 > 0 then 3
                            else null
                       end > 2;
+------+------+------+------+------+------+
| c1   | c2   | c3   | c4   | c5   | c6   |
+------+------+------+------+------+------+
+------+------+------+------+------+------+

**************************** Joint when and then exprs test **************************** 

== case 1 
EXPLAIN select * from t1 where 
	case when 1 > 2 then 1
			 when 2 > 3 then 2
		   when null then c1
			 when c2 > 0 then c2
  	   else 1
	end > 2;
Query Plan
===============================================
|ID|OPERATOR       |NAME|EST.ROWS|EST.TIME(us)|
-----------------------------------------------
|0 |TABLE FULL SCAN|t1  |1       |5           |
===============================================
Outputs & filters:
-------------------------------------
  0 - output([t1.c1], [t1.c2], [t1.c3], [t1.c4], [t1.c5], [t1.c6]), filter([t1.c2 > 0], [t1.c2 > 2]), rowset=256
      access([t1.c1], [t1.c2], [t1.c3], [t1.c4], [t1.c5], [t1.c6]), partitions(p0)
      is_index_back=false, is_global_index=false, filter_before_indexback[false,false], 
      range_key([t1.__pk_increment]), range(MIN ; MAX)always true
select * from t1 where 
	case when 1 > 2 then 1
			 when 2 > 3 then 2
		   when null then c1
			 when c2 > 0 then c2
  	   else 1
	end > 2;
+------+------+------+------+------+------+
| c1   | c2   | c3   | c4   | c5   | c6   |
+------+------+------+------+------+------+
|    3 |    3 |    3 |    3 |    3 |    3 |
|    4 |    4 |    4 |    4 |    4 |    4 |
|    5 |    5 |    5 |    5 |    5 |    5 |
+------+------+------+------+------+------+
EXPLAIN select /*+no_rewrite*/ * from t1 where 
	case when 1 > 2 then 1
			 when 2 > 3 then 2
		   when null then c1
			 when c2 > 0 then c2
  	   else 1
	end > 2;
Query Plan
===============================================
|ID|OPERATOR       |NAME|EST.ROWS|EST.TIME(us)|
-----------------------------------------------
|0 |TABLE FULL SCAN|t1  |2       |5           |
===============================================
Outputs & filters:
-------------------------------------
  0 - output([t1.c1], [t1.c2], [t1.c3], [t1.c4], [t1.c5], [t1.c6]), filter([CASE WHEN 1 > 2 THEN 1 WHEN 2 > 3 THEN 2 WHEN cast(NULL, DOUBLE(-1, -1)) THEN 
      t1.c1 WHEN t1.c2 > 0 THEN t1.c2 ELSE 1 END > 2]), rowset=256
      access([t1.c1], [t1.c2], [t1.c3], [t1.c4], [t1.c5], [t1.c6]), partitions(p0)
      is_index_back=false, is_global_index=false, filter_before_indexback[false], 
      range_key([t1.__pk_increment]), range(MIN ; MAX)always true
select /*+no_rewrite*/ * from t1 where 
	case when 1 > 2 then 1
			 when 2 > 3 then 2
		   when null then c1
			 when c2 > 0 then c2
  	   else 1
	end > 2;
+------+------+------+------+------+------+
| c1   | c2   | c3   | c4   | c5   | c6   |
+------+------+------+------+------+------+
|    3 |    3 |    3 |    3 |    3 |    3 |
|    4 |    4 |    4 |    4 |    4 |    4 |
|    5 |    5 |    5 |    5 |    5 |    5 |
+------+------+------+------+------+------+


== case 2
EXPLAIN select /*+no_rewrite*/ 1 from t1 where c1 > 0 and (c2 > 0 or case when c1 > c2 then c1 else 3 end > 5);
Query Plan
===============================================
|ID|OPERATOR       |NAME|EST.ROWS|EST.TIME(us)|
-----------------------------------------------
|0 |TABLE FULL SCAN|t1  |1       |5           |
===============================================
Outputs & filters:
-------------------------------------
  0 - output([1]), filter([t1.c1 > 0], [t1.c2 > 0 OR CASE WHEN t1.c1 > t1.c2 THEN t1.c1 ELSE 3 END > 5]), rowset=256
      access([t1.c1], [t1.c2]), partitions(p0)
      is_index_back=false, is_global_index=false, filter_before_indexback[false,false], 
      range_key([t1.__pk_increment]), range(MIN ; MAX)always true
select /*+no_rewrite*/ 1 from t1 where c1 > 0 and (c2 > 0 or case when c1 > c2 then c1 else 3 end > 5);
+---+
| 1 |
+---+
| 1 |
| 1 |
| 1 |
| 1 |
| 1 |
+---+
EXPLAIN select 1 from t1 where c1 > 0 and (c2 > 0 or case when c1 > c2 then c1 else 3 end > 5);
Query Plan
===============================================
|ID|OPERATOR       |NAME|EST.ROWS|EST.TIME(us)|
-----------------------------------------------
|0 |TABLE FULL SCAN|t1  |1       |5           |
===============================================
Outputs & filters:
-------------------------------------
  0 - output([1]), filter([t1.c1 > 0], [t1.c2 > 0 OR t1.c1 > t1.c2 AND t1.c1 > 5]), rowset=256
      access([t1.c1], [t1.c2]), partitions(p0)
      is_index_back=false, is_global_index=false, filter_before_indexback[false,false], 
      range_key([t1.__pk_increment]), range(MIN ; MAX)always true
select 1 from t1 where c1 > 0 and (c2 > 0 or case when c1 > c2 then c1 else 3 end > 5);
+---+
| 1 |
+---+
| 1 |
| 1 |
| 1 |
| 1 |
| 1 |
+---+


== case 3
EXPLAIN select /*+no_rewrite*/ 1 from t1 where c1 > 0 and (c2 > 0 or case when c1 > c2 then c1 else 3 end > 5) 
group by c3
having case when c3 > 0 then c3 else 0 end > 4;
Query Plan
=================================================
|ID|OPERATOR         |NAME|EST.ROWS|EST.TIME(us)|
-------------------------------------------------
|0 |HASH GROUP BY    |    |1       |5           |
|1 |??TABLE FULL SCAN|t1  |1       |5           |
=================================================
Outputs & filters:
-------------------------------------
  0 - output([1]), filter([CASE WHEN t1.c3 > 0 THEN t1.c3 ELSE 0 END > 4]), rowset=256
      group([t1.c3]), agg_func(nil)
  1 - output([t1.c3]), filter([t1.c1 > 0], [t1.c2 > 0 OR CASE WHEN t1.c1 > t1.c2 THEN t1.c1 ELSE 3 END > 5]), rowset=256
      access([t1.c1], [t1.c2], [t1.c3]), partitions(p0)
      is_index_back=false, is_global_index=false, filter_before_indexback[false,false], 
      range_key([t1.__pk_increment]), range(MIN ; MAX)always true
select /*+no_rewrite*/ 1 from t1 where c1 > 0 and (c2 > 0 or case when c1 > c2 then c1 else 3 end > 5) 
group by c3
having case when c3 > 0 then c3 else 0 end > 4;
+---+
| 1 |
+---+
| 1 |
+---+

EXPLAIN select 1 from t1 where c1 > 0 and (c2 > 0 or case when c1 > c2 then c1 else 3 end > 5) 
group by c3
having case when c3 > 0 then c3 else 0 end > 4;
Query Plan
=================================================
|ID|OPERATOR         |NAME|EST.ROWS|EST.TIME(us)|
-------------------------------------------------
|0 |HASH GROUP BY    |    |1       |5           |
|1 |??TABLE FULL SCAN|t1  |1       |5           |
=================================================
Outputs & filters:
-------------------------------------
  0 - output([1]), filter(nil), rowset=256
      group([t1.c3]), agg_func(nil)
  1 - output([t1.c3]), filter([t1.c1 > 0], [t1.c3 > 0], [t1.c3 > 4], [t1.c2 > 0 OR t1.c1 > t1.c2 AND t1.c1 > 5]), rowset=256
      access([t1.c1], [t1.c2], [t1.c3]), partitions(p0)
      is_index_back=false, is_global_index=false, filter_before_indexback[false,false,false,false], 
      range_key([t1.__pk_increment]), range(MIN ; MAX)always true
select 1 from t1 where c1 > 0 and (c2 > 0 or case when c1 > c2 then c1 else 3 end > 5) 
group by c3
having case when c3 > 0 then c3 else 0 end > 4;
+---+
| 1 |
+---+
| 1 |
+---+

**************************** plan cache test **************************** 
enable plan cache
set ob_enable_plan_cache = 1;


== case 1
EXPLAIN select 1 from t1 where case when c1 > 0 then 0
                            when c2 > 0 then 1
                            when c3 > 0 then 2
                            else 3
                        end > 3;
Query Plan
===============================================
|ID|OPERATOR       |NAME|EST.ROWS|EST.TIME(us)|
-----------------------------------------------
|0 |TABLE FULL SCAN|t1  |5       |4           |
===============================================
Outputs & filters:
-------------------------------------
  0 - output([1]), filter(nil), startup_filter([0]), rowset=256
      access(nil), partitions(p0)
      is_index_back=false, is_global_index=false, 
      range_key([t1.__pk_increment]), range(MIN ; MAX)always true
select 1 from t1 where case when c1 > 0 then 0
                            when c2 > 0 then 1
                            when c3 > 0 then 2
                            else 3
                        end > 3;
+---+
| 1 |
+---+
+---+
EXPLAIN select 1 from t1 where case when c1 > 0 then 1
                            when c2 > 0 then 2
                            when c3 > 0 then 3
                            else 3
                        end > 4;
Query Plan
===============================================
|ID|OPERATOR       |NAME|EST.ROWS|EST.TIME(us)|
-----------------------------------------------
|0 |TABLE FULL SCAN|t1  |5       |4           |
===============================================
Outputs & filters:
-------------------------------------
  0 - output([1]), filter(nil), startup_filter([0]), rowset=256
      access(nil), partitions(p0)
      is_index_back=false, is_global_index=false, 
      range_key([t1.__pk_increment]), range(MIN ; MAX)always true
select 1 from t1 where case when c1 > 0 then 1
                            when c2 > 0 then 2
                            when c3 > 0 then 3
                            else 3
                        end > 4;
+---+
| 1 |
+---+
+---+
