result_format: 4
explain_protocol: 2
DROP DATABASE IF EXISTS DB_CONVERT_CASE_WHEN;
CREATE DATABASE DB_CONVERT_CASE_WHEN;
USE DB_CONVERT_CASE_WHEN;

drop table if exists t1, t2, t3;
create table t1(c1 int, c2 int, c3 int, c4 int, c5 int, c6 int);
create table t2(c1 int, c2 int, c3 int);
create table t3(c1 int, c2 varchar(64), c3 varchar(64));

insert/*trace*/ into t1 values(1,1,1,1,1,1), (2,2,2,2,2,2), (3,3,3,3,3,3), (4,4,4,4,4,4), (5,5,5,5,5,5);
insert/*trace*/ into t2 values(NULL, NULL, NULL);
insert/*trace*/ into t3 values(1, "aaa", "is_aaa"), (2, "bbb", "is_bbb"), (3, "ccc", "is_ccc"), (4, "ddd", "is_ddd");

drop table if exists is_c1;
create table is_c1(c1 int);

set ob_enable_plan_cache = 0;

**************************** basic test **************************** 

== case 1
EXPLAIN select /*+no_rewrite*/* from (select /*+no_rewrite*/* from t2 where case when 1 is NULL then c1 else c2 end > 1);
Query Plan
============================================================
|ID|OPERATOR         |NAME           |EST.ROWS|EST.TIME(us)|
------------------------------------------------------------
|0 |SUBPLAN SCAN     |ANONYMOUS_VIEW1|1       |4           |
|1 |??TABLE FULL SCAN|t2             |1       |4           |
============================================================
Outputs & filters:
-------------------------------------
  0 - output([.c1], [.c2], [.c3]), filter(nil), rowset=256
      access([.c1], [.c2], [.c3])
  1 - output([t2.c1], [t2.c2], [t2.c3]), filter([CASE WHEN 1 IS NULL THEN t2.c1 ELSE t2.c2 END > 1]), rowset=256
      access([t2.c1], [t2.c2], [t2.c3]), partitions(p0)
      is_index_back=false, is_global_index=false, filter_before_indexback[false], 
      range_key([t2.__pk_increment]), range(MIN ; MAX)always true
select /*+no_rewrite*/* from (select /*+no_rewrite*/* from t2 where case when 1 is NULL then c1 else c2 end > 1);
+------+------+------+
| c1   | c2   | c3   |
+------+------+------+
+------+------+------+
EXPLAIN select * from (select * from t2 where case when 1 is NULL then c1 else c2 end > 1);
Query Plan
===============================================
|ID|OPERATOR       |NAME|EST.ROWS|EST.TIME(us)|
-----------------------------------------------
|0 |TABLE FULL SCAN|t2  |1       |4           |
===============================================
Outputs & filters:
-------------------------------------
  0 - output([t2.c1], [t2.c2], [t2.c3]), filter([t2.c2 > 1]), rowset=256
      access([t2.c1], [t2.c2], [t2.c3]), partitions(p0)
      is_index_back=false, is_global_index=false, filter_before_indexback[false], 
      range_key([t2.__pk_increment]), range(MIN ; MAX)always true
select * from (select * from t2 where case when 1 is NULL then c1 else c2 end > 1);
+------+------+------+
| c1   | c2   | c3   |
+------+------+------+
+------+------+------+


== case 2
EXPLAIN select /*+no_rewrite*/* from t3 where case when c1 > 0 then "aaa" else "bbb" end = "aaa";
Query Plan
===============================================
|ID|OPERATOR       |NAME|EST.ROWS|EST.TIME(us)|
-----------------------------------------------
|0 |TABLE FULL SCAN|t3  |1       |5           |
===============================================
Outputs & filters:
-------------------------------------
  0 - output([t3.c1], [t3.c2], [t3.c3]), filter([CASE WHEN t3.c1 > 0 THEN 'aaa' ELSE 'bbb' END = 'aaa']), rowset=256
      access([t3.c1], [t3.c2], [t3.c3]), partitions(p0)
      is_index_back=false, is_global_index=false, filter_before_indexback[false], 
      range_key([t3.__pk_increment]), range(MIN ; MAX)always true
select /*+no_rewrite*/* from t3 where case when c1 > 0 then "aaa" else "bbb" end = "aaa";
+------+------+--------+
| c1   | c2   | c3     |
+------+------+--------+
|    1 | aaa  | is_aaa |
|    2 | bbb  | is_bbb |
|    3 | ccc  | is_ccc |
|    4 | ddd  | is_ddd |
+------+------+--------+
EXPLAIN select * from t3 where case when c1 > 0 then "aaa" else "bbb" end = "aaa";
Query Plan
===============================================
|ID|OPERATOR       |NAME|EST.ROWS|EST.TIME(us)|
-----------------------------------------------
|0 |TABLE FULL SCAN|t3  |1       |4           |
===============================================
Outputs & filters:
-------------------------------------
  0 - output([t3.c1], [t3.c2], [t3.c3]), filter([t3.c1 > 0]), rowset=256
      access([t3.c1], [t3.c2], [t3.c3]), partitions(p0)
      is_index_back=false, is_global_index=false, filter_before_indexback[false], 
      range_key([t3.__pk_increment]), range(MIN ; MAX)always true
select * from t3 where case when c1 > 0 then "aaa" else "bbb" end = "aaa";
+------+------+--------+
| c1   | c2   | c3     |
+------+------+--------+
|    1 | aaa  | is_aaa |
|    2 | bbb  | is_bbb |
|    3 | ccc  | is_ccc |
|    4 | ddd  | is_ddd |
+------+------+--------+


== case 3
EXPLAIN select /*+no_rewrite*/* from t3 where case when c1 > 0 then "aaa" else "bbb" end = "ccc";
Query Plan
===============================================
|ID|OPERATOR       |NAME|EST.ROWS|EST.TIME(us)|
-----------------------------------------------
|0 |TABLE FULL SCAN|t3  |1       |5           |
===============================================
Outputs & filters:
-------------------------------------
  0 - output([t3.c1], [t3.c2], [t3.c3]), filter([CASE WHEN t3.c1 > 0 THEN 'aaa' ELSE 'bbb' END = 'ccc']), rowset=256
      access([t3.c1], [t3.c2], [t3.c3]), partitions(p0)
      is_index_back=false, is_global_index=false, filter_before_indexback[false], 
      range_key([t3.__pk_increment]), range(MIN ; MAX)always true
select /*+no_rewrite*/* from t3 where case when c1 > 0 then "aaa" else "bbb" end = "ccc";
+------+------+------+
| c1   | c2   | c3   |
+------+------+------+
+------+------+------+
EXPLAIN select * from t3 where case when c1 > 0 then "aaa" else "bbb" end = "ccc";
Query Plan
===============================================
|ID|OPERATOR       |NAME|EST.ROWS|EST.TIME(us)|
-----------------------------------------------
|0 |TABLE FULL SCAN|t3  |4       |5           |
===============================================
Outputs & filters:
-------------------------------------
  0 - output([t3.c1], [t3.c2], [t3.c3]), filter(nil), startup_filter([0]), rowset=256
      access([t3.c1], [t3.c2], [t3.c3]), partitions(p0)
      is_index_back=false, is_global_index=false, 
      range_key([t3.__pk_increment]), range(MIN ; MAX)always true
select * from t3 where case when c1 > 0 then "aaa" else "bbb" end = "ccc";
+------+------+------+
| c1   | c2   | c3   |
+------+------+------+
+------+------+------+


== case 4 set union
EXPLAIN select /*+no_rewrite*/ * from ((select /*+no_rewrite*/ c1 from t1 where case when 1 > 2 then c1 else c2 end > 1) 
                         union (select /*+no_rewrite*/ c1 from t3 where case when c1 > 0 then 1 else 2 end > 1)) as tmp;
Query Plan
=====================================================
|ID|OPERATOR             |NAME|EST.ROWS|EST.TIME(us)|
-----------------------------------------------------
|0 |SUBPLAN SCAN         |tmp |3       |9           |
|1 |??HASH UNION DISTINCT|    |3       |9           |
|2 |  ??TABLE FULL SCAN  |t1  |2       |5           |
|3 |  ??TABLE FULL SCAN  |t3  |2       |4           |
=====================================================
Outputs & filters:
-------------------------------------
  0 - output([tmp.c1]), filter(nil), rowset=256
      access([tmp.c1])
  1 - output([UNION([1])]), filter(nil), rowset=256
  2 - output([t1.c1]), filter([CASE WHEN 1 > 2 THEN t1.c1 ELSE t1.c2 END > 1]), rowset=256
      access([t1.c1], [t1.c2]), partitions(p0)
      is_index_back=false, is_global_index=false, filter_before_indexback[false], 
      range_key([t1.__pk_increment]), range(MIN ; MAX)always true
  3 - output([t3.c1]), filter([CASE WHEN t3.c1 > 0 THEN 1 ELSE 2 END > 1]), rowset=256
      access([t3.c1]), partitions(p0)
      is_index_back=false, is_global_index=false, filter_before_indexback[false], 
      range_key([t3.__pk_increment]), range(MIN ; MAX)always true
select /*+no_rewrite*/ * from ((select /*+no_rewrite*/ c1 from t1 where case when 1 > 2 then c1 else c2 end > 1) 
                         union (select /*+no_rewrite*/ c1 from t3 where case when c1 > 0 then 1 else 2 end > 1)) as tmp;
+------+
| c1   |
+------+
|    2 |
|    3 |
|    4 |
|    5 |
+------+
EXPLAIN select * from ((select c1 from t1 where case when 1 > 2 then c1 else c2 end > 1) 
         union (select c1 from t3 where case when c1 > 0 then 1 else 2 end > 1)) as tmp;
Query Plan
===================================================
|ID|OPERATOR           |NAME|EST.ROWS|EST.TIME(us)|
---------------------------------------------------
|0 |HASH UNION DISTINCT|    |3       |9           |
|1 |??TABLE FULL SCAN  |t1  |1       |5           |
|2 |??TABLE FULL SCAN  |t3  |2       |4           |
===================================================
Outputs & filters:
-------------------------------------
  0 - output([UNION([1])]), filter(nil), rowset=256
  1 - output([t1.c1]), filter([t1.c2 > 1]), rowset=256
      access([t1.c1], [t1.c2]), partitions(p0)
      is_index_back=false, is_global_index=false, filter_before_indexback[false], 
      range_key([t1.__pk_increment]), range(MIN ; MAX)always true
  2 - output([t3.c1]), filter([lnnvl(cast(t3.c1 > 0, TINYINT(-1, 0)))]), rowset=256
      access([t3.c1]), partitions(p0)
      is_index_back=false, is_global_index=false, filter_before_indexback[false], 
      range_key([t3.__pk_increment]), range(MIN ; MAX)always true
select * from ((select c1 from t1 where case when 1 > 2 then c1 else c2 end > 1) 
         union (select c1 from t3 where case when c1 > 0 then 1 else 2 end > 1)) as tmp;
+------+
| c1   |
+------+
|    2 |
|    3 |
|    4 |
|    5 |
+------+

**************************** convert when exprs test **************************** 

== case 1
EXPLAIN select /*+no_rewrite*/ * from t1 where c1 > 0 and case when 2 > 1 then c1 else c2 end > 1;
Query Plan
===============================================
|ID|OPERATOR       |NAME|EST.ROWS|EST.TIME(us)|
-----------------------------------------------
|0 |TABLE FULL SCAN|t1  |1       |5           |
===============================================
Outputs & filters:
-------------------------------------
  0 - output([t1.c1], [t1.c2], [t1.c3], [t1.c4], [t1.c5], [t1.c6]), filter([t1.c1 > 0], [CASE WHEN 2 > 1 THEN t1.c1 ELSE t1.c2 END > 1]), rowset=256
      access([t1.c1], [t1.c2], [t1.c3], [t1.c4], [t1.c5], [t1.c6]), partitions(p0)
      is_index_back=false, is_global_index=false, filter_before_indexback[false,false], 
      range_key([t1.__pk_increment]), range(MIN ; MAX)always true
select /*+no_rewrite*/ * from t1 where c1 > 0 and case when 2 > 1 then c1 else c2 end > 1;
+------+------+------+------+------+------+
| c1   | c2   | c3   | c4   | c5   | c6   |
+------+------+------+------+------+------+
|    2 |    2 |    2 |    2 |    2 |    2 |
|    3 |    3 |    3 |    3 |    3 |    3 |
|    4 |    4 |    4 |    4 |    4 |    4 |
|    5 |    5 |    5 |    5 |    5 |    5 |
+------+------+------+------+------+------+
EXPLAIN select * from t1 where c1 > 0 and case when 2 > 1 then c1 else c2 end > 1;
Query Plan
===============================================
|ID|OPERATOR       |NAME|EST.ROWS|EST.TIME(us)|
-----------------------------------------------
|0 |TABLE FULL SCAN|t1  |1       |5           |
===============================================
Outputs & filters:
-------------------------------------
  0 - output([t1.c1], [t1.c2], [t1.c3], [t1.c4], [t1.c5], [t1.c6]), filter([t1.c1 > 0], [t1.c1 > 1]), rowset=256
      access([t1.c1], [t1.c2], [t1.c3], [t1.c4], [t1.c5], [t1.c6]), partitions(p0)
      is_index_back=false, is_global_index=false, filter_before_indexback[false,false], 
      range_key([t1.__pk_increment]), range(MIN ; MAX)always true
select * from t1 where c1 > 0 and case when 2 > 1 then c1 else c2 end > 1;
+------+------+------+------+------+------+
| c1   | c2   | c3   | c4   | c5   | c6   |
+------+------+------+------+------+------+
|    2 |    2 |    2 |    2 |    2 |    2 |
|    3 |    3 |    3 |    3 |    3 |    3 |
|    4 |    4 |    4 |    4 |    4 |    4 |
|    5 |    5 |    5 |    5 |    5 |    5 |
+------+------+------+------+------+------+


== case 2
EXPLAIN select /*+no_rewrite*/ case when 2 > 1 then c1 else c2 end from t1 where c1 > 0 and case when 2 > 1 then c1 else c2 end > 1;
Query Plan
===============================================
|ID|OPERATOR       |NAME|EST.ROWS|EST.TIME(us)|
-----------------------------------------------
|0 |TABLE FULL SCAN|t1  |1       |5           |
===============================================
Outputs & filters:
-------------------------------------
  0 - output([CASE WHEN 2 > 1 THEN t1.c1 ELSE t1.c2 END]), filter([t1.c1 > 0], [CASE WHEN 2 > 1 THEN t1.c1 ELSE t1.c2 END > 1]), rowset=256
      access([t1.c1], [t1.c2]), partitions(p0)
      is_index_back=false, is_global_index=false, filter_before_indexback[false,false], 
      range_key([t1.__pk_increment]), range(MIN ; MAX)always true
select /*+no_rewrite*/ case when 2 > 1 then c1 else c2 end from t1 where c1 > 0 and case when 2 > 1 then c1 else c2 end > 1;
+-------------------------------------+
| case when 2 > 1 then c1 else c2 end |
+-------------------------------------+
|                                   2 |
|                                   3 |
|                                   4 |
|                                   5 |
+-------------------------------------+
EXPLAIN select case when 2 > 1 then c1 else c2 end from t1 where c1 > 0 and case when 2 > 1 then c1 else c2 end > 1;
Query Plan
===============================================
|ID|OPERATOR       |NAME|EST.ROWS|EST.TIME(us)|
-----------------------------------------------
|0 |TABLE FULL SCAN|t1  |1       |5           |
===============================================
Outputs & filters:
-------------------------------------
  0 - output([t1.c1]), filter([t1.c1 > 0], [t1.c1 > 1]), rowset=256
      access([t1.c1]), partitions(p0)
      is_index_back=false, is_global_index=false, filter_before_indexback[false,false], 
      range_key([t1.__pk_increment]), range(MIN ; MAX)always true
select case when 2 > 1 then c1 else c2 end from t1 where c1 > 0 and case when 2 > 1 then c1 else c2 end > 1;
+-------------------------------------+
| case when 2 > 1 then c1 else c2 end |
+-------------------------------------+
|                                   2 |
|                                   3 |
|                                   4 |
|                                   5 |
+-------------------------------------+


== case 3
EXPLAIN select /*+no_rewrite*/ 1 from t1 where case when c1 > c2 then c1 else c2 end > 1;
Query Plan
===============================================
|ID|OPERATOR       |NAME|EST.ROWS|EST.TIME(us)|
-----------------------------------------------
|0 |TABLE FULL SCAN|t1  |2       |5           |
===============================================
Outputs & filters:
-------------------------------------
  0 - output([1]), filter([CASE WHEN t1.c1 > t1.c2 THEN t1.c1 ELSE t1.c2 END > 1]), rowset=256
      access([t1.c1], [t1.c2]), partitions(p0)
      is_index_back=false, is_global_index=false, filter_before_indexback[false], 
      range_key([t1.__pk_increment]), range(MIN ; MAX)always true
select /*+no_rewrite*/ 1 from t1 where case when c1 > c2 then c1 else c2 end > 1;
+---+
| 1 |
+---+
| 1 |
| 1 |
| 1 |
| 1 |
+---+
EXPLAIN select 1 from t1 where case when c1 > c2 then c1 else c2 end > 1;
Query Plan
===============================================
|ID|OPERATOR       |NAME|EST.ROWS|EST.TIME(us)|
-----------------------------------------------
|0 |TABLE FULL SCAN|t1  |2       |5           |
===============================================
Outputs & filters:
-------------------------------------
  0 - output([1]), filter([CASE WHEN t1.c1 > t1.c2 THEN t1.c1 ELSE t1.c2 END > 1]), rowset=256
      access([t1.c1], [t1.c2]), partitions(p0)
      is_index_back=false, is_global_index=false, filter_before_indexback[false], 
      range_key([t1.__pk_increment]), range(MIN ; MAX)always true
select 1 from t1 where case when c1 > c2 then c1 else c2 end > 1;
+---+
| 1 |
+---+
| 1 |
| 1 |
| 1 |
| 1 |
+---+


== case 4
EXPLAIN select /*+no_rewrite*/ 1 from t1 where case when 2 > 2 then c1 
                                            when 1 > 2  then 2 
                                            when 2 < 3 then c2 
                                            else c3 end > 1;
Query Plan
===============================================
|ID|OPERATOR       |NAME|EST.ROWS|EST.TIME(us)|
-----------------------------------------------
|0 |TABLE FULL SCAN|t1  |2       |5           |
===============================================
Outputs & filters:
-------------------------------------
  0 - output([1]), filter([CASE WHEN 2 > 2 THEN t1.c1 WHEN 1 > 2 THEN 2 WHEN 2 < 3 THEN t1.c2 ELSE t1.c3 END > 1]), rowset=256
      access([t1.c1], [t1.c2], [t1.c3]), partitions(p0)
      is_index_back=false, is_global_index=false, filter_before_indexback[false], 
      range_key([t1.__pk_increment]), range(MIN ; MAX)always true
select /*+no_rewrite*/ 1 from t1 where case when 2 > 2 then c1 
                                            when 1 > 2  then 2 
                                            when 2 < 3 then c2 
                                            else c3 end > 1;
+---+
| 1 |
+---+
| 1 |
| 1 |
| 1 |
| 1 |
+---+
EXPLAIN select 1 from t1 where case when 2 > 2 then c1 
                            when 1 > 2  then 2 
                            when 2 < 3 then c2 
                            else c3 end > 1;
Query Plan
===============================================
|ID|OPERATOR       |NAME|EST.ROWS|EST.TIME(us)|
-----------------------------------------------
|0 |TABLE FULL SCAN|t1  |1       |5           |
===============================================
Outputs & filters:
-------------------------------------
  0 - output([1]), filter([t1.c2 > 1]), rowset=256
      access([t1.c2]), partitions(p0)
      is_index_back=false, is_global_index=false, filter_before_indexback[false], 
      range_key([t1.__pk_increment]), range(MIN ; MAX)always true
select 1 from t1 where case when 2 > 2 then c1 
                            when 1 > 2  then 2 
                            when 2 < 3 then c2 
                            else c3 end > 1;
+---+
| 1 |
+---+
| 1 |
| 1 |
| 1 |
| 1 |
+---+


== case 5
EXPLAIN select /*+no_rewrite*/ 1 from t1 where case when 2 > 1 then c1 
                                            when 1 > 2  then 2 
                                            when 2 < 3 then c2 
                                            else c3 end > 1;
Query Plan
===============================================
|ID|OPERATOR       |NAME|EST.ROWS|EST.TIME(us)|
-----------------------------------------------
|0 |TABLE FULL SCAN|t1  |2       |5           |
===============================================
Outputs & filters:
-------------------------------------
  0 - output([1]), filter([CASE WHEN 2 > 1 THEN t1.c1 WHEN 1 > 2 THEN 2 WHEN 2 < 3 THEN t1.c2 ELSE t1.c3 END > 1]), rowset=256
      access([t1.c1], [t1.c2], [t1.c3]), partitions(p0)
      is_index_back=false, is_global_index=false, filter_before_indexback[false], 
      range_key([t1.__pk_increment]), range(MIN ; MAX)always true
select /*+no_rewrite*/ 1 from t1 where case when 2 > 1 then c1 
                                            when 1 > 2  then 2 
                                            when 2 < 3 then c2 
                                            else c3 end > 1;
+---+
| 1 |
+---+
| 1 |
| 1 |
| 1 |
| 1 |
+---+
EXPLAIN select 1 from t1 where case when 2 > 1 then c1 
                            when 1 > 2  then 2 
                            when 2 < 3 then c2 
                            else c3 end > 1;
Query Plan
===============================================
|ID|OPERATOR       |NAME|EST.ROWS|EST.TIME(us)|
-----------------------------------------------
|0 |TABLE FULL SCAN|t1  |1       |5           |
===============================================
Outputs & filters:
-------------------------------------
  0 - output([1]), filter([t1.c1 > 1]), rowset=256
      access([t1.c1]), partitions(p0)
      is_index_back=false, is_global_index=false, filter_before_indexback[false], 
      range_key([t1.__pk_increment]), range(MIN ; MAX)always true
select 1 from t1 where case when 2 > 1 then c1 
                            when 1 > 2  then 2 
                            when 2 < 3 then c2 
                            else c3 end > 1;
+---+
| 1 |
+---+
| 1 |
| 1 |
| 1 |
| 1 |
+---+

== case 6
EXPLAIN select /*+no_rewrite*/ 1 from t1 where case when NULL > 1 then c1 
                                            when 1 > 2  then 2 
                                            when 2 < 3 then c2 
                                            else c3 end > 1;
Query Plan
===============================================
|ID|OPERATOR       |NAME|EST.ROWS|EST.TIME(us)|
-----------------------------------------------
|0 |TABLE FULL SCAN|t1  |2       |5           |
===============================================
Outputs & filters:
-------------------------------------
  0 - output([1]), filter([CASE WHEN NULL > 1 THEN t1.c1 WHEN 1 > 2 THEN 2 WHEN 2 < 3 THEN t1.c2 ELSE t1.c3 END > 1]), rowset=256
      access([t1.c1], [t1.c2], [t1.c3]), partitions(p0)
      is_index_back=false, is_global_index=false, filter_before_indexback[false], 
      range_key([t1.__pk_increment]), range(MIN ; MAX)always true
select /*+no_rewrite*/ 1 from t1 where case when NULL > 1 then c1 
                                            when 1 > 2  then 2 
                                            when 2 < 3 then c2 
                                            else c3 end > 1;
+---+
| 1 |
+---+
| 1 |
| 1 |
| 1 |
| 1 |
+---+
EXPLAIN select 1 from t1 where case when NULL > 1 then c1 
                            when 1 > 2  then 2 
                            when 2 < 3 then c2 
                            else c3 end > 1;
Query Plan
===============================================
|ID|OPERATOR       |NAME|EST.ROWS|EST.TIME(us)|
-----------------------------------------------
|0 |TABLE FULL SCAN|t1  |1       |5           |
===============================================
Outputs & filters:
-------------------------------------
  0 - output([1]), filter([t1.c2 > 1]), rowset=256
      access([t1.c2]), partitions(p0)
      is_index_back=false, is_global_index=false, filter_before_indexback[false], 
      range_key([t1.__pk_increment]), range(MIN ; MAX)always true
select 1 from t1 where case when NULL > 1 then c1 
                            when 1 > 2  then 2 
                            when 2 < 3 then c2 
                            else c3 end > 1;
+---+
| 1 |
+---+
| 1 |
| 1 |
| 1 |
| 1 |
+---+


== case 7
EXPLAIN select /*+no_rewrite*/ 1 from t1 where case when c1 > 1 then c1 
                                            when 1 > 2  then 2 
                                            when 2 < 3 then c2 
                                            else c3 end > 1;
Query Plan
===============================================
|ID|OPERATOR       |NAME|EST.ROWS|EST.TIME(us)|
-----------------------------------------------
|0 |TABLE FULL SCAN|t1  |2       |5           |
===============================================
Outputs & filters:
-------------------------------------
  0 - output([1]), filter([CASE WHEN t1.c1 > 1 THEN t1.c1 WHEN 1 > 2 THEN 2 WHEN 2 < 3 THEN t1.c2 ELSE t1.c3 END > 1]), rowset=256
      access([t1.c1], [t1.c2], [t1.c3]), partitions(p0)
      is_index_back=false, is_global_index=false, filter_before_indexback[false], 
      range_key([t1.__pk_increment]), range(MIN ; MAX)always true
select /*+no_rewrite*/ 1 from t1 where case when c1 > 1 then c1 
                                            when 1 > 2  then 2 
                                            when 2 < 3 then c2 
                                            else c3 end > 1;
+---+
| 1 |
+---+
| 1 |
| 1 |
| 1 |
| 1 |
+---+
EXPLAIN select 1 from t1 where case when c1 > 1 then c1 
                            when 1 > 2  then 2 
                            when 2 < 3 then c2 
                            else c3 end > 1;
Query Plan
===============================================
|ID|OPERATOR       |NAME|EST.ROWS|EST.TIME(us)|
-----------------------------------------------
|0 |TABLE FULL SCAN|t1  |2       |5           |
===============================================
Outputs & filters:
-------------------------------------
  0 - output([1]), filter([CASE WHEN t1.c1 > 1 THEN t1.c1 WHEN 1 > 2 THEN 2 WHEN 2 < 3 THEN t1.c2 ELSE t1.c3 END > 1]), rowset=256
      access([t1.c1], [t1.c2], [t1.c3]), partitions(p0)
      is_index_back=false, is_global_index=false, filter_before_indexback[false], 
      range_key([t1.__pk_increment]), range(MIN ; MAX)always true
select 1 from t1 where case when c1 > 1 then c1 
                            when 1 > 2  then 2 
                            when 2 < 3 then c2 
                            else c3 end > 1;
+---+
| 1 |
+---+
| 1 |
| 1 |
| 1 |
| 1 |
+---+


== case 8
EXPLAIN select /*+no_rewrite*/ 1 from t1 where case when 1 > 1 then c1 
                                            else c3 end > 1;
Query Plan
===============================================
|ID|OPERATOR       |NAME|EST.ROWS|EST.TIME(us)|
-----------------------------------------------
|0 |TABLE FULL SCAN|t1  |2       |5           |
===============================================
Outputs & filters:
-------------------------------------
  0 - output([1]), filter([CASE WHEN 1 > 1 THEN t1.c1 ELSE t1.c3 END > 1]), rowset=256
      access([t1.c1], [t1.c3]), partitions(p0)
      is_index_back=false, is_global_index=false, filter_before_indexback[false], 
      range_key([t1.__pk_increment]), range(MIN ; MAX)always true
select /*+no_rewrite*/ 1 from t1 where case when 1 > 1 then c1 
                                            else c3 end > 1;
+---+
| 1 |
+---+
| 1 |
| 1 |
| 1 |
| 1 |
+---+
EXPLAIN select 1 from t1 where case when 1 > 1 then c1 else c3 end > 1;
Query Plan
===============================================
|ID|OPERATOR       |NAME|EST.ROWS|EST.TIME(us)|
-----------------------------------------------
|0 |TABLE FULL SCAN|t1  |1       |5           |
===============================================
Outputs & filters:
-------------------------------------
  0 - output([1]), filter([t1.c3 > 1]), rowset=256
      access([t1.c3]), partitions(p0)
      is_index_back=false, is_global_index=false, filter_before_indexback[false], 
      range_key([t1.__pk_increment]), range(MIN ; MAX)always true
select 1 from t1 where case when 1 > 1 then c1 else c3 end > 1;
+---+
| 1 |
+---+
| 1 |
| 1 |
| 1 |
| 1 |
+---+


== case 9
EXPLAIN select /*+no_rewrite*/ * from t1 where case when 1 < 2 then 1 
                            when 2 > 3 then 2 
                            when 3 > 2 then c1
                            when c2 > 0 then c2
                            else c3
                        end > 2;
Query Plan
===============================================
|ID|OPERATOR       |NAME|EST.ROWS|EST.TIME(us)|
-----------------------------------------------
|0 |TABLE FULL SCAN|t1  |2       |5           |
===============================================
Outputs & filters:
-------------------------------------
  0 - output([t1.c1], [t1.c2], [t1.c3], [t1.c4], [t1.c5], [t1.c6]), filter([CASE WHEN 1 < 2 THEN 1 WHEN 2 > 3 THEN 2 WHEN 3 > 2 THEN t1.c1 WHEN t1.c2 > 
      0 THEN t1.c2 ELSE t1.c3 END > 2]), rowset=256
      access([t1.c1], [t1.c2], [t1.c3], [t1.c4], [t1.c5], [t1.c6]), partitions(p0)
      is_index_back=false, is_global_index=false, filter_before_indexback[false], 
      range_key([t1.__pk_increment]), range(MIN ; MAX)always true
select /*+no_rewrite*/ * from t1 where case when 1 < 2 then 1 
                            when 2 > 3 then 2 
                            when 3 > 2 then c1
                            when c2 > 0 then c2
                            else c3
                        end > 2;
+------+------+------+------+------+------+
| c1   | c2   | c3   | c4   | c5   | c6   |
+------+------+------+------+------+------+
+------+------+------+------+------+------+
EXPLAIN select * from t1 where case when 1 < 2 then 1 
                            when 2 > 3 then 2 
                            when 3 > 2 then c1
                            when c2 > 0 then c2
                            else c3
                        end > 2;
Query Plan
===============================================
|ID|OPERATOR       |NAME|EST.ROWS|EST.TIME(us)|
-----------------------------------------------
|0 |TABLE FULL SCAN|t1  |5       |5           |
===============================================
Outputs & filters:
-------------------------------------
  0 - output([t1.c1], [t1.c2], [t1.c3], [t1.c4], [t1.c5], [t1.c6]), filter(nil), startup_filter([0]), rowset=256
      access([t1.c1], [t1.c2], [t1.c3], [t1.c4], [t1.c5], [t1.c6]), partitions(p0)
      is_index_back=false, is_global_index=false, 
      range_key([t1.__pk_increment]), range(MIN ; MAX)always true
select * from t1 where case when 1 < 2 then 1 
                            when 2 > 3 then 2 
                            when 3 > 2 then c1
                            when c2 > 0 then c2
                            else c3
                        end > 2;
+------+------+------+------+------+------+
| c1   | c2   | c3   | c4   | c5   | c6   |
+------+------+------+------+------+------+
+------+------+------+------+------+------+


== case 10: with scala group by
EXPLAIN select /*+no_rewrite*/ 1 from t1 having case when 1 > 1 then count(*) 
                                             else 3 end > 1;
Query Plan
=================================================
|ID|OPERATOR         |NAME|EST.ROWS|EST.TIME(us)|
-------------------------------------------------
|0 |SCALAR GROUP BY  |    |1       |4           |
|1 |??TABLE FULL SCAN|t1  |5       |4           |
=================================================
Outputs & filters:
-------------------------------------
  0 - output([1]), filter([CASE WHEN 1 > 1 THEN T_FUN_COUNT_SUM(T_FUN_COUNT(*)) ELSE 3 END > 1]), rowset=256
      group(nil), agg_func([T_FUN_COUNT_SUM(T_FUN_COUNT(*))])
  1 - output([T_FUN_COUNT(*)]), filter(nil), rowset=256
      access(nil), partitions(p0)
      is_index_back=false, is_global_index=false, 
      range_key([t1.__pk_increment]), range(MIN ; MAX)always true
select /*+no_rewrite*/ 1 from t1 having case when 1 > 1 then count(*) 
                                             else 3 end > 1;
+---+
| 1 |
+---+
| 1 |
+---+
EXPLAIN select 1 from t1 having case when 1 > 1 then count(*) 
                        else 3 end > 1;
Query Plan
=================================================
|ID|OPERATOR         |NAME|EST.ROWS|EST.TIME(us)|
-------------------------------------------------
|0 |SCALAR GROUP BY  |    |1       |4           |
|1 |??TABLE FULL SCAN|t1  |5       |4           |
=================================================
Outputs & filters:
-------------------------------------
  0 - output([1]), filter([CASE WHEN 1 > 1 THEN T_FUN_COUNT_SUM(T_FUN_COUNT(*)) ELSE 3 END > 1]), rowset=256
      group(nil), agg_func([T_FUN_COUNT_SUM(T_FUN_COUNT(*))])
  1 - output([T_FUN_COUNT(*)]), filter(nil), rowset=256
      access(nil), partitions(p0)
      is_index_back=false, is_global_index=false, 
      range_key([t1.__pk_increment]), range(MIN ; MAX)always true
select 1 from t1 having case when 1 > 1 then count(*) 
                        else 3 end > 1;
+---+
| 1 |
+---+
| 1 |
+---+


== case 11: with scala group by
EXPLAIN select /*+no_rewrite*/ case when 1 then 2 else count(*) end from t1 
                        where c1 > 0 and case when 1 >= 1 then c1 else c2 end > 0
                        having case when 1 > 1 then count(*) else 3 end > 1;
Query Plan
=================================================
|ID|OPERATOR         |NAME|EST.ROWS|EST.TIME(us)|
-------------------------------------------------
|0 |SCALAR GROUP BY  |    |1       |5           |
|1 |??TABLE FULL SCAN|t1  |1       |5           |
=================================================
Outputs & filters:
-------------------------------------
  0 - output([CASE WHEN 1 THEN 2 ELSE T_FUN_COUNT_SUM(T_FUN_COUNT(*)) END]), filter([CASE WHEN 1 > 1 THEN T_FUN_COUNT_SUM(T_FUN_COUNT(*)) ELSE 3 END > 1]), rowset=256
      group(nil), agg_func([T_FUN_COUNT_SUM(T_FUN_COUNT(*))])
  1 - output([T_FUN_COUNT(*)]), filter([t1.c1 > 0], [CASE WHEN 1 >= 1 THEN t1.c1 ELSE t1.c2 END > 0]), rowset=256
      access([t1.c1], [t1.c2]), partitions(p0)
      is_index_back=false, is_global_index=false, filter_before_indexback[false,false], 
      range_key([t1.__pk_increment]), range(MIN ; MAX)always true
select /*+no_rewrite*/ case when 1 then 2 else count(*) end from t1 
                        where c1 > 0 and case when 1 >= 1 then c1 else c2 end > 0
                        having case when 1 > 1 then count(*) else 3 end > 1;
+--------------------------------------+
| case when 1 then 2 else count(*) end |
+--------------------------------------+
|                                    2 |
+--------------------------------------+
EXPLAIN select case when 1 then 2 else count(*) end from t1 
                        where c1 > 0 and case when 1 >= 1 then c1 else c2 end > 0
                        having case when 1 > 1 then count(*) else 3 end > 1;
Query Plan
=================================================
|ID|OPERATOR         |NAME|EST.ROWS|EST.TIME(us)|
-------------------------------------------------
|0 |SCALAR GROUP BY  |    |1       |5           |
|1 |??TABLE FULL SCAN|t1  |1       |5           |
=================================================
Outputs & filters:
-------------------------------------
  0 - output([CASE WHEN 1 THEN 2 ELSE T_FUN_COUNT_SUM(T_FUN_COUNT(*)) END]), filter([CASE WHEN 1 > 1 THEN T_FUN_COUNT_SUM(T_FUN_COUNT(*)) ELSE 3 END > 1]), rowset=256
      group(nil), agg_func([T_FUN_COUNT_SUM(T_FUN_COUNT(*))])
  1 - output([T_FUN_COUNT(*)]), filter([t1.c1 > 0]), rowset=256
      access([t1.c1]), partitions(p0)
      is_index_back=false, is_global_index=false, filter_before_indexback[false], 
      range_key([t1.__pk_increment]), range(MIN ; MAX)always true
select case when 1 then 2 else count(*) end from t1 
                        where c1 > 0 and case when 1 >= 1 then c1 else c2 end > 0
                        having case when 1 > 1 then count(*) else 3 end > 1;
+--------------------------------------+
| case when 1 then 2 else count(*) end |
+--------------------------------------+
|                                    2 |
+--------------------------------------+


== case 12: with scala group by
EXPLAIN select /*+no_rewrite*/ 1 from t1 having case when 1 > 1 then count(*) 
                                             when 2 > 1 then 2
                                             else 3 end > 1;
Query Plan
=================================================
|ID|OPERATOR         |NAME|EST.ROWS|EST.TIME(us)|
-------------------------------------------------
|0 |SCALAR GROUP BY  |    |1       |4           |
|1 |??TABLE FULL SCAN|t1  |5       |4           |
=================================================
Outputs & filters:
-------------------------------------
  0 - output([1]), filter([CASE WHEN 1 > 1 THEN T_FUN_COUNT_SUM(T_FUN_COUNT(*)) WHEN 2 > 1 THEN 2 ELSE 3 END > 1]), rowset=256
      group(nil), agg_func([T_FUN_COUNT_SUM(T_FUN_COUNT(*))])
  1 - output([T_FUN_COUNT(*)]), filter(nil), rowset=256
      access(nil), partitions(p0)
      is_index_back=false, is_global_index=false, 
      range_key([t1.__pk_increment]), range(MIN ; MAX)always true
select /*+no_rewrite*/ 1 from t1 having case when 1 > 1 then count(*) 
                                             when 2 > 1 then 2
                                             else 3 end > 1;
+---+
| 1 |
+---+
| 1 |
+---+
EXPLAIN select 1 from t1 having case when 1 > 1 then count(*) 
                                             when 2 > 1 then 2
                                             else 3 end > 1;
Query Plan
=================================================
|ID|OPERATOR         |NAME|EST.ROWS|EST.TIME(us)|
-------------------------------------------------
|0 |SCALAR GROUP BY  |    |1       |4           |
|1 |??TABLE FULL SCAN|t1  |5       |4           |
=================================================
Outputs & filters:
-------------------------------------
  0 - output([1]), filter([CASE WHEN 1 > 1 THEN T_FUN_COUNT_SUM(T_FUN_COUNT(*)) WHEN 2 > 1 THEN 2 ELSE 3 END > 1]), rowset=256
      group(nil), agg_func([T_FUN_COUNT_SUM(T_FUN_COUNT(*))])
  1 - output([T_FUN_COUNT(*)]), filter(nil), rowset=256
      access(nil), partitions(p0)
      is_index_back=false, is_global_index=false, 
      range_key([t1.__pk_increment]), range(MIN ; MAX)always true
select 1 from t1 having case when 1 > 1 then count(*) 
                                             when 2 > 1 then 2
                                             else 3 end > 1;
+---+
| 1 |
+---+
| 1 |
+---+


== case 13: with shared expr 
EXPLAIN select /*+no_rewrite*/ case when 2 > 1 then c1 else c2 end from t1 where 
                                    case when 2 > 1 then c1 
                                         else c2 
                                    end > 1;
Query Plan
===============================================
|ID|OPERATOR       |NAME|EST.ROWS|EST.TIME(us)|
-----------------------------------------------
|0 |TABLE FULL SCAN|t1  |2       |5           |
===============================================
Outputs & filters:
-------------------------------------
  0 - output([CASE WHEN 2 > 1 THEN t1.c1 ELSE t1.c2 END]), filter([CASE WHEN 2 > 1 THEN t1.c1 ELSE t1.c2 END > 1]), rowset=256
      access([t1.c1], [t1.c2]), partitions(p0)
      is_index_back=false, is_global_index=false, filter_before_indexback[false], 
      range_key([t1.__pk_increment]), range(MIN ; MAX)always true
select /*+no_rewrite*/ case when 2 > 1 then c1 else c2 end from t1 where 
                                    case when 2 > 1 then c1 
                                         else c2 
                                    end > 1;
+-------------------------------------+
| case when 2 > 1 then c1 else c2 end |
+-------------------------------------+
|                                   2 |
|                                   3 |
|                                   4 |
|                                   5 |
+-------------------------------------+
EXPLAIN select case when 2 > 1 then c1 else c2 end from t1 where 
                                    case when 2 > 1 then c1 
                                         else c2 
                                    end > 1;
Query Plan
===============================================
|ID|OPERATOR       |NAME|EST.ROWS|EST.TIME(us)|
-----------------------------------------------
|0 |TABLE FULL SCAN|t1  |1       |5           |
===============================================
Outputs & filters:
-------------------------------------
  0 - output([t1.c1]), filter([t1.c1 > 1]), rowset=256
      access([t1.c1]), partitions(p0)
      is_index_back=false, is_global_index=false, filter_before_indexback[false], 
      range_key([t1.__pk_increment]), range(MIN ; MAX)always true
select case when 2 > 1 then c1 else c2 end from t1 where 
                                    case when 2 > 1 then c1 
                                         else c2 
                                    end > 1;
+-------------------------------------+
| case when 2 > 1 then c1 else c2 end |
+-------------------------------------+
|                                   2 |
|                                   3 |
|                                   4 |
|                                   5 |
+-------------------------------------+


== case 14: with subquery 
EXPLAIN select /*+no_rewrite*/1 from t1 where c1 > 0 and c2 in (
    select /*+no_rewrite*/c2 from t2 where 
    case when 0 > 1 then c1
         when 1 > 2 then c2
         else c3
    end > 0
) and c3 > 0;
Query Plan
=================================================
|ID|OPERATOR         |NAME|EST.ROWS|EST.TIME(us)|
-------------------------------------------------
|0 |SUBPLAN FILTER   |    |1       |9           |
|1 |??TABLE FULL SCAN|t1  |1       |5           |
|2 |??TABLE FULL SCAN|t2  |1       |4           |
=================================================
Outputs & filters:
-------------------------------------
  0 - output([1]), filter([t1.c2 = ANY(subquery(1))]), rowset=256
      exec_params_(nil), onetime_exprs_(nil), init_plan_idxs_([1]), use_batch=false
  1 - output([t1.c2]), filter([t1.c1 > 0], [t1.c3 > 0]), rowset=256
      access([t1.c1], [t1.c2], [t1.c3]), partitions(p0)
      is_index_back=false, is_global_index=false, filter_before_indexback[false,false], 
      range_key([t1.__pk_increment]), range(MIN ; MAX)always true
  2 - output([t2.c2]), filter([CASE WHEN 0 > 1 THEN t2.c1 WHEN 1 > 2 THEN t2.c2 ELSE t2.c3 END > 0]), rowset=256
      access([t2.c1], [t2.c2], [t2.c3]), partitions(p0)
      is_index_back=false, is_global_index=false, filter_before_indexback[false], 
      range_key([t2.__pk_increment]), range(MIN ; MAX)always true
select /*+no_rewrite*/1 from t1 where c1 > 0 and c2 in (
    select /*+no_rewrite*/c2 from t2 where 
    case when 0 > 1 then c1
         when 1 > 2 then c2
         else c3
    end > 0
) and c3 > 0;
+---+
| 1 |
+---+
+---+

EXPLAIN select 1 from t1 where c1 > 0 and c2 in (
    select c2 from t2 where 
    case when 0 > 1 then c1
         when 1 > 2 then c2
         else c3
    end > 0
) and c3 > 0;
Query Plan
====================================================
|ID|OPERATOR           |NAME |EST.ROWS|EST.TIME(us)|
----------------------------------------------------
|0 |HASH SEMI JOIN     |     |1       |8           |
|1 |??TABLE FULL SCAN  |t1   |1       |5           |
|2 |??SUBPLAN SCAN     |VIEW1|1       |4           |
|3 |  ??TABLE FULL SCAN|t2   |1       |4           |
====================================================
Outputs & filters:
-------------------------------------
  0 - output([1]), filter(nil), rowset=256
      equal_conds([t1.c2 = VIEW1.c2]), other_conds(nil)
  1 - output([t1.c2]), filter([t1.c1 > 0], [t1.c3 > 0]), rowset=256
      access([t1.c1], [t1.c2], [t1.c3]), partitions(p0)
      is_index_back=false, is_global_index=false, filter_before_indexback[false,false], 
      range_key([t1.__pk_increment]), range(MIN ; MAX)always true
  2 - output([VIEW1.c2]), filter(nil), rowset=256
      access([VIEW1.c2])
  3 - output([t2.c2]), filter([t2.c3 > 0]), rowset=256
      access([t2.c2], [t2.c3]), partitions(p0)
      is_index_back=false, is_global_index=false, filter_before_indexback[false], 
      range_key([t2.__pk_increment]), range(MIN ; MAX)always true
select 1 from t1 where c1 > 0 and c2 in (
    select c2 from t2 where 
    case when 0 > 1 then c1
         when 1 > 2 then c2
         else c3
    end > 0
) and c3 > 0;
+---+
| 1 |
+---+
+---+


== case 15: with subquery with scala group by
EXPLAIN select /*+no_rewrite*/1 from t1 where c1 > 0 and c2 in (
    select /*+no_rewrite*/c2 from t2 having 
    case when 0 > 1 then count(*) 
         when 1 > 2 then 2
         else 2 
    end > 0
) and c3 > 0;
Query Plan
===================================================
|ID|OPERATOR           |NAME|EST.ROWS|EST.TIME(us)|
---------------------------------------------------
|0 |SUBPLAN FILTER     |    |1       |8           |
|1 |??TABLE FULL SCAN  |t1  |1       |5           |
|2 |??SCALAR GROUP BY  |    |1       |4           |
|3 |  ??TABLE FULL SCAN|t2  |1       |4           |
===================================================
Outputs & filters:
-------------------------------------
  0 - output([1]), filter([t1.c2 = ANY(subquery(1))]), rowset=256
      exec_params_(nil), onetime_exprs_(nil), init_plan_idxs_([1]), use_batch=false
  1 - output([t1.c2]), filter([t1.c1 > 0], [t1.c3 > 0]), rowset=256
      access([t1.c1], [t1.c2], [t1.c3]), partitions(p0)
      is_index_back=false, is_global_index=false, filter_before_indexback[false,false], 
      range_key([t1.__pk_increment]), range(MIN ; MAX)always true
  2 - output([t2.c2]), filter([CASE WHEN 0 > 1 THEN T_FUN_COUNT_SUM(T_FUN_COUNT(*)) WHEN 1 > 2 THEN 2 ELSE 2 END > 0]), rowset=256
      group(nil), agg_func([T_FUN_COUNT_SUM(T_FUN_COUNT(*))])
  3 - output([t2.c2], [T_FUN_COUNT(*)]), filter(nil), rowset=256
      access([t2.c2]), partitions(p0)
      is_index_back=false, is_global_index=false, 
      range_key([t2.__pk_increment]), range(MIN ; MAX)always true
select /*+no_rewrite*/1 from t1 where c1 > 0 and c2 in (
    select /*+no_rewrite*/c2 from t2 having 
    case when 0 > 1 then count(*) 
         when 1 > 2 then 2
         else 2 
    end > 0
) and c3 > 0;
+---+
| 1 |
+---+
+---+

EXPLAIN select 1 from t1 where c1 > 0 and c2 in (
    select c2 from t2 having 
    case when 0 > 1 then count(*) 
         when 1 > 2 then 2
         else 2 
    end > 0
) and c3 > 0;
Query Plan
======================================================
|ID|OPERATOR             |NAME |EST.ROWS|EST.TIME(us)|
------------------------------------------------------
|0 |NESTED-LOOP JOIN     |     |1       |5           |
|1 |??SUBPLAN SCAN       |VIEW1|1       |4           |
|2 |? ??SCALAR GROUP BY  |     |1       |4           |
|3 |?   ??TABLE FULL SCAN|t2   |1       |4           |
|4 |??TABLE FULL SCAN    |t1   |1       |5           |
======================================================
Outputs & filters:
-------------------------------------
  0 - output([1]), filter(nil), rowset=256
      conds([t1.c2 = VIEW1.c2]), nl_params_(nil), use_batch=false
  1 - output([VIEW1.c2]), filter(nil), rowset=256
      access([VIEW1.c2])
  2 - output([t2.c2]), filter([CASE WHEN 0 > 1 THEN T_FUN_COUNT_SUM(T_FUN_COUNT(*)) WHEN 1 > 2 THEN 2 ELSE 2 END > 0]), rowset=256
      group(nil), agg_func([T_FUN_COUNT_SUM(T_FUN_COUNT(*))])
  3 - output([t2.c2], [T_FUN_COUNT(*)]), filter(nil), rowset=256
      access([t2.c2]), partitions(p0)
      is_index_back=false, is_global_index=false, 
      range_key([t2.__pk_increment]), range(MIN ; MAX)always true
  4 - output([t1.c2]), filter([t1.c1 > 0], [t1.c3 > 0]), rowset=256
      access([t1.c1], [t1.c2], [t1.c3]), partitions(p0)
      is_index_back=false, is_global_index=false, filter_before_indexback[false,false], 
      range_key([t1.__pk_increment]), range(MIN ; MAX)always true
select 1 from t1 where c1 > 0 and c2 in (
    select c2 from t2 having 
    case when 0 > 1 then count(*) 
         when 1 > 2 then 2
         else 2 
    end > 0
) and c3 > 0;
+---+
| 1 |
+---+
+---+


== case 16: with scalar static const expr 
EXPLAIN select /*+no_rewrite*/ 1 from t1 where case when 1 > 2 then c1
                            when 2 in (1,2,3) then c2
                            when c1 > 2 then c3 
                            else c4 
                        end > 1;
Query Plan
===============================================
|ID|OPERATOR       |NAME|EST.ROWS|EST.TIME(us)|
-----------------------------------------------
|0 |TABLE FULL SCAN|t1  |2       |5           |
===============================================
Outputs & filters:
-------------------------------------
  0 - output([1]), filter([CASE WHEN 1 > 2 THEN t1.c1 WHEN 2 IN (1, 2, 3) THEN t1.c2 WHEN t1.c1 > 2 THEN t1.c3 ELSE t1.c4 END > 1]), rowset=256
      access([t1.c1], [t1.c2], [t1.c3], [t1.c4]), partitions(p0)
      is_index_back=false, is_global_index=false, filter_before_indexback[false], 
      range_key([t1.__pk_increment]), range(MIN ; MAX)always true
select /*+no_rewrite*/ 1 from t1 where case when 1 > 2 then c1
                            when 2 in (1,2,3) then c2
                            when c1 > 2 then c3 
                            else c4 
                        end > 1;
+---+
| 1 |
+---+
| 1 |
| 1 |
| 1 |
| 1 |
+---+
EXPLAIN select 1 from t1 where case when 1 > 2 then c1
                            when 2 in (1,2,3) then c2
                            when c1 > 2 then c3 
                            else c4 
                        end > 1;
Query Plan
===============================================
|ID|OPERATOR       |NAME|EST.ROWS|EST.TIME(us)|
-----------------------------------------------
|0 |TABLE FULL SCAN|t1  |1       |5           |
===============================================
Outputs & filters:
-------------------------------------
  0 - output([1]), filter([t1.c2 > 1]), rowset=256
      access([t1.c2]), partitions(p0)
      is_index_back=false, is_global_index=false, filter_before_indexback[false], 
      range_key([t1.__pk_increment]), range(MIN ; MAX)always true
select 1 from t1 where case when 1 > 2 then c1
                            when 2 in (1,2,3) then c2
                            when c1 > 2 then c3 
                            else c4 
                        end > 1;
+---+
| 1 |
+---+
| 1 |
| 1 |
| 1 |
| 1 |
+---+


== case 17: debug  
EXPLAIN select /*+no_rewrite*/ 1 from t1 where case when 1 > 2 then c1
                            when 2 > 3 then c2
                            when c1 > 2 then c3 
                            when c2 > 2 then c4
                            when c3 > 2 then c4
                            else c4 
                        end > 1;
Query Plan
===============================================
|ID|OPERATOR       |NAME|EST.ROWS|EST.TIME(us)|
-----------------------------------------------
|0 |TABLE FULL SCAN|t1  |2       |5           |
===============================================
Outputs & filters:
-------------------------------------
  0 - output([1]), filter([CASE WHEN 1 > 2 THEN t1.c1 WHEN 2 > 3 THEN t1.c2 WHEN t1.c1 > 2 THEN t1.c3 WHEN t1.c2 > 2 THEN t1.c4 WHEN t1.c3 > 2 THEN t1.c4 
      ELSE t1.c4 END > 1]), rowset=256
      access([t1.c1], [t1.c2], [t1.c3], [t1.c4]), partitions(p0)
      is_index_back=false, is_global_index=false, filter_before_indexback[false], 
      range_key([t1.__pk_increment]), range(MIN ; MAX)always true
select /*+no_rewrite*/ 1 from t1 where case when 1 > 2 then c1
                            when 2 > 3 then c2
                            when c1 > 2 then c3 
                            when c2 > 2 then c4
                            when c3 > 2 then c4
                            else c4 
                        end > 1;
+---+
| 1 |
+---+
| 1 |
| 1 |
| 1 |
| 1 |
+---+
EXPLAIN select 1 from t1 where case when 1 > 2 then c1
                            when 2 > 3 then c2
                            when c1 > 2 then c3 
                            when c2 > 2 then c4
                            when c3 > 2 then c4
                            else c4 
                        end > 1;
Query Plan
===============================================
|ID|OPERATOR       |NAME|EST.ROWS|EST.TIME(us)|
-----------------------------------------------
|0 |TABLE FULL SCAN|t1  |2       |5           |
===============================================
Outputs & filters:
-------------------------------------
  0 - output([1]), filter([CASE WHEN t1.c1 > 2 THEN t1.c3 WHEN t1.c2 > 2 THEN t1.c4 WHEN t1.c3 > 2 THEN t1.c4 ELSE t1.c4 END > 1]), rowset=256
      access([t1.c1], [t1.c2], [t1.c3], [t1.c4]), partitions(p0)
      is_index_back=false, is_global_index=false, filter_before_indexback[false], 
      range_key([t1.__pk_increment]), range(MIN ; MAX)always true
select 1 from t1 where case when 1 > 2 then c1
                            when 2 > 3 then c2
                            when c1 > 2 then c3 
                            when c2 > 2 then c4
                            when c3 > 2 then c4
                            else c4 
                        end > 1;
+---+
| 1 |
+---+
| 1 |
| 1 |
| 1 |
| 1 |
+---+

set autocommit = 0;
set autocommit = 0;

== case 18: insert SQL 
EXPLAIN insert into is_c1 select /*+no_rewrite*/c1 from t1 where case when 2 > 2 then c1
                                               when 2 > 1 then c2
                                               else c3
                                          end > 1;
Query Plan
==============================================================
|ID|OPERATOR           |NAME           |EST.ROWS|EST.TIME(us)|
--------------------------------------------------------------
|0 |INSERT             |               |2       |22          |
|1 |??SUBPLAN SCAN     |ANONYMOUS_VIEW1|2       |5           |
|2 |  ??TABLE FULL SCAN|t1             |2       |5           |
==============================================================
Outputs & filters:
-------------------------------------
  0 - output(nil), filter(nil)
      columns([{is_c1: ({is_c1: (is_c1.__pk_increment, is_c1.c1)})}]), partitions(p0), 
      column_values([T_HIDDEN_PK], [column_conv(INT,PS:(11,0),NULL,ANONYMOUS_VIEW1.c1)])
  1 - output([ANONYMOUS_VIEW1.c1]), filter(nil), rowset=256
      access([ANONYMOUS_VIEW1.c1])
  2 - output([t1.c1]), filter([CASE WHEN 2 > 2 THEN t1.c1 WHEN 2 > 1 THEN t1.c2 ELSE t1.c3 END > 1]), rowset=256
      access([t1.c1], [t1.c2], [t1.c3]), partitions(p0)
      is_index_back=false, is_global_index=false, filter_before_indexback[false], 
      range_key([t1.__pk_increment]), range(MIN ; MAX)always true
insert into is_c1 select /*+no_rewrite*/c1 from t1 where case when 2 > 2 then c1
                                               when 2 > 1 then c2
                                               else c3
                                          end > 1;
EXPLAIN insert into is_c1 select c1 from t1 where case when 2 > 2 then c1
                                               when 2 > 1 then c2
                                               else c3
                                          end > 1;
Query Plan
==============================================================
|ID|OPERATOR           |NAME           |EST.ROWS|EST.TIME(us)|
--------------------------------------------------------------
|0 |INSERT             |               |1       |14          |
|1 |??SUBPLAN SCAN     |ANONYMOUS_VIEW1|1       |5           |
|2 |  ??TABLE FULL SCAN|t1             |1       |5           |
==============================================================
Outputs & filters:
-------------------------------------
  0 - output(nil), filter(nil)
      columns([{is_c1: ({is_c1: (is_c1.__pk_increment, is_c1.c1)})}]), partitions(p0), 
      column_values([T_HIDDEN_PK], [column_conv(INT,PS:(11,0),NULL,ANONYMOUS_VIEW1.c1)])
  1 - output([ANONYMOUS_VIEW1.c1]), filter(nil), rowset=256
      access([ANONYMOUS_VIEW1.c1])
  2 - output([t1.c1]), filter([t1.c2 > 1]), rowset=256
      access([t1.c1], [t1.c2]), partitions(p0)
      is_index_back=false, is_global_index=false, filter_before_indexback[false], 
      range_key([t1.__pk_increment]), range(MIN ; MAX)always true
insert into is_c1 select c1 from t1 where case when 2 > 2 then c1
                                               when 2 > 1 then c2
                                               else c3
                                          end > 1;
EXPLAIN select * from is_c1;
Query Plan
================================================
|ID|OPERATOR       |NAME |EST.ROWS|EST.TIME(us)|
------------------------------------------------
|0 |TABLE FULL SCAN|is_c1|8       |5           |
================================================
Outputs & filters:
-------------------------------------
  0 - output([is_c1.c1]), filter(nil), rowset=256
      access([is_c1.c1]), partitions(p0)
      is_index_back=false, is_global_index=false, 
      range_key([is_c1.__pk_increment]), range(MIN ; MAX)always true
select * from is_c1;
+------+
| c1   |
+------+
|    2 |
|    3 |
|    4 |
|    5 |
|    2 |
|    3 |
|    4 |
|    5 |
+------+
rollback;


== case 19: insert SQL 
EXPLAIN insert into is_c1 select /*+no_rewrite*/c1 from t1 where case when 1 > NULL then c1
                                               when 2 > 2 then c2
                                               else c3
                                          end > 1;
Query Plan
==============================================================
|ID|OPERATOR           |NAME           |EST.ROWS|EST.TIME(us)|
--------------------------------------------------------------
|0 |INSERT             |               |2       |22          |
|1 |??SUBPLAN SCAN     |ANONYMOUS_VIEW1|2       |5           |
|2 |  ??TABLE FULL SCAN|t1             |2       |5           |
==============================================================
Outputs & filters:
-------------------------------------
  0 - output(nil), filter(nil)
      columns([{is_c1: ({is_c1: (is_c1.__pk_increment, is_c1.c1)})}]), partitions(p0), 
      column_values([T_HIDDEN_PK], [column_conv(INT,PS:(11,0),NULL,ANONYMOUS_VIEW1.c1)])
  1 - output([ANONYMOUS_VIEW1.c1]), filter(nil), rowset=256
      access([ANONYMOUS_VIEW1.c1])
  2 - output([t1.c1]), filter([CASE WHEN 1 > NULL THEN t1.c1 WHEN 2 > 2 THEN t1.c2 ELSE t1.c3 END > 1]), rowset=256
      access([t1.c1], [t1.c2], [t1.c3]), partitions(p0)
      is_index_back=false, is_global_index=false, filter_before_indexback[false], 
      range_key([t1.__pk_increment]), range(MIN ; MAX)always true
insert into is_c1 select /*+no_rewrite*/c1 from t1 where case when 1 > NULL then c1
                                               when 2 > 2 then c2
                                               else c3
                                          end > 1;
EXPLAIN insert into is_c1 select c1 from t1 where case when 1 > NULL then c1
                                               when 2 > 2 then c2
                                               else c3
                                          end > 1;
Query Plan
==============================================================
|ID|OPERATOR           |NAME           |EST.ROWS|EST.TIME(us)|
--------------------------------------------------------------
|0 |INSERT             |               |1       |14          |
|1 |??SUBPLAN SCAN     |ANONYMOUS_VIEW1|1       |5           |
|2 |  ??TABLE FULL SCAN|t1             |1       |5           |
==============================================================
Outputs & filters:
-------------------------------------
  0 - output(nil), filter(nil)
      columns([{is_c1: ({is_c1: (is_c1.__pk_increment, is_c1.c1)})}]), partitions(p0), 
      column_values([T_HIDDEN_PK], [column_conv(INT,PS:(11,0),NULL,ANONYMOUS_VIEW1.c1)])
  1 - output([ANONYMOUS_VIEW1.c1]), filter(nil), rowset=256
      access([ANONYMOUS_VIEW1.c1])
  2 - output([t1.c1]), filter([t1.c3 > 1]), rowset=256
      access([t1.c1], [t1.c3]), partitions(p0)
      is_index_back=false, is_global_index=false, filter_before_indexback[false], 
      range_key([t1.__pk_increment]), range(MIN ; MAX)always true
insert into is_c1 select c1 from t1 where case when 1 > NULL then c1
                                               when 2 > 2 then c2
                                               else c3
                                          end > 1;
EXPLAIN select * from is_c1;
Query Plan
================================================
|ID|OPERATOR       |NAME |EST.ROWS|EST.TIME(us)|
------------------------------------------------
|0 |TABLE FULL SCAN|is_c1|8       |5           |
================================================
Outputs & filters:
-------------------------------------
  0 - output([is_c1.c1]), filter(nil), rowset=256
      access([is_c1.c1]), partitions(p0)
      is_index_back=false, is_global_index=false, 
      range_key([is_c1.__pk_increment]), range(MIN ; MAX)always true
select * from is_c1;
+------+
| c1   |
+------+
|    2 |
|    3 |
|    4 |
|    5 |
|    2 |
|    3 |
|    4 |
|    5 |
+------+
rollback;


== case 20: insert SQL 
EXPLAIN insert into is_c1 select /*+no_rewrite*/c1 from t1 where case when c1 > 1 then 1
                                               when c2 > 2 then 2
                                               else 3
                                          end > 2;
Query Plan
==============================================================
|ID|OPERATOR           |NAME           |EST.ROWS|EST.TIME(us)|
--------------------------------------------------------------
|0 |INSERT             |               |2       |22          |
|1 |??SUBPLAN SCAN     |ANONYMOUS_VIEW1|2       |5           |
|2 |  ??TABLE FULL SCAN|t1             |2       |5           |
==============================================================
Outputs & filters:
-------------------------------------
  0 - output(nil), filter(nil)
      columns([{is_c1: ({is_c1: (is_c1.__pk_increment, is_c1.c1)})}]), partitions(p0), 
      column_values([T_HIDDEN_PK], [column_conv(INT,PS:(11,0),NULL,ANONYMOUS_VIEW1.c1)])
  1 - output([ANONYMOUS_VIEW1.c1]), filter(nil), rowset=256
      access([ANONYMOUS_VIEW1.c1])
  2 - output([t1.c1]), filter([CASE WHEN t1.c1 > 1 THEN 1 WHEN t1.c2 > 2 THEN 2 ELSE 3 END > 2]), rowset=256
      access([t1.c1], [t1.c2]), partitions(p0)
      is_index_back=false, is_global_index=false, filter_before_indexback[false], 
      range_key([t1.__pk_increment]), range(MIN ; MAX)always true
insert into is_c1 select /*+no_rewrite*/c1 from t1 where case when c1 > 1 then 1
                                               when c2 > 2 then 2
                                               else 3
                                          end > 2;
EXPLAIN insert into is_c1 select c1 from t1 where case when c1 > 1 then 1
                                               when c2 > 2 then 2
                                               else 3
                                          end > 2;
Query Plan
==============================================================
|ID|OPERATOR           |NAME           |EST.ROWS|EST.TIME(us)|
--------------------------------------------------------------
|0 |INSERT             |               |2       |19          |
|1 |??SUBPLAN SCAN     |ANONYMOUS_VIEW1|2       |5           |
|2 |  ??TABLE FULL SCAN|t1             |2       |5           |
==============================================================
Outputs & filters:
-------------------------------------
  0 - output(nil), filter(nil)
      columns([{is_c1: ({is_c1: (is_c1.__pk_increment, is_c1.c1)})}]), partitions(p0), 
      column_values([T_HIDDEN_PK], [column_conv(INT,PS:(11,0),NULL,ANONYMOUS_VIEW1.c1)])
  1 - output([ANONYMOUS_VIEW1.c1]), filter(nil), rowset=256
      access([ANONYMOUS_VIEW1.c1])
  2 - output([t1.c1]), filter([lnnvl(cast(t1.c1 > 1, TINYINT(-1, 0)))], [lnnvl(cast(t1.c2 > 2, TINYINT(-1, 0)))]), rowset=256
      access([t1.c1], [t1.c2]), partitions(p0)
      is_index_back=false, is_global_index=false, filter_before_indexback[false,false], 
      range_key([t1.__pk_increment]), range(MIN ; MAX)always true
insert into is_c1 select c1 from t1 where case when c1 > 1 then 1
                                               when c2 > 2 then 2
                                               else 3
                                          end > 2;
EXPLAIN select * from is_c1;
Query Plan
================================================
|ID|OPERATOR       |NAME |EST.ROWS|EST.TIME(us)|
------------------------------------------------
|0 |TABLE FULL SCAN|is_c1|2       |4           |
================================================
Outputs & filters:
-------------------------------------
  0 - output([is_c1.c1]), filter(nil), rowset=256
      access([is_c1.c1]), partitions(p0)
      is_index_back=false, is_global_index=false, 
      range_key([is_c1.__pk_increment]), range(MIN ; MAX)always true
select * from is_c1;
+------+
| c1   |
+------+
|    1 |
|    1 |
+------+
rollback;


== case 21: insert SQL 
EXPLAIN insert into is_c1 select /*+no_rewrite*/c1 from t1 where case when c1 > 1 then 1
                                               when c2 > 2 then 2
                                          end > 2;
Query Plan
==============================================================
|ID|OPERATOR           |NAME           |EST.ROWS|EST.TIME(us)|
--------------------------------------------------------------
|0 |INSERT             |               |2       |22          |
|1 |??SUBPLAN SCAN     |ANONYMOUS_VIEW1|2       |5           |
|2 |  ??TABLE FULL SCAN|t1             |2       |5           |
==============================================================
Outputs & filters:
-------------------------------------
  0 - output(nil), filter(nil)
      columns([{is_c1: ({is_c1: (is_c1.__pk_increment, is_c1.c1)})}]), partitions(p0), 
      column_values([T_HIDDEN_PK], [column_conv(INT,PS:(11,0),NULL,ANONYMOUS_VIEW1.c1)])
  1 - output([ANONYMOUS_VIEW1.c1]), filter(nil), rowset=256
      access([ANONYMOUS_VIEW1.c1])
  2 - output([t1.c1]), filter([CASE WHEN t1.c1 > 1 THEN 1 WHEN t1.c2 > 2 THEN 2 ELSE NULL END > 2]), rowset=256
      access([t1.c1], [t1.c2]), partitions(p0)
      is_index_back=false, is_global_index=false, filter_before_indexback[false], 
      range_key([t1.__pk_increment]), range(MIN ; MAX)always true
insert into is_c1 select /*+no_rewrite*/c1 from t1 where case when c1 > 1 then 1
                                               when c2 > 2 then 2
                                          end > 2;
EXPLAIN insert into is_c1 select c1 from t1 where case when c1 > 1 then 1
                                               when c2 > 2 then 2
                                          end > 2;
Query Plan
==============================================================
|ID|OPERATOR           |NAME           |EST.ROWS|EST.TIME(us)|
--------------------------------------------------------------
|0 |INSERT             |               |5       |43          |
|1 |??SUBPLAN SCAN     |ANONYMOUS_VIEW1|5       |4           |
|2 |  ??TABLE FULL SCAN|t1             |5       |4           |
==============================================================
Outputs & filters:
-------------------------------------
  0 - output(nil), filter(nil)
      columns([{is_c1: ({is_c1: (is_c1.__pk_increment, is_c1.c1)})}]), partitions(p0), 
      column_values([T_HIDDEN_PK], [column_conv(INT,PS:(11,0),NULL,ANONYMOUS_VIEW1.c1)])
  1 - output([ANONYMOUS_VIEW1.c1]), filter(nil), startup_filter([0]), rowset=256
      access([ANONYMOUS_VIEW1.c1])
  2 - output([t1.c1]), filter(nil), rowset=256
      access([t1.c1]), partitions(p0)
      is_index_back=false, is_global_index=false, 
      range_key([t1.__pk_increment]), range(MIN ; MAX)always true
insert into is_c1 select c1 from t1 where case when c1 > 1 then 1
                                               when c2 > 2 then 2
                                          end > 2;
EXPLAIN select * from is_c1;
Query Plan
================================================
|ID|OPERATOR       |NAME |EST.ROWS|EST.TIME(us)|
------------------------------------------------
|0 |TABLE FULL SCAN|is_c1|1       |4           |
================================================
Outputs & filters:
-------------------------------------
  0 - output([is_c1.c1]), filter(nil), rowset=256
      access([is_c1.c1]), partitions(p0)
      is_index_back=false, is_global_index=false, 
      range_key([is_c1.__pk_increment]), range(MIN ; MAX)always true
select * from is_c1;
+------+
| c1   |
+------+
+------+
rollback;


== case 22: update SQL 
EXPLAIN update /*+no_rewrite*/ t1 set t1.c1 = t1.c1 + 1 where case when c1 > 1 then 1
                                                           when c2 > 2 then 2
                                                      end > 2;
Query Plan
=================================================
|ID|OPERATOR         |NAME|EST.ROWS|EST.TIME(us)|
-------------------------------------------------
|0 |UPDATE           |    |2       |41          |
|1 |??TABLE FULL SCAN|t1  |2       |5           |
=================================================
Outputs & filters:
-------------------------------------
  0 - output(nil), filter(nil)
      table_columns([{t1: ({t1: (t1.__pk_increment, t1.c1, t1.c2, t1.c3, t1.c4, t1.c5, t1.c6)})}]),
      update([t1.c1=column_conv(INT,PS:(11,0),NULL,cast(t1.c1 + 1, INT(-1, 0)))])
  1 - output([t1.__pk_increment], [t1.c1], [t1.c2], [t1.c3], [t1.c4], [t1.c5], [t1.c6]), filter([CASE WHEN t1.c1 > 1 THEN 1 WHEN t1.c2 > 2 THEN 2 ELSE NULL 
      END > 2]), rowset=256
      access([t1.__pk_increment], [t1.c1], [t1.c2], [t1.c3], [t1.c4], [t1.c5], [t1.c6]), partitions(p0)
      is_index_back=false, is_global_index=false, filter_before_indexback[false], 
      range_key([t1.__pk_increment]), range(MIN ; MAX)always true
update /*+no_rewrite*/ t1 set t1.c1 = t1.c1 + 1 where case when c1 > 1 then 1
                                                           when c2 > 2 then 2
                                                      end > 2;
EXPLAIN update t1 set t1.c1 = t1.c1 + 1 where case when c1 > 1 then 1
                                           when c2 > 2 then 2
                                      end > 2;
Query Plan
=================================================
|ID|OPERATOR         |NAME|EST.ROWS|EST.TIME(us)|
-------------------------------------------------
|0 |UPDATE           |    |5       |67          |
|1 |??TABLE FULL SCAN|t1  |5       |5           |
=================================================
Outputs & filters:
-------------------------------------
  0 - output(nil), filter(nil)
      table_columns([{t1: ({t1: (t1.__pk_increment, t1.c1, t1.c2, t1.c3, t1.c4, t1.c5, t1.c6)})}]),
      update([t1.c1=column_conv(INT,PS:(11,0),NULL,cast(t1.c1 + 1, INT(-1, 0)))])
  1 - output([t1.__pk_increment], [t1.c1], [t1.c2], [t1.c3], [t1.c4], [t1.c5], [t1.c6]), filter(nil), startup_filter([0]), rowset=256
      access([t1.__pk_increment], [t1.c1], [t1.c2], [t1.c3], [t1.c4], [t1.c5], [t1.c6]), partitions(p0)
      is_index_back=false, is_global_index=false, 
      range_key([t1.__pk_increment]), range(MIN ; MAX)always true
update t1 set t1.c1 = t1.c1 + 1 where case when c1 > 1 then 1
                                           when c2 > 2 then 2
                                      end > 2;
EXPLAIN select * from t1;
Query Plan
===============================================
|ID|OPERATOR       |NAME|EST.ROWS|EST.TIME(us)|
-----------------------------------------------
|0 |TABLE FULL SCAN|t1  |5       |5           |
===============================================
Outputs & filters:
-------------------------------------
  0 - output([t1.c1], [t1.c2], [t1.c3], [t1.c4], [t1.c5], [t1.c6]), filter(nil), rowset=256
      access([t1.c1], [t1.c2], [t1.c3], [t1.c4], [t1.c5], [t1.c6]), partitions(p0)
      is_index_back=false, is_global_index=false, 
      range_key([t1.__pk_increment]), range(MIN ; MAX)always true
select * from t1;
+------+------+------+------+------+------+
| c1   | c2   | c3   | c4   | c5   | c6   |
+------+------+------+------+------+------+
|    1 |    1 |    1 |    1 |    1 |    1 |
|    2 |    2 |    2 |    2 |    2 |    2 |
|    3 |    3 |    3 |    3 |    3 |    3 |
|    4 |    4 |    4 |    4 |    4 |    4 |
|    5 |    5 |    5 |    5 |    5 |    5 |
+------+------+------+------+------+------+
rollback;


== case 23: update SQL 
EXPLAIN update /*+no_rewrite*/ t1 set t1.c1 = t1.c1 + 1 where case when 1 > 1 then c1
                                                           when 2 > 2 then c2
                                                           else c3
                                                      end > 2;
Query Plan
=================================================
|ID|OPERATOR         |NAME|EST.ROWS|EST.TIME(us)|
-------------------------------------------------
|0 |UPDATE           |    |2       |42          |
|1 |??TABLE FULL SCAN|t1  |2       |5           |
=================================================
Outputs & filters:
-------------------------------------
  0 - output(nil), filter(nil)
      table_columns([{t1: ({t1: (t1.__pk_increment, t1.c1, t1.c2, t1.c3, t1.c4, t1.c5, t1.c6)})}]),
      update([t1.c1=column_conv(INT,PS:(11,0),NULL,cast(t1.c1 + 1, INT(-1, 0)))])
  1 - output([t1.__pk_increment], [t1.c1], [t1.c2], [t1.c3], [t1.c4], [t1.c5], [t1.c6]), filter([CASE WHEN 1 > 1 THEN t1.c1 WHEN 2 > 2 THEN t1.c2 ELSE t1.c3 
      END > 2]), rowset=256
      access([t1.__pk_increment], [t1.c1], [t1.c2], [t1.c3], [t1.c4], [t1.c5], [t1.c6]), partitions(p0)
      is_index_back=false, is_global_index=false, filter_before_indexback[false], 
      range_key([t1.__pk_increment]), range(MIN ; MAX)always true
update /*+no_rewrite*/ t1 set t1.c1 = t1.c1 + 1 where case when 1 > 1 then c1
                                                           when 2 > 2 then c2
                                                           else c3
                                                      end > 2;
EXPLAIN update t1 set t1.c1 = t1.c1 + 1 where case when 1 > 1 then c1
                                           when 2 > 2 then c2
                                           else c3
                                      end > 2;
Query Plan
=================================================
|ID|OPERATOR         |NAME|EST.ROWS|EST.TIME(us)|
-------------------------------------------------
|0 |UPDATE           |    |1       |32          |
|1 |??TABLE FULL SCAN|t1  |1       |5           |
=================================================
Outputs & filters:
-------------------------------------
  0 - output(nil), filter(nil)
      table_columns([{t1: ({t1: (t1.__pk_increment, t1.c1, t1.c2, t1.c3, t1.c4, t1.c5, t1.c6)})}]),
      update([t1.c1=column_conv(INT,PS:(11,0),NULL,cast(t1.c1 + 1, INT(-1, 0)))])
  1 - output([t1.__pk_increment], [t1.c1], [t1.c2], [t1.c3], [t1.c4], [t1.c5], [t1.c6]), filter([t1.c3 > 2]), rowset=256
      access([t1.__pk_increment], [t1.c1], [t1.c2], [t1.c3], [t1.c4], [t1.c5], [t1.c6]), partitions(p0)
      is_index_back=false, is_global_index=false, filter_before_indexback[false], 
      range_key([t1.__pk_increment]), range(MIN ; MAX)always true
update t1 set t1.c1 = t1.c1 + 1 where case when 1 > 1 then c1
                                           when 2 > 2 then c2
                                           else c3
                                      end > 2;
EXPLAIN select * from t1;
Query Plan
===============================================
|ID|OPERATOR       |NAME|EST.ROWS|EST.TIME(us)|
-----------------------------------------------
|0 |TABLE FULL SCAN|t1  |5       |5           |
===============================================
Outputs & filters:
-------------------------------------
  0 - output([t1.c1], [t1.c2], [t1.c3], [t1.c4], [t1.c5], [t1.c6]), filter(nil), rowset=256
      access([t1.c1], [t1.c2], [t1.c3], [t1.c4], [t1.c5], [t1.c6]), partitions(p0)
      is_index_back=false, is_global_index=false, 
      range_key([t1.__pk_increment]), range(MIN ; MAX)always true
select * from t1;
+------+------+------+------+------+------+
| c1   | c2   | c3   | c4   | c5   | c6   |
+------+------+------+------+------+------+
|    1 |    1 |    1 |    1 |    1 |    1 |
|    2 |    2 |    2 |    2 |    2 |    2 |
|    5 |    3 |    3 |    3 |    3 |    3 |
|    6 |    4 |    4 |    4 |    4 |    4 |
|    7 |    5 |    5 |    5 |    5 |    5 |
+------+------+------+------+------+------+
rollback;

EXPLAIN delete from t1 where c1 = (select /*+no_rewrite*/ c1 from t3 where case when c1 > 0 then "aaa" else "bbb" end = "aaa" limit 1);
Query Plan
===================================================
|ID|OPERATOR           |NAME|EST.ROWS|EST.TIME(us)|
---------------------------------------------------
|0 |DELETE             |    |1       |20          |
|1 |??SUBPLAN FILTER   |    |1       |9           |
|2 |  ??TABLE FULL SCAN|t1  |1       |5           |
|3 |  ??TABLE FULL SCAN|t3  |1       |5           |
===================================================
Outputs & filters:
-------------------------------------
  0 - output(nil), filter(nil)
      table_columns([{t1: ({t1: (t1.__pk_increment, t1.c1, t1.c2, t1.c3, t1.c4, t1.c5, t1.c6)})}])
  1 - output([t1.__pk_increment], [t1.c1], [t1.c2], [t1.c3], [t1.c4], [t1.c5], [t1.c6]), filter(nil), rowset=256
      exec_params_(nil), onetime_exprs_([subquery(1)(:0)]), init_plan_idxs_(nil), use_batch=false
  2 - output([t1.__pk_increment], [t1.c1], [t1.c2], [t1.c3], [t1.c4], [t1.c5], [t1.c6]), filter([t1.c1 = :0]), rowset=256
      access([t1.__pk_increment], [t1.c1], [t1.c2], [t1.c3], [t1.c4], [t1.c5], [t1.c6]), partitions(p0)
      is_index_back=false, is_global_index=false, filter_before_indexback[false], 
      range_key([t1.__pk_increment]), range(MIN ; MAX)always true
  3 - output([t3.c1]), filter([CASE WHEN t3.c1 > 0 THEN 'aaa' ELSE 'bbb' END = 'aaa']), rowset=256
      access([t3.c1]), partitions(p0)
      limit(1), offset(nil), is_index_back=false, is_global_index=false, filter_before_indexback[false], 
      range_key([t3.__pk_increment]), range(MIN ; MAX)always true
delete from t1 where c1 = (select /*+no_rewrite*/ c1 from t3 where case when c1 > 0 then "aaa" else "bbb" end = "aaa" limit 1);
EXPLAIN delete from t1 where c1 = (select c1 from t3 where case when c1 > 0 then "aaa" else "bbb" end = "aaa" limit 1);
Query Plan
===================================================
|ID|OPERATOR           |NAME|EST.ROWS|EST.TIME(us)|
---------------------------------------------------
|0 |DELETE             |    |1       |20          |
|1 |??SUBPLAN FILTER   |    |1       |9           |
|2 |  ??TABLE FULL SCAN|t1  |1       |5           |
|3 |  ??TABLE FULL SCAN|t3  |1       |4           |
===================================================
Outputs & filters:
-------------------------------------
  0 - output(nil), filter(nil)
      table_columns([{t1: ({t1: (t1.__pk_increment, t1.c1, t1.c2, t1.c3, t1.c4, t1.c5, t1.c6)})}])
  1 - output([t1.__pk_increment], [t1.c1], [t1.c2], [t1.c3], [t1.c4], [t1.c5], [t1.c6]), filter(nil), rowset=256
      exec_params_(nil), onetime_exprs_([subquery(1)(:0)]), init_plan_idxs_(nil), use_batch=false
  2 - output([t1.__pk_increment], [t1.c1], [t1.c2], [t1.c3], [t1.c4], [t1.c5], [t1.c6]), filter([t1.c1 = :0]), rowset=256
      access([t1.__pk_increment], [t1.c1], [t1.c2], [t1.c3], [t1.c4], [t1.c5], [t1.c6]), partitions(p0)
      is_index_back=false, is_global_index=false, filter_before_indexback[false], 
      range_key([t1.__pk_increment]), range(MIN ; MAX)always true
  3 - output([t3.c1]), filter([t3.c1 > 0]), rowset=256
      access([t3.c1]), partitions(p0)
      limit(1), offset(nil), is_index_back=false, is_global_index=false, filter_before_indexback[false], 
      range_key([t3.__pk_increment]), range(MIN ; MAX)always true
delete from t1 where c1 = (select c1 from t3 where case when c1 > 0 then "aaa" else "bbb" end = "aaa" limit 1);
EXPLAIN select * from t1;
Query Plan
===============================================
|ID|OPERATOR       |NAME|EST.ROWS|EST.TIME(us)|
-----------------------------------------------
|0 |TABLE FULL SCAN|t1  |5       |5           |
===============================================
Outputs & filters:
-------------------------------------
  0 - output([t1.c1], [t1.c2], [t1.c3], [t1.c4], [t1.c5], [t1.c6]), filter(nil), rowset=256
      access([t1.c1], [t1.c2], [t1.c3], [t1.c4], [t1.c5], [t1.c6]), partitions(p0)
      is_index_back=false, is_global_index=false, 
      range_key([t1.__pk_increment]), range(MIN ; MAX)always true
select * from t1;
+------+------+------+------+------+------+
| c1   | c2   | c3   | c4   | c5   | c6   |
+------+------+------+------+------+------+
|    2 |    2 |    2 |    2 |    2 |    2 |
|    3 |    3 |    3 |    3 |    3 |    3 |
|    4 |    4 |    4 |    4 |    4 |    4 |
|    5 |    5 |    5 |    5 |    5 |    5 |
+------+------+------+------+------+------+
rollback;

set autocommit = 1;

**************************** convert then exprs test **************************** 

== case 1
EXPLAIN select /*+no_rewrite*/* from t1 where case when c1 > 0 then 0 else 1 end > 0;
Query Plan
===============================================
|ID|OPERATOR       |NAME|EST.ROWS|EST.TIME(us)|
-----------------------------------------------
|0 |TABLE FULL SCAN|t1  |2       |5           |
===============================================
Outputs & filters:
-------------------------------------
  0 - output([t1.c1], [t1.c2], [t1.c3], [t1.c4], [t1.c5], [t1.c6]), filter([CASE WHEN t1.c1 > 0 THEN 0 ELSE 1 END > 0]), rowset=256
      access([t1.c1], [t1.c2], [t1.c3], [t1.c4], [t1.c5], [t1.c6]), partitions(p0)
      is_index_back=false, is_global_index=false, filter_before_indexback[false], 
      range_key([t1.__pk_increment]), range(MIN ; MAX)always true
select /*+no_rewrite*/* from t1 where case when c1 > 0 then 0 else 1 end > 0;
+------+------+------+------+------+------+
| c1   | c2   | c3   | c4   | c5   | c6   |
+------+------+------+------+------+------+
+------+------+------+------+------+------+
EXPLAIN select * from t1 where case when c1 > 0 then 0 else 1 end > 0;
Query Plan
===============================================
|ID|OPERATOR       |NAME|EST.ROWS|EST.TIME(us)|
-----------------------------------------------
|0 |TABLE FULL SCAN|t1  |3       |5           |
===============================================
Outputs & filters:
-------------------------------------
  0 - output([t1.c1], [t1.c2], [t1.c3], [t1.c4], [t1.c5], [t1.c6]), filter([lnnvl(cast(t1.c1 > 0, TINYINT(-1, 0)))]), rowset=256
      access([t1.c1], [t1.c2], [t1.c3], [t1.c4], [t1.c5], [t1.c6]), partitions(p0)
      is_index_back=false, is_global_index=false, filter_before_indexback[false], 
      range_key([t1.__pk_increment]), range(MIN ; MAX)always true
select * from t1 where case when c1 > 0 then 0 else 1 end > 0;
+------+------+------+------+------+------+
| c1   | c2   | c3   | c4   | c5   | c6   |
+------+------+------+------+------+------+
+------+------+------+------+------+------+


== case 2
EXPLAIN select /*+no_rewrite*/* from t1 where case when c1 > 0 then 0 else 1 end > 1;
Query Plan
===============================================
|ID|OPERATOR       |NAME|EST.ROWS|EST.TIME(us)|
-----------------------------------------------
|0 |TABLE FULL SCAN|t1  |2       |5           |
===============================================
Outputs & filters:
-------------------------------------
  0 - output([t1.c1], [t1.c2], [t1.c3], [t1.c4], [t1.c5], [t1.c6]), filter([CASE WHEN t1.c1 > 0 THEN 0 ELSE 1 END > 1]), rowset=256
      access([t1.c1], [t1.c2], [t1.c3], [t1.c4], [t1.c5], [t1.c6]), partitions(p0)
      is_index_back=false, is_global_index=false, filter_before_indexback[false], 
      range_key([t1.__pk_increment]), range(MIN ; MAX)always true
select /*+no_rewrite*/* from t1 where case when c1 > 0 then 0 else 1 end > 1;
+------+------+------+------+------+------+
| c1   | c2   | c3   | c4   | c5   | c6   |
+------+------+------+------+------+------+
+------+------+------+------+------+------+
EXPLAIN select * from t1 where case when c1 > 0 then 0 else 1 end > 1;
Query Plan
===============================================
|ID|OPERATOR       |NAME|EST.ROWS|EST.TIME(us)|
-----------------------------------------------
|0 |TABLE FULL SCAN|t1  |5       |5           |
===============================================
Outputs & filters:
-------------------------------------
  0 - output([t1.c1], [t1.c2], [t1.c3], [t1.c4], [t1.c5], [t1.c6]), filter(nil), startup_filter([0]), rowset=256
      access([t1.c1], [t1.c2], [t1.c3], [t1.c4], [t1.c5], [t1.c6]), partitions(p0)
      is_index_back=false, is_global_index=false, 
      range_key([t1.__pk_increment]), range(MIN ; MAX)always true
select * from t1 where case when c1 > 0 then 0 else 1 end > 1;
+------+------+------+------+------+------+
| c1   | c2   | c3   | c4   | c5   | c6   |
+------+------+------+------+------+------+
+------+------+------+------+------+------+


== case 3
EXPLAIN select /*+no_rewrite*/ * from t1 where case when c1 > 0 then 0 
							when c2 > 0 then 0 
							else 1 
					   end > 1;
Query Plan
===============================================
|ID|OPERATOR       |NAME|EST.ROWS|EST.TIME(us)|
-----------------------------------------------
|0 |TABLE FULL SCAN|t1  |2       |5           |
===============================================
Outputs & filters:
-------------------------------------
  0 - output([t1.c1], [t1.c2], [t1.c3], [t1.c4], [t1.c5], [t1.c6]), filter([CASE WHEN t1.c1 > 0 THEN 0 WHEN t1.c2 > 0 THEN 0 ELSE 1 END > 1]), rowset=256
      access([t1.c1], [t1.c2], [t1.c3], [t1.c4], [t1.c5], [t1.c6]), partitions(p0)
      is_index_back=false, is_global_index=false, filter_before_indexback[false], 
      range_key([t1.__pk_increment]), range(MIN ; MAX)always true
select /*+no_rewrite*/ * from t1 where case when c1 > 0 then 0 
							when c2 > 0 then 0 
							else 1 
					   end > 1;
+------+------+------+------+------+------+
| c1   | c2   | c3   | c4   | c5   | c6   |
+------+------+------+------+------+------+
+------+------+------+------+------+------+
EXPLAIN select * from t1 where case when c1 > 0 then 0 
							when c2 > 0 then 0 
							else 1 
					   end > 1;
Query Plan
===============================================
|ID|OPERATOR       |NAME|EST.ROWS|EST.TIME(us)|
-----------------------------------------------
|0 |TABLE FULL SCAN|t1  |5       |5           |
===============================================
Outputs & filters:
-------------------------------------
  0 - output([t1.c1], [t1.c2], [t1.c3], [t1.c4], [t1.c5], [t1.c6]), filter(nil), startup_filter([0]), rowset=256
      access([t1.c1], [t1.c2], [t1.c3], [t1.c4], [t1.c5], [t1.c6]), partitions(p0)
      is_index_back=false, is_global_index=false, 
      range_key([t1.__pk_increment]), range(MIN ; MAX)always true
select * from t1 where case when c1 > 0 then 0 
							when c2 > 0 then 0 
							else 1 
					   end > 1;
+------+------+------+------+------+------+
| c1   | c2   | c3   | c4   | c5   | c6   |
+------+------+------+------+------+------+
+------+------+------+------+------+------+


== case 4
EXPLAIN select /*+no_rewrite*/ * from t1 where c1 > 0 and c2 > 0 and 
                            case when c1 > 0 then 1 
                                 when c2 > 0 then 2
                                 else 0 
                            end > 1;
Query Plan
===============================================
|ID|OPERATOR       |NAME|EST.ROWS|EST.TIME(us)|
-----------------------------------------------
|0 |TABLE FULL SCAN|t1  |1       |5           |
===============================================
Outputs & filters:
-------------------------------------
  0 - output([t1.c1], [t1.c2], [t1.c3], [t1.c4], [t1.c5], [t1.c6]), filter([t1.c1 > 0], [t1.c2 > 0], [CASE WHEN t1.c1 > 0 THEN 1 WHEN t1.c2 > 0 THEN 2 ELSE 
      0 END > 1]), rowset=256
      access([t1.c1], [t1.c2], [t1.c3], [t1.c4], [t1.c5], [t1.c6]), partitions(p0)
      is_index_back=false, is_global_index=false, filter_before_indexback[false,false,false], 
      range_key([t1.__pk_increment]), range(MIN ; MAX)always true
select /*+no_rewrite*/ * from t1 where c1 > 0 and c2 > 0 and 
                            case when c1 > 0 then 1 
                                 when c2 > 0 then 2
                                 else 0 
                            end > 1;
+------+------+------+------+------+------+
| c1   | c2   | c3   | c4   | c5   | c6   |
+------+------+------+------+------+------+
+------+------+------+------+------+------+
EXPLAIN select * from t1 where c1 > 0 and c2 > 0 and 
                            case when c1 > 0 then 1 
                                 when c2 > 0 then 2
                                 else 0 
                            end > 1;
Query Plan
===============================================
|ID|OPERATOR       |NAME|EST.ROWS|EST.TIME(us)|
-----------------------------------------------
|0 |TABLE FULL SCAN|t1  |1       |5           |
===============================================
Outputs & filters:
-------------------------------------
  0 - output([t1.c1], [t1.c2], [t1.c3], [t1.c4], [t1.c5], [t1.c6]), filter([t1.c1 > 0], [t1.c2 > 0], [lnnvl(cast(t1.c1 > 0, TINYINT(-1, 0)))]), rowset=256
      access([t1.c1], [t1.c2], [t1.c3], [t1.c4], [t1.c5], [t1.c6]), partitions(p0)
      is_index_back=false, is_global_index=false, filter_before_indexback[false,false,false], 
      range_key([t1.__pk_increment]), range(MIN ; MAX)always true
select * from t1 where c1 > 0 and c2 > 0 and 
                            case when c1 > 0 then 1 
                                 when c2 > 0 then 2
                                 else 0 
                            end > 1;
+------+------+------+------+------+------+
| c1   | c2   | c3   | c4   | c5   | c6   |
+------+------+------+------+------+------+
+------+------+------+------+------+------+


== case 5
EXPLAIN select /*+no_rewrite*/ * from t1 where c1 > 0 or (c2 > 0 and 
                                case when c1 > 0 then 1 
                                    when c2 > 0 then 2
                                    else 0 
                                end > 1);
Query Plan
===============================================
|ID|OPERATOR       |NAME|EST.ROWS|EST.TIME(us)|
-----------------------------------------------
|0 |TABLE FULL SCAN|t1  |1       |5           |
===============================================
Outputs & filters:
-------------------------------------
  0 - output([t1.c1], [t1.c2], [t1.c3], [t1.c4], [t1.c5], [t1.c6]), filter([t1.c1 > 0 OR t1.c2 > 0 AND CASE WHEN t1.c1 > 0 THEN 1 WHEN t1.c2 > 0 THEN 2 
      ELSE 0 END > 1]), rowset=256
      access([t1.c1], [t1.c2], [t1.c3], [t1.c4], [t1.c5], [t1.c6]), partitions(p0)
      is_index_back=false, is_global_index=false, filter_before_indexback[false], 
      range_key([t1.__pk_increment]), range(MIN ; MAX)always true
select /*+no_rewrite*/ * from t1 where c1 > 0 or (c2 > 0 and 
                                case when c1 > 0 then 1 
                                    when c2 > 0 then 2
                                    else 0 
                                end > 1);
+------+------+------+------+------+------+
| c1   | c2   | c3   | c4   | c5   | c6   |
+------+------+------+------+------+------+
|    1 |    1 |    1 |    1 |    1 |    1 |
|    2 |    2 |    2 |    2 |    2 |    2 |
|    3 |    3 |    3 |    3 |    3 |    3 |
|    4 |    4 |    4 |    4 |    4 |    4 |
|    5 |    5 |    5 |    5 |    5 |    5 |
+------+------+------+------+------+------+
EXPLAIN select * from t1 where c1 > 0 or (c2 > 0 and 
                                case when c1 > 0 then 1 
                                    when c2 > 0 then 2
                                    else 0 
                                end > 1);
Query Plan
===============================================
|ID|OPERATOR       |NAME|EST.ROWS|EST.TIME(us)|
-----------------------------------------------
|0 |TABLE FULL SCAN|t1  |1       |5           |
===============================================
Outputs & filters:
-------------------------------------
  0 - output([t1.c1], [t1.c2], [t1.c3], [t1.c4], [t1.c5], [t1.c6]), filter([t1.c1 > 0 OR t1.c2 > 0 AND CASE WHEN t1.c1 > 0 THEN 1 WHEN t1.c2 > 0 THEN 2 
      ELSE 0 END > 1]), rowset=256
      access([t1.c1], [t1.c2], [t1.c3], [t1.c4], [t1.c5], [t1.c6]), partitions(p0)
      is_index_back=false, is_global_index=false, filter_before_indexback[false], 
      range_key([t1.__pk_increment]), range(MIN ; MAX)always true
select * from t1 where c1 > 0 or (c2 > 0 and 
                                case when c1 > 0 then 1 
                                    when c2 > 0 then 2
                                    else 0 
                                end > 1);
+------+------+------+------+------+------+
| c1   | c2   | c3   | c4   | c5   | c6   |
+------+------+------+------+------+------+
|    1 |    1 |    1 |    1 |    1 |    1 |
|    2 |    2 |    2 |    2 |    2 |    2 |
|    3 |    3 |    3 |    3 |    3 |    3 |
|    4 |    4 |    4 |    4 |    4 |    4 |
|    5 |    5 |    5 |    5 |    5 |    5 |
+------+------+------+------+------+------+


== case 6: test with scala group by
EXPLAIN select /*+no_rewrite*/ case when c1 > 0 then 1 else count(*) end > 2 from t1;
Query Plan
=================================================
|ID|OPERATOR         |NAME|EST.ROWS|EST.TIME(us)|
-------------------------------------------------
|0 |SCALAR GROUP BY  |    |1       |5           |
|1 |??TABLE FULL SCAN|t1  |5       |4           |
=================================================
Outputs & filters:
-------------------------------------
  0 - output([CASE WHEN t1.c1 > 0 THEN 1 ELSE T_FUN_COUNT_SUM(T_FUN_COUNT(*)) END > 2]), filter(nil), rowset=256
      group(nil), agg_func([T_FUN_COUNT_SUM(T_FUN_COUNT(*))])
  1 - output([t1.c1], [T_FUN_COUNT(*)]), filter(nil), rowset=256
      access([t1.c1]), partitions(p0)
      is_index_back=false, is_global_index=false, 
      range_key([t1.__pk_increment]), range(MIN ; MAX)always true
select /*+no_rewrite*/ case when c1 > 0 then 1 else count(*) end > 2 from t1;
+-----------------------------------------------+
| case when c1 > 0 then 1 else count(*) end > 2 |
+-----------------------------------------------+
|                                             0 |
+-----------------------------------------------+
EXPLAIN select case when c1 > 0 then 1 else count(*) end > 2 from t1;
Query Plan
=================================================
|ID|OPERATOR         |NAME|EST.ROWS|EST.TIME(us)|
-------------------------------------------------
|0 |SCALAR GROUP BY  |    |1       |5           |
|1 |??TABLE FULL SCAN|t1  |5       |4           |
=================================================
Outputs & filters:
-------------------------------------
  0 - output([CASE WHEN t1.c1 > 0 THEN 1 ELSE T_FUN_COUNT_SUM(T_FUN_COUNT(*)) END > 2]), filter(nil), rowset=256
      group(nil), agg_func([T_FUN_COUNT_SUM(T_FUN_COUNT(*))])
  1 - output([t1.c1], [T_FUN_COUNT(*)]), filter(nil), rowset=256
      access([t1.c1]), partitions(p0)
      is_index_back=false, is_global_index=false, 
      range_key([t1.__pk_increment]), range(MIN ; MAX)always true
select case when c1 > 0 then 1 else count(*) end > 2 from t1;
+-----------------------------------------------+
| case when c1 > 0 then 1 else count(*) end > 2 |
+-----------------------------------------------+
|                                             0 |
+-----------------------------------------------+


== case 7: test with scala group by
EXPLAIN select /*+no_rewrite*/ c2 > 0 and case when c1 > 0 then 1 else count(*) end > 2 from t1;
Query Plan
=================================================
|ID|OPERATOR         |NAME|EST.ROWS|EST.TIME(us)|
-------------------------------------------------
|0 |SCALAR GROUP BY  |    |1       |5           |
|1 |??TABLE FULL SCAN|t1  |5       |5           |
=================================================
Outputs & filters:
-------------------------------------
  0 - output([t1.c2 > 0 AND CASE WHEN t1.c1 > 0 THEN 1 ELSE T_FUN_COUNT_SUM(T_FUN_COUNT(*)) END > 2]), filter(nil), rowset=256
      group(nil), agg_func([T_FUN_COUNT_SUM(T_FUN_COUNT(*))])
  1 - output([t1.c2], [t1.c1], [T_FUN_COUNT(*)]), filter(nil), rowset=256
      access([t1.c2], [t1.c1]), partitions(p0)
      is_index_back=false, is_global_index=false, 
      range_key([t1.__pk_increment]), range(MIN ; MAX)always true
select /*+no_rewrite*/ c2 > 0 and case when c1 > 0 then 1 else count(*) end > 2 from t1;
+----------------------------------------------------------+
| c2 > 0 and case when c1 > 0 then 1 else count(*) end > 2 |
+----------------------------------------------------------+
|                                                        0 |
+----------------------------------------------------------+
EXPLAIN select c2 > 0 and case when c1 > 0 then 1 else count(*) end > 2 from t1;
Query Plan
=================================================
|ID|OPERATOR         |NAME|EST.ROWS|EST.TIME(us)|
-------------------------------------------------
|0 |SCALAR GROUP BY  |    |1       |5           |
|1 |??TABLE FULL SCAN|t1  |5       |5           |
=================================================
Outputs & filters:
-------------------------------------
  0 - output([t1.c2 > 0 AND CASE WHEN t1.c1 > 0 THEN 1 ELSE T_FUN_COUNT_SUM(T_FUN_COUNT(*)) END > 2]), filter(nil), rowset=256
      group(nil), agg_func([T_FUN_COUNT_SUM(T_FUN_COUNT(*))])
  1 - output([t1.c2], [t1.c1], [T_FUN_COUNT(*)]), filter(nil), rowset=256
      access([t1.c2], [t1.c1]), partitions(p0)
      is_index_back=false, is_global_index=false, 
      range_key([t1.__pk_increment]), range(MIN ; MAX)always true
select c2 > 0 and case when c1 > 0 then 1 else count(*) end > 2 from t1;
+----------------------------------------------------------+
| c2 > 0 and case when c1 > 0 then 1 else count(*) end > 2 |
+----------------------------------------------------------+
|                                                        0 |
+----------------------------------------------------------+


== case 8: test with scala group by
EXPLAIN select /*+no_rewrite*/ 1 from t1 having case when 1 then 1 else count(*) end > 2;
Query Plan
=================================================
|ID|OPERATOR         |NAME|EST.ROWS|EST.TIME(us)|
-------------------------------------------------
|0 |SCALAR GROUP BY  |    |1       |4           |
|1 |??TABLE FULL SCAN|t1  |5       |4           |
=================================================
Outputs & filters:
-------------------------------------
  0 - output([1]), filter([CASE WHEN 1 THEN 1 ELSE T_FUN_COUNT_SUM(T_FUN_COUNT(*)) END > 2]), rowset=256
      group(nil), agg_func([T_FUN_COUNT_SUM(T_FUN_COUNT(*))])
  1 - output([T_FUN_COUNT(*)]), filter(nil), rowset=256
      access(nil), partitions(p0)
      is_index_back=false, is_global_index=false, 
      range_key([t1.__pk_increment]), range(MIN ; MAX)always true
select /*+no_rewrite*/ 1 from t1 having case when 1 then 1 else count(*) end > 2;
+---+
| 1 |
+---+
+---+
EXPLAIN select 1 from t1 having case when 1 then 1 else count(*) end > 2;
Query Plan
=================================================
|ID|OPERATOR         |NAME|EST.ROWS|EST.TIME(us)|
-------------------------------------------------
|0 |SCALAR GROUP BY  |    |1       |4           |
|1 |??TABLE FULL SCAN|t1  |5       |4           |
=================================================
Outputs & filters:
-------------------------------------
  0 - output([1]), filter([CASE WHEN 1 THEN 1 ELSE T_FUN_COUNT_SUM(T_FUN_COUNT(*)) END > 2]), rowset=256
      group(nil), agg_func([T_FUN_COUNT_SUM(T_FUN_COUNT(*))])
  1 - output([T_FUN_COUNT(*)]), filter(nil), rowset=256
      access(nil), partitions(p0)
      is_index_back=false, is_global_index=false, 
      range_key([t1.__pk_increment]), range(MIN ; MAX)always true
select 1 from t1 having case when 1 then 1 else count(*) end > 2;
+---+
| 1 |
+---+
+---+


== case 9: test with scala group by
EXPLAIN select 1 from t1 where c1 > 0 or (c2 > 0 and 
                                    case when c1 > 0 then 1 
                                        when c2 > 0 then 2
                                        else 0 
                                    end > 1)
                    having case when 1 then 1 else count(*) end > 2;
Query Plan
=================================================
|ID|OPERATOR         |NAME|EST.ROWS|EST.TIME(us)|
-------------------------------------------------
|0 |SCALAR GROUP BY  |    |1       |5           |
|1 |??TABLE FULL SCAN|t1  |1       |5           |
=================================================
Outputs & filters:
-------------------------------------
  0 - output([1]), filter([CASE WHEN 1 THEN 1 ELSE T_FUN_COUNT_SUM(T_FUN_COUNT(*)) END > 2]), rowset=256
      group(nil), agg_func([T_FUN_COUNT_SUM(T_FUN_COUNT(*))])
  1 - output([T_FUN_COUNT(*)]), filter([t1.c1 > 0 OR t1.c2 > 0 AND CASE WHEN t1.c1 > 0 THEN 1 WHEN t1.c2 > 0 THEN 2 ELSE 0 END > 1]), rowset=256
      access([t1.c1], [t1.c2]), partitions(p0)
      is_index_back=false, is_global_index=false, filter_before_indexback[false], 
      range_key([t1.__pk_increment]), range(MIN ; MAX)always true
select 1 from t1 where c1 > 0 or (c2 > 0 and 
                                    case when c1 > 0 then 1 
                                        when c2 > 0 then 2
                                        else 0 
                                    end > 1)
                    having case when 1 then 1 else count(*) end > 2;
+---+
| 1 |
+---+
+---+
EXPLAIN select /*+no_rewrite*/ 1 from t1 where c1 > 0 or (c2 > 0 and 
                                    case when c1 > 0 then 1 
                                        when c2 > 0 then 2
                                        else 0 
                                    end > 1)
                    having case when 1 then 1 else count(*) end > 2;
Query Plan
=================================================
|ID|OPERATOR         |NAME|EST.ROWS|EST.TIME(us)|
-------------------------------------------------
|0 |SCALAR GROUP BY  |    |1       |5           |
|1 |??TABLE FULL SCAN|t1  |1       |5           |
=================================================
Outputs & filters:
-------------------------------------
  0 - output([1]), filter([CASE WHEN 1 THEN 1 ELSE T_FUN_COUNT_SUM(T_FUN_COUNT(*)) END > 2]), rowset=256
      group(nil), agg_func([T_FUN_COUNT_SUM(T_FUN_COUNT(*))])
  1 - output([T_FUN_COUNT(*)]), filter([t1.c1 > 0 OR t1.c2 > 0 AND CASE WHEN t1.c1 > 0 THEN 1 WHEN t1.c2 > 0 THEN 2 ELSE 0 END > 1]), rowset=256
      access([t1.c1], [t1.c2]), partitions(p0)
      is_index_back=false, is_global_index=false, filter_before_indexback[false], 
      range_key([t1.__pk_increment]), range(MIN ; MAX)always true
select /*+no_rewrite*/ 1 from t1 where c1 > 0 or (c2 > 0 and 
                                    case when c1 > 0 then 1 
                                        when c2 > 0 then 2
                                        else 0 
                                    end > 1)
                    having case when 1 then 1 else count(*) end > 2;
+---+
| 1 |
+---+
+---+


== case 10: can't be rewrite 
EXPLAIN select /*+no_rewrite*/ * from t1 where case when c1 > 0 then 1 else 2 end > 0;
Query Plan
===============================================
|ID|OPERATOR       |NAME|EST.ROWS|EST.TIME(us)|
-----------------------------------------------
|0 |TABLE FULL SCAN|t1  |2       |5           |
===============================================
Outputs & filters:
-------------------------------------
  0 - output([t1.c1], [t1.c2], [t1.c3], [t1.c4], [t1.c5], [t1.c6]), filter([CASE WHEN t1.c1 > 0 THEN 1 ELSE 2 END > 0]), rowset=256
      access([t1.c1], [t1.c2], [t1.c3], [t1.c4], [t1.c5], [t1.c6]), partitions(p0)
      is_index_back=false, is_global_index=false, filter_before_indexback[false], 
      range_key([t1.__pk_increment]), range(MIN ; MAX)always true
select /*+no_rewrite*/ * from t1 where case when c1 > 0 then 1 else 2 end > 0;
+------+------+------+------+------+------+
| c1   | c2   | c3   | c4   | c5   | c6   |
+------+------+------+------+------+------+
|    1 |    1 |    1 |    1 |    1 |    1 |
|    2 |    2 |    2 |    2 |    2 |    2 |
|    3 |    3 |    3 |    3 |    3 |    3 |
|    4 |    4 |    4 |    4 |    4 |    4 |
|    5 |    5 |    5 |    5 |    5 |    5 |
+------+------+------+------+------+------+
EXPLAIN select * from t1 where case when c1 > 0 then 1 else 2 end > 0;
Query Plan
===============================================
|ID|OPERATOR       |NAME|EST.ROWS|EST.TIME(us)|
-----------------------------------------------
|0 |TABLE FULL SCAN|t1  |2       |5           |
===============================================
Outputs & filters:
-------------------------------------
  0 - output([t1.c1], [t1.c2], [t1.c3], [t1.c4], [t1.c5], [t1.c6]), filter([CASE WHEN t1.c1 > 0 THEN 1 ELSE 2 END > 0]), rowset=256
      access([t1.c1], [t1.c2], [t1.c3], [t1.c4], [t1.c5], [t1.c6]), partitions(p0)
      is_index_back=false, is_global_index=false, filter_before_indexback[false], 
      range_key([t1.__pk_increment]), range(MIN ; MAX)always true
select * from t1 where case when c1 > 0 then 1 else 2 end > 0;
+------+------+------+------+------+------+
| c1   | c2   | c3   | c4   | c5   | c6   |
+------+------+------+------+------+------+
|    1 |    1 |    1 |    1 |    1 |    1 |
|    2 |    2 |    2 |    2 |    2 |    2 |
|    3 |    3 |    3 |    3 |    3 |    3 |
|    4 |    4 |    4 |    4 |    4 |    4 |
|    5 |    5 |    5 |    5 |    5 |    5 |
+------+------+------+------+------+------+


== case 11: can't be rewrite 
EXPLAIN select /*+no_rewrite*/ * from t1 where case when c1 > 0 then 1 
                          	when c2 > 0 then 2
                      	    when c3 > 0 then 3
                          	else 4
                       end > 1;
Query Plan
===============================================
|ID|OPERATOR       |NAME|EST.ROWS|EST.TIME(us)|
-----------------------------------------------
|0 |TABLE FULL SCAN|t1  |2       |5           |
===============================================
Outputs & filters:
-------------------------------------
  0 - output([t1.c1], [t1.c2], [t1.c3], [t1.c4], [t1.c5], [t1.c6]), filter([CASE WHEN t1.c1 > 0 THEN 1 WHEN t1.c2 > 0 THEN 2 WHEN t1.c3 > 0 THEN 3 ELSE 
      4 END > 1]), rowset=256
      access([t1.c1], [t1.c2], [t1.c3], [t1.c4], [t1.c5], [t1.c6]), partitions(p0)
      is_index_back=false, is_global_index=false, filter_before_indexback[false], 
      range_key([t1.__pk_increment]), range(MIN ; MAX)always true
select /*+no_rewrite*/ * from t1 where case when c1 > 0 then 1 
                          	when c2 > 0 then 2
                      	    when c3 > 0 then 3
                          	else 4
                       end > 1;
+------+------+------+------+------+------+
| c1   | c2   | c3   | c4   | c5   | c6   |
+------+------+------+------+------+------+
+------+------+------+------+------+------+
EXPLAIN select * from t1 where case when c1 > 0 then 1 
                          	when c2 > 0 then 2
                      	    when c3 > 0 then 3
                          	else 4
                       end > 1;
Query Plan
===============================================
|ID|OPERATOR       |NAME|EST.ROWS|EST.TIME(us)|
-----------------------------------------------
|0 |TABLE FULL SCAN|t1  |2       |5           |
===============================================
Outputs & filters:
-------------------------------------
  0 - output([t1.c1], [t1.c2], [t1.c3], [t1.c4], [t1.c5], [t1.c6]), filter([CASE WHEN t1.c1 > 0 THEN 1 WHEN t1.c2 > 0 THEN 2 WHEN t1.c3 > 0 THEN 3 ELSE 
      4 END > 1]), rowset=256
      access([t1.c1], [t1.c2], [t1.c3], [t1.c4], [t1.c5], [t1.c6]), partitions(p0)
      is_index_back=false, is_global_index=false, filter_before_indexback[false], 
      range_key([t1.__pk_increment]), range(MIN ; MAX)always true
select * from t1 where case when c1 > 0 then 1 
                          	when c2 > 0 then 2
                      	    when c3 > 0 then 3
                          	else 4
                       end > 1;
+------+------+------+------+------+------+
| c1   | c2   | c3   | c4   | c5   | c6   |
+------+------+------+------+------+------+
+------+------+------+------+------+------+

== case 12: can't be rewrite 
EXPLAIN select /*+no_rewrite*/ * from t1 where case when c1 > 0 then c1 else c2 end > 0;
Query Plan
===============================================
|ID|OPERATOR       |NAME|EST.ROWS|EST.TIME(us)|
-----------------------------------------------
|0 |TABLE FULL SCAN|t1  |2       |5           |
===============================================
Outputs & filters:
-------------------------------------
  0 - output([t1.c1], [t1.c2], [t1.c3], [t1.c4], [t1.c5], [t1.c6]), filter([CASE WHEN t1.c1 > 0 THEN t1.c1 ELSE t1.c2 END > 0]), rowset=256
      access([t1.c1], [t1.c2], [t1.c3], [t1.c4], [t1.c5], [t1.c6]), partitions(p0)
      is_index_back=false, is_global_index=false, filter_before_indexback[false], 
      range_key([t1.__pk_increment]), range(MIN ; MAX)always true
select /*+no_rewrite*/ * from t1 where case when c1 > 0 then c1 else c2 end > 0;
+------+------+------+------+------+------+
| c1   | c2   | c3   | c4   | c5   | c6   |
+------+------+------+------+------+------+
|    1 |    1 |    1 |    1 |    1 |    1 |
|    2 |    2 |    2 |    2 |    2 |    2 |
|    3 |    3 |    3 |    3 |    3 |    3 |
|    4 |    4 |    4 |    4 |    4 |    4 |
|    5 |    5 |    5 |    5 |    5 |    5 |
+------+------+------+------+------+------+
EXPLAIN select * from t1 where case when c1 > 0 then c1 else c2 end > 0;
Query Plan
===============================================
|ID|OPERATOR       |NAME|EST.ROWS|EST.TIME(us)|
-----------------------------------------------
|0 |TABLE FULL SCAN|t1  |2       |5           |
===============================================
Outputs & filters:
-------------------------------------
  0 - output([t1.c1], [t1.c2], [t1.c3], [t1.c4], [t1.c5], [t1.c6]), filter([CASE WHEN t1.c1 > 0 THEN t1.c1 ELSE t1.c2 END > 0]), rowset=256
      access([t1.c1], [t1.c2], [t1.c3], [t1.c4], [t1.c5], [t1.c6]), partitions(p0)
      is_index_back=false, is_global_index=false, filter_before_indexback[false], 
      range_key([t1.__pk_increment]), range(MIN ; MAX)always true
select * from t1 where case when c1 > 0 then c1 else c2 end > 0;
+------+------+------+------+------+------+
| c1   | c2   | c3   | c4   | c5   | c6   |
+------+------+------+------+------+------+
|    1 |    1 |    1 |    1 |    1 |    1 |
|    2 |    2 |    2 |    2 |    2 |    2 |
|    3 |    3 |    3 |    3 |    3 |    3 |
|    4 |    4 |    4 |    4 |    4 |    4 |
|    5 |    5 |    5 |    5 |    5 |    5 |
+------+------+------+------+------+------+

== case 13: can't be rewrite 
EXPLAIN select /*+no_rewrite*/ * from t1 where case when c1 > 0 then c1 
                                when c2 > 0 then c2
                                when c3 > 0 then 0
                                else 0
                            end > 1;
Query Plan
===============================================
|ID|OPERATOR       |NAME|EST.ROWS|EST.TIME(us)|
-----------------------------------------------
|0 |TABLE FULL SCAN|t1  |2       |5           |
===============================================
Outputs & filters:
-------------------------------------
  0 - output([t1.c1], [t1.c2], [t1.c3], [t1.c4], [t1.c5], [t1.c6]), filter([CASE WHEN t1.c1 > 0 THEN t1.c1 WHEN t1.c2 > 0 THEN t1.c2 WHEN t1.c3 > 0 THEN 
      0 ELSE 0 END > 1]), rowset=256
      access([t1.c1], [t1.c2], [t1.c3], [t1.c4], [t1.c5], [t1.c6]), partitions(p0)
      is_index_back=false, is_global_index=false, filter_before_indexback[false], 
      range_key([t1.__pk_increment]), range(MIN ; MAX)always true
select /*+no_rewrite*/ * from t1 where case when c1 > 0 then c1 
                                when c2 > 0 then c2
                                when c3 > 0 then 0
                                else 0
                            end > 1;
+------+------+------+------+------+------+
| c1   | c2   | c3   | c4   | c5   | c6   |
+------+------+------+------+------+------+
|    2 |    2 |    2 |    2 |    2 |    2 |
|    3 |    3 |    3 |    3 |    3 |    3 |
|    4 |    4 |    4 |    4 |    4 |    4 |
|    5 |    5 |    5 |    5 |    5 |    5 |
+------+------+------+------+------+------+

EXPLAIN select * from t1 where case when c1 > 0 then c1 
                          	when c2 > 0 then c2
                      	    when c3 > 0 then 0
                          	else 0
                       end > 1;
Query Plan
===============================================
|ID|OPERATOR       |NAME|EST.ROWS|EST.TIME(us)|
-----------------------------------------------
|0 |TABLE FULL SCAN|t1  |2       |5           |
===============================================
Outputs & filters:
-------------------------------------
  0 - output([t1.c1], [t1.c2], [t1.c3], [t1.c4], [t1.c5], [t1.c6]), filter([CASE WHEN t1.c1 > 0 THEN t1.c1 WHEN t1.c2 > 0 THEN t1.c2 WHEN t1.c3 > 0 THEN 
      0 ELSE 0 END > 1]), rowset=256
      access([t1.c1], [t1.c2], [t1.c3], [t1.c4], [t1.c5], [t1.c6]), partitions(p0)
      is_index_back=false, is_global_index=false, filter_before_indexback[false], 
      range_key([t1.__pk_increment]), range(MIN ; MAX)always true
select * from t1 where case when c1 > 0 then c1 
                          	when c2 > 0 then c2
                      	    when c3 > 0 then 0
                          	else 0
                       end > 1;
+------+------+------+------+------+------+
| c1   | c2   | c3   | c4   | c5   | c6   |
+------+------+------+------+------+------+
|    2 |    2 |    2 |    2 |    2 |    2 |
|    3 |    3 |    3 |    3 |    3 |    3 |
|    4 |    4 |    4 |    4 |    4 |    4 |
|    5 |    5 |    5 |    5 |    5 |    5 |
+------+------+------+------+------+------+


== case 13: can't be rewrite with NULL
EXPLAIN select /*+no_rewrite*/ * from t1 where case when c1 > 0 then null else 0 end = 0;
Query Plan
===============================================
|ID|OPERATOR       |NAME|EST.ROWS|EST.TIME(us)|
-----------------------------------------------
|0 |TABLE FULL SCAN|t1  |1       |4           |
===============================================
Outputs & filters:
-------------------------------------
  0 - output([t1.c1], [t1.c2], [t1.c3], [t1.c4], [t1.c5], [t1.c6]), filter([CASE WHEN t1.c1 > 0 THEN NULL ELSE 0 END = 0]), rowset=256
      access([t1.c1], [t1.c2], [t1.c3], [t1.c4], [t1.c5], [t1.c6]), partitions(p0)
      is_index_back=false, is_global_index=false, filter_before_indexback[false], 
      range_key([t1.__pk_increment]), range(MIN ; MAX)always true
select /*+no_rewrite*/ * from t1 where case when c1 > 0 then null else 0 end = 0;
+------+------+------+------+------+------+
| c1   | c2   | c3   | c4   | c5   | c6   |
+------+------+------+------+------+------+
+------+------+------+------+------+------+
EXPLAIN select * from t1 where case when c1 > 0 then null else 0 end = 0;
Query Plan
===============================================
|ID|OPERATOR       |NAME|EST.ROWS|EST.TIME(us)|
-----------------------------------------------
|0 |TABLE FULL SCAN|t1  |3       |5           |
===============================================
Outputs & filters:
-------------------------------------
  0 - output([t1.c1], [t1.c2], [t1.c3], [t1.c4], [t1.c5], [t1.c6]), filter([lnnvl(cast(t1.c1 > 0, TINYINT(-1, 0)))]), rowset=256
      access([t1.c1], [t1.c2], [t1.c3], [t1.c4], [t1.c5], [t1.c6]), partitions(p0)
      is_index_back=false, is_global_index=false, filter_before_indexback[false], 
      range_key([t1.__pk_increment]), range(MIN ; MAX)always true
select * from t1 where case when c1 > 0 then null else 0 end = 0;
+------+------+------+------+------+------+
| c1   | c2   | c3   | c4   | c5   | c6   |
+------+------+------+------+------+------+
+------+------+------+------+------+------+


== case 13: can't be rewrite with NULL
EXPLAIN select * from t1 where case when c1 > 0 then 1
                            when c2 > 0 then 2
                          	when c3 > 0 then 3
                            else null
                       end > 2;
Query Plan
===============================================
|ID|OPERATOR       |NAME|EST.ROWS|EST.TIME(us)|
-----------------------------------------------
|0 |TABLE FULL SCAN|t1  |1       |5           |
===============================================
Outputs & filters:
-------------------------------------
  0 - output([t1.c1], [t1.c2], [t1.c3], [t1.c4], [t1.c5], [t1.c6]), filter([t1.c3 > 0], [lnnvl(cast(t1.c1 > 0, TINYINT(-1, 0)))], [lnnvl(cast(t1.c2 > 0,
       TINYINT(-1, 0)))]), rowset=256
      access([t1.c1], [t1.c2], [t1.c3], [t1.c4], [t1.c5], [t1.c6]), partitions(p0)
      is_index_back=false, is_global_index=false, filter_before_indexback[false,false,false], 
      range_key([t1.__pk_increment]), range(MIN ; MAX)always true
select * from t1 where case when c1 > 0 then 1
                            when c2 > 0 then 2
                          	when c3 > 0 then 3
                            else null
                       end > 2;
+------+------+------+------+------+------+
| c1   | c2   | c3   | c4   | c5   | c6   |
+------+------+------+------+------+------+
+------+------+------+------+------+------+
EXPLAIN select /*+no_rewrite*/ * from t1 where case when c1 > 0 then 1
                            when c2 > 0 then 2
                          	when c3 > 0 then 3
                            else null
                       end > 2;
Query Plan
===============================================
|ID|OPERATOR       |NAME|EST.ROWS|EST.TIME(us)|
-----------------------------------------------
|0 |TABLE FULL SCAN|t1  |2       |5           |
===============================================
Outputs & filters:
-------------------------------------
  0 - output([t1.c1], [t1.c2], [t1.c3], [t1.c4], [t1.c5], [t1.c6]), filter([CASE WHEN t1.c1 > 0 THEN 1 WHEN t1.c2 > 0 THEN 2 WHEN t1.c3 > 0 THEN 3 ELSE 
      NULL END > 2]), rowset=256
      access([t1.c1], [t1.c2], [t1.c3], [t1.c4], [t1.c5], [t1.c6]), partitions(p0)
      is_index_back=false, is_global_index=false, filter_before_indexback[false], 
      range_key([t1.__pk_increment]), range(MIN ; MAX)always true
select /*+no_rewrite*/ * from t1 where case when c1 > 0 then 1
                            when c2 > 0 then 2
                          	when c3 > 0 then 3
                            else null
                       end > 2;
+------+------+------+------+------+------+
| c1   | c2   | c3   | c4   | c5   | c6   |
+------+------+------+------+------+------+
+------+------+------+------+------+------+


== case 14: false/null error at select expr
EXPLAIN select /*+no_rewrite*/ case when c1 > 2 then 1 when null > 1 then 2 else 0 end > 1 from t1;
Query Plan
===============================================
|ID|OPERATOR       |NAME|EST.ROWS|EST.TIME(us)|
-----------------------------------------------
|0 |TABLE FULL SCAN|t1  |5       |4           |
===============================================
Outputs & filters:
-------------------------------------
  0 - output([CASE WHEN t1.c1 > 2 THEN 1 WHEN NULL > 1 THEN 2 ELSE 0 END > 1]), filter(nil), rowset=256
      access([t1.c1]), partitions(p0)
      is_index_back=false, is_global_index=false, 
      range_key([t1.__pk_increment]), range(MIN ; MAX)always true
select /*+no_rewrite*/ case when c1 > 2 then 1 when null > 1 then 2 else 0 end > 1 from t1;
+-------------------------------------------------------------+
| case when c1 > 2 then 1 when null > 1 then 2 else 0 end > 1 |
+-------------------------------------------------------------+
|                                                           0 |
|                                                           0 |
|                                                           0 |
|                                                           0 |
|                                                           0 |
+-------------------------------------------------------------+
EXPLAIN select case when c1 > 2 then 1 when null > 1 then 2 else 0 end > 1 from t1;
Query Plan
===============================================
|ID|OPERATOR       |NAME|EST.ROWS|EST.TIME(us)|
-----------------------------------------------
|0 |TABLE FULL SCAN|t1  |5       |4           |
===============================================
Outputs & filters:
-------------------------------------
  0 - output([CASE WHEN t1.c1 > 2 THEN 1 WHEN NULL > 1 THEN 2 ELSE 0 END > 1]), filter(nil), rowset=256
      access([t1.c1]), partitions(p0)
      is_index_back=false, is_global_index=false, 
      range_key([t1.__pk_increment]), range(MIN ; MAX)always true
select case when c1 > 2 then 1 when null > 1 then 2 else 0 end > 1 from t1;
+-------------------------------------------------------------+
| case when c1 > 2 then 1 when null > 1 then 2 else 0 end > 1 |
+-------------------------------------------------------------+
|                                                           0 |
|                                                           0 |
|                                                           0 |
|                                                           0 |
|                                                           0 |
+-------------------------------------------------------------+

**************************** Joint when and then exprs test **************************** 

== case 1 
EXPLAIN select * from t1 where 
	case when 1 > 2 then 1
			 when 2 > 3 then 2
		   when null then c1
			 when c2 > 0 then c2
  	   else 1
	end > 2;
Query Plan
===============================================
|ID|OPERATOR       |NAME|EST.ROWS|EST.TIME(us)|
-----------------------------------------------
|0 |TABLE FULL SCAN|t1  |1       |5           |
===============================================
Outputs & filters:
-------------------------------------
  0 - output([t1.c1], [t1.c2], [t1.c3], [t1.c4], [t1.c5], [t1.c6]), filter([t1.c2 > 0], [t1.c2 > 2]), rowset=256
      access([t1.c1], [t1.c2], [t1.c3], [t1.c4], [t1.c5], [t1.c6]), partitions(p0)
      is_index_back=false, is_global_index=false, filter_before_indexback[false,false], 
      range_key([t1.__pk_increment]), range(MIN ; MAX)always true
select * from t1 where 
	case when 1 > 2 then 1
			 when 2 > 3 then 2
		   when null then c1
			 when c2 > 0 then c2
  	   else 1
	end > 2;
+------+------+------+------+------+------+
| c1   | c2   | c3   | c4   | c5   | c6   |
+------+------+------+------+------+------+
|    3 |    3 |    3 |    3 |    3 |    3 |
|    4 |    4 |    4 |    4 |    4 |    4 |
|    5 |    5 |    5 |    5 |    5 |    5 |
+------+------+------+------+------+------+
EXPLAIN select /*+no_rewrite*/ * from t1 where 
	case when 1 > 2 then 1
			 when 2 > 3 then 2
		   when null then c1
			 when c2 > 0 then c2
  	   else 1
	end > 2;
Query Plan
===============================================
|ID|OPERATOR       |NAME|EST.ROWS|EST.TIME(us)|
-----------------------------------------------
|0 |TABLE FULL SCAN|t1  |2       |5           |
===============================================
Outputs & filters:
-------------------------------------
  0 - output([t1.c1], [t1.c2], [t1.c3], [t1.c4], [t1.c5], [t1.c6]), filter([CASE WHEN 1 > 2 THEN 1 WHEN 2 > 3 THEN 2 WHEN cast(NULL, DOUBLE(-1, -1)) THEN 
      t1.c1 WHEN t1.c2 > 0 THEN t1.c2 ELSE 1 END > 2]), rowset=256
      access([t1.c1], [t1.c2], [t1.c3], [t1.c4], [t1.c5], [t1.c6]), partitions(p0)
      is_index_back=false, is_global_index=false, filter_before_indexback[false], 
      range_key([t1.__pk_increment]), range(MIN ; MAX)always true
select /*+no_rewrite*/ * from t1 where 
	case when 1 > 2 then 1
			 when 2 > 3 then 2
		   when null then c1
			 when c2 > 0 then c2
  	   else 1
	end > 2;
+------+------+------+------+------+------+
| c1   | c2   | c3   | c4   | c5   | c6   |
+------+------+------+------+------+------+
|    3 |    3 |    3 |    3 |    3 |    3 |
|    4 |    4 |    4 |    4 |    4 |    4 |
|    5 |    5 |    5 |    5 |    5 |    5 |
+------+------+------+------+------+------+


== case 2
EXPLAIN select /*+no_rewrite*/ 1 from t1 where c1 > 0 and (c2 > 0 or case when c1 > c2 then c1 else 3 end > 5);
Query Plan
===============================================
|ID|OPERATOR       |NAME|EST.ROWS|EST.TIME(us)|
-----------------------------------------------
|0 |TABLE FULL SCAN|t1  |1       |5           |
===============================================
Outputs & filters:
-------------------------------------
  0 - output([1]), filter([t1.c1 > 0], [t1.c2 > 0 OR CASE WHEN t1.c1 > t1.c2 THEN t1.c1 ELSE 3 END > 5]), rowset=256
      access([t1.c1], [t1.c2]), partitions(p0)
      is_index_back=false, is_global_index=false, filter_before_indexback[false,false], 
      range_key([t1.__pk_increment]), range(MIN ; MAX)always true
select /*+no_rewrite*/ 1 from t1 where c1 > 0 and (c2 > 0 or case when c1 > c2 then c1 else 3 end > 5);
+---+
| 1 |
+---+
| 1 |
| 1 |
| 1 |
| 1 |
| 1 |
+---+
EXPLAIN select 1 from t1 where c1 > 0 and (c2 > 0 or case when c1 > c2 then c1 else 3 end > 5);
Query Plan
===============================================
|ID|OPERATOR       |NAME|EST.ROWS|EST.TIME(us)|
-----------------------------------------------
|0 |TABLE FULL SCAN|t1  |1       |5           |
===============================================
Outputs & filters:
-------------------------------------
  0 - output([1]), filter([t1.c1 > 0], [t1.c2 > 0 OR CASE WHEN t1.c1 > t1.c2 THEN t1.c1 ELSE 3 END > 5]), rowset=256
      access([t1.c1], [t1.c2]), partitions(p0)
      is_index_back=false, is_global_index=false, filter_before_indexback[false,false], 
      range_key([t1.__pk_increment]), range(MIN ; MAX)always true
select 1 from t1 where c1 > 0 and (c2 > 0 or case when c1 > c2 then c1 else 3 end > 5);
+---+
| 1 |
+---+
| 1 |
| 1 |
| 1 |
| 1 |
| 1 |
+---+


== case 3
EXPLAIN select /*+no_rewrite*/ 1 from t1 where c1 > 0 and (c2 > 0 or case when c1 > c2 then c1 else 3 end > 5) 
group by c3
having case when c3 > 0 then c3 else 0 end > 4;
Query Plan
=================================================
|ID|OPERATOR         |NAME|EST.ROWS|EST.TIME(us)|
-------------------------------------------------
|0 |HASH GROUP BY    |    |1       |5           |
|1 |??TABLE FULL SCAN|t1  |1       |5           |
=================================================
Outputs & filters:
-------------------------------------
  0 - output([1]), filter([CASE WHEN t1.c3 > 0 THEN t1.c3 ELSE 0 END > 4]), rowset=256
      group([t1.c3]), agg_func(nil)
  1 - output([t1.c3]), filter([t1.c1 > 0], [t1.c2 > 0 OR CASE WHEN t1.c1 > t1.c2 THEN t1.c1 ELSE 3 END > 5]), rowset=256
      access([t1.c1], [t1.c2], [t1.c3]), partitions(p0)
      is_index_back=false, is_global_index=false, filter_before_indexback[false,false], 
      range_key([t1.__pk_increment]), range(MIN ; MAX)always true
select /*+no_rewrite*/ 1 from t1 where c1 > 0 and (c2 > 0 or case when c1 > c2 then c1 else 3 end > 5) 
group by c3
having case when c3 > 0 then c3 else 0 end > 4;
+---+
| 1 |
+---+
| 1 |
+---+

EXPLAIN select 1 from t1 where c1 > 0 and (c2 > 0 or case when c1 > c2 then c1 else 3 end > 5) 
group by c3
having case when c3 > 0 then c3 else 0 end > 4;
Query Plan
=================================================
|ID|OPERATOR         |NAME|EST.ROWS|EST.TIME(us)|
-------------------------------------------------
|0 |HASH GROUP BY    |    |1       |5           |
|1 |??TABLE FULL SCAN|t1  |1       |5           |
=================================================
Outputs & filters:
-------------------------------------
  0 - output([1]), filter(nil), rowset=256
      group([t1.c3]), agg_func(nil)
  1 - output([t1.c3]), filter([t1.c1 > 0], [t1.c3 > 0], [t1.c3 > 4], [t1.c2 > 0 OR CASE WHEN t1.c1 > t1.c2 THEN t1.c1 ELSE 3 END > 5]), rowset=256
      access([t1.c1], [t1.c2], [t1.c3]), partitions(p0)
      is_index_back=false, is_global_index=false, filter_before_indexback[false,false,false,false], 
      range_key([t1.__pk_increment]), range(MIN ; MAX)always true
select 1 from t1 where c1 > 0 and (c2 > 0 or case when c1 > c2 then c1 else 3 end > 5) 
group by c3
having case when c3 > 0 then c3 else 0 end > 4;
+---+
| 1 |
+---+
| 1 |
+---+

**************************** plan cache test **************************** 
enable plan cache
set ob_enable_plan_cache = 1;
alter system set enable_sql_audit = true;
ERROR 42000: System config unknown
alter system flush plan cache global;


== case 1
EXPLAIN select * from t1 where case when c1 > 0 then 0 when c2 > 0 then 1 when c3 > 0 then 2 else 3 end > 3;
Query Plan
===============================================
|ID|OPERATOR       |NAME|EST.ROWS|EST.TIME(us)|
-----------------------------------------------
|0 |TABLE FULL SCAN|t1  |5       |5           |
===============================================
Outputs & filters:
-------------------------------------
  0 - output([t1.c1], [t1.c2], [t1.c3], [t1.c4], [t1.c5], [t1.c6]), filter(nil), startup_filter([0]), rowset=256
      access([t1.c1], [t1.c2], [t1.c3], [t1.c4], [t1.c5], [t1.c6]), partitions(p0)
      is_index_back=false, is_global_index=false, 
      range_key([t1.__pk_increment]), range(MIN ; MAX)always true
select * from t1 where case when c1 > 0 then 0 when c2 > 0 then 1 when c3 > 0 then 2 else 3 end > 3;
+------+------+------+------+------+------+
| c1   | c2   | c3   | c4   | c5   | c6   |
+------+------+------+------+------+------+
+------+------+------+------+------+------+
EXPLAIN select * from t1 where case when c1 > 0 then 0 when c2 > 0 then 1 when c3 > 0 then 2 else 3 end > 4;
Query Plan
===============================================
|ID|OPERATOR       |NAME|EST.ROWS|EST.TIME(us)|
-----------------------------------------------
|0 |TABLE FULL SCAN|t1  |5       |5           |
===============================================
Outputs & filters:
-------------------------------------
  0 - output([t1.c1], [t1.c2], [t1.c3], [t1.c4], [t1.c5], [t1.c6]), filter(nil), startup_filter([0]), rowset=256
      access([t1.c1], [t1.c2], [t1.c3], [t1.c4], [t1.c5], [t1.c6]), partitions(p0)
      is_index_back=false, is_global_index=false, 
      range_key([t1.__pk_increment]), range(MIN ; MAX)always true
select * from t1 where case when c1 > 0 then 0 when c2 > 0 then 1 when c3 > 0 then 2 else 3 end > 4;
+------+------+------+------+------+------+
| c1   | c2   | c3   | c4   | c5   | c6   |
+------+------+------+------+------+------+
+------+------+------+------+------+------+
EXPLAIN select hit_count, sql_id, query_sql from oceanbase.V$OB_PLAN_CACHE_PLAN_STAT where statement like "select * from t1 where case when c1 > ? then ? when c2 > ? then ? when c3 > ? then ? else ? end > ?";
Query Plan
==================================================================
|ID|OPERATOR       |NAME                   |EST.ROWS|EST.TIME(us)|
------------------------------------------------------------------
|0 |TABLE FULL SCAN|__all_virtual_plan_stat|16      |150         |
==================================================================
Outputs & filters:
-------------------------------------
  0 - output([__all_virtual_plan_stat.hit_count], [__all_virtual_plan_stat.sql_id], [__all_virtual_plan_stat.query_sql]), filter([(T_OP_LIKE, cast(__all_virtual_plan_stat.statement,
       VARCHAR(1048576)), cast('select * from t1 where case when c1 > ? then ? when c2 > ? then ? when c3 > ? then ? else ? end > ?', VARCHAR(1048576)), '\\')],
       [__all_virtual_plan_stat.object_status = 0], [__all_virtual_plan_stat.is_in_pc = 1], [__all_virtual_plan_stat.svr_port = RPC_PORT()], [__all_virtual_plan_stat.svr_ip 
      = HOST_IP()])
      access([__all_virtual_plan_stat.svr_ip], [__all_virtual_plan_stat.svr_port], [__all_virtual_plan_stat.object_status], [__all_virtual_plan_stat.is_in_pc],
       [__all_virtual_plan_stat.sql_id], [__all_virtual_plan_stat.statement], [__all_virtual_plan_stat.query_sql], [__all_virtual_plan_stat.hit_count]), partitions(p1)
      is_index_back=false, is_global_index=false, filter_before_indexback[false,false,false,false,false], 
      range_key(nil), range(MIN ; MAX)
select hit_count, sql_id, query_sql from oceanbase.V$OB_PLAN_CACHE_PLAN_STAT where statement like "select * from t1 where case when c1 > ? then ? when c2 > ? then ? when c3 > ? then ? else ? end > ?";
+-----------+----------------------------------+-----------------------------------------------------------------------------------------------------+
| hit_count | sql_id                           | query_sql                                                                                           |
+-----------+----------------------------------+-----------------------------------------------------------------------------------------------------+
|         1 | 23532075EEE7A10F268EDCC682D83254 | select * from t1 where case when c1 > 0 then 0 when c2 > 0 then 1 when c3 > 0 then 2 else 3 end > 3 |
+-----------+----------------------------------+-----------------------------------------------------------------------------------------------------+
expect generate 1 plan
alter system flush plan cache global;

== case 2
EXPLAIN select * from t1 where case when 1 > 2 then c1 when 2 > 3 then c2 else c3 end > 1;
Query Plan
===============================================
|ID|OPERATOR       |NAME|EST.ROWS|EST.TIME(us)|
-----------------------------------------------
|0 |TABLE FULL SCAN|t1  |1       |5           |
===============================================
Outputs & filters:
-------------------------------------
  0 - output([t1.c1], [t1.c2], [t1.c3], [t1.c4], [t1.c5], [t1.c6]), filter([t1.c3 > 1]), rowset=256
      access([t1.c1], [t1.c2], [t1.c3], [t1.c4], [t1.c5], [t1.c6]), partitions(p0)
      is_index_back=false, is_global_index=false, filter_before_indexback[false], 
      range_key([t1.__pk_increment]), range(MIN ; MAX)always true
select * from t1 where case when 1 > 2 then c1 when 2 > 3 then c2 else c3 end > 1;
+------+------+------+------+------+------+
| c1   | c2   | c3   | c4   | c5   | c6   |
+------+------+------+------+------+------+
|    2 |    2 |    2 |    2 |    2 |    2 |
|    3 |    3 |    3 |    3 |    3 |    3 |
|    4 |    4 |    4 |    4 |    4 |    4 |
|    5 |    5 |    5 |    5 |    5 |    5 |
+------+------+------+------+------+------+
EXPLAIN select * from t1 where case when 1 > 2 then c1 when 2 > 1 then c2 else c3 end > 1;
Query Plan
===============================================
|ID|OPERATOR       |NAME|EST.ROWS|EST.TIME(us)|
-----------------------------------------------
|0 |TABLE FULL SCAN|t1  |1       |5           |
===============================================
Outputs & filters:
-------------------------------------
  0 - output([t1.c1], [t1.c2], [t1.c3], [t1.c4], [t1.c5], [t1.c6]), filter([t1.c2 > 1]), rowset=256
      access([t1.c1], [t1.c2], [t1.c3], [t1.c4], [t1.c5], [t1.c6]), partitions(p0)
      is_index_back=false, is_global_index=false, filter_before_indexback[false], 
      range_key([t1.__pk_increment]), range(MIN ; MAX)always true
select * from t1 where case when 1 > 2 then c1 when 2 > 1 then c2 else c3 end > 1;
+------+------+------+------+------+------+
| c1   | c2   | c3   | c4   | c5   | c6   |
+------+------+------+------+------+------+
|    2 |    2 |    2 |    2 |    2 |    2 |
|    3 |    3 |    3 |    3 |    3 |    3 |
|    4 |    4 |    4 |    4 |    4 |    4 |
|    5 |    5 |    5 |    5 |    5 |    5 |
+------+------+------+------+------+------+
EXPLAIN select hit_count, sql_id, query_sql from oceanbase.V$OB_PLAN_CACHE_PLAN_STAT where statement like "select * from t1 where case when ? > ? then c1 when ? > ? then c2 else c3 end > ?";
Query Plan
==================================================================
|ID|OPERATOR       |NAME                   |EST.ROWS|EST.TIME(us)|
------------------------------------------------------------------
|0 |TABLE FULL SCAN|__all_virtual_plan_stat|16      |150         |
==================================================================
Outputs & filters:
-------------------------------------
  0 - output([__all_virtual_plan_stat.hit_count], [__all_virtual_plan_stat.sql_id], [__all_virtual_plan_stat.query_sql]), filter([(T_OP_LIKE, cast(__all_virtual_plan_stat.statement,
       VARCHAR(1048576)), cast('select * from t1 where case when ? > ? then c1 when ? > ? then c2 else c3 end > ?', VARCHAR(1048576)), '\\')], [__all_virtual_plan_stat.object_status 
      = 0], [__all_virtual_plan_stat.is_in_pc = 1], [__all_virtual_plan_stat.svr_port = RPC_PORT()], [__all_virtual_plan_stat.svr_ip = HOST_IP()])
      access([__all_virtual_plan_stat.svr_ip], [__all_virtual_plan_stat.svr_port], [__all_virtual_plan_stat.object_status], [__all_virtual_plan_stat.is_in_pc],
       [__all_virtual_plan_stat.sql_id], [__all_virtual_plan_stat.statement], [__all_virtual_plan_stat.query_sql], [__all_virtual_plan_stat.hit_count]), partitions(p1)
      is_index_back=false, is_global_index=false, filter_before_indexback[false,false,false,false,false], 
      range_key(nil), range(MIN ; MAX)
select hit_count, sql_id, query_sql from oceanbase.V$OB_PLAN_CACHE_PLAN_STAT where statement like "select * from t1 where case when ? > ? then c1 when ? > ? then c2 else c3 end > ?";
+-----------+----------------------------------+-----------------------------------------------------------------------------------+
| hit_count | sql_id                           | query_sql                                                                         |
+-----------+----------------------------------+-----------------------------------------------------------------------------------+
|         0 | 30E91141184DE81292F108AD9950CF1C | select * from t1 where case when 1 > 2 then c1 when 2 > 3 then c2 else c3 end > 1 |
|         0 | 30E91141184DE81292F108AD9950CF1C | select * from t1 where case when 1 > 2 then c1 when 2 > 1 then c2 else c3 end > 1 |
+-----------+----------------------------------+-----------------------------------------------------------------------------------+
expect generate 2 plan
alter system flush plan cache global;

== case 3
EXPLAIN select * from t1 where case when 1 > 2 then c1 when 2 > 1 then c2 else c3 end > 1;
Query Plan
===============================================
|ID|OPERATOR       |NAME|EST.ROWS|EST.TIME(us)|
-----------------------------------------------
|0 |TABLE FULL SCAN|t1  |1       |5           |
===============================================
Outputs & filters:
-------------------------------------
  0 - output([t1.c1], [t1.c2], [t1.c3], [t1.c4], [t1.c5], [t1.c6]), filter([t1.c2 > 1]), rowset=256
      access([t1.c1], [t1.c2], [t1.c3], [t1.c4], [t1.c5], [t1.c6]), partitions(p0)
      is_index_back=false, is_global_index=false, filter_before_indexback[false], 
      range_key([t1.__pk_increment]), range(MIN ; MAX)always true
select * from t1 where case when 1 > 2 then c1 when 2 > 1 then c2 else c3 end > 1;
+------+------+------+------+------+------+
| c1   | c2   | c3   | c4   | c5   | c6   |
+------+------+------+------+------+------+
|    2 |    2 |    2 |    2 |    2 |    2 |
|    3 |    3 |    3 |    3 |    3 |    3 |
|    4 |    4 |    4 |    4 |    4 |    4 |
|    5 |    5 |    5 |    5 |    5 |    5 |
+------+------+------+------+------+------+
EXPLAIN select * from t1 where case when 1 > 2 then c1 when 2 > 3 then c2 else c3 end > 1;
Query Plan
===============================================
|ID|OPERATOR       |NAME|EST.ROWS|EST.TIME(us)|
-----------------------------------------------
|0 |TABLE FULL SCAN|t1  |1       |5           |
===============================================
Outputs & filters:
-------------------------------------
  0 - output([t1.c1], [t1.c2], [t1.c3], [t1.c4], [t1.c5], [t1.c6]), filter([t1.c3 > 1]), rowset=256
      access([t1.c1], [t1.c2], [t1.c3], [t1.c4], [t1.c5], [t1.c6]), partitions(p0)
      is_index_back=false, is_global_index=false, filter_before_indexback[false], 
      range_key([t1.__pk_increment]), range(MIN ; MAX)always true
select * from t1 where case when 1 > 2 then c1 when 2 > 3 then c2 else c3 end > 1;
+------+------+------+------+------+------+
| c1   | c2   | c3   | c4   | c5   | c6   |
+------+------+------+------+------+------+
|    2 |    2 |    2 |    2 |    2 |    2 |
|    3 |    3 |    3 |    3 |    3 |    3 |
|    4 |    4 |    4 |    4 |    4 |    4 |
|    5 |    5 |    5 |    5 |    5 |    5 |
+------+------+------+------+------+------+
EXPLAIN select hit_count, sql_id, query_sql from oceanbase.V$OB_PLAN_CACHE_PLAN_STAT where statement like "select * from t1 where case when ? > ? then c1 when ? > ? then c2 else c3 end > ?";
Query Plan
==================================================================
|ID|OPERATOR       |NAME                   |EST.ROWS|EST.TIME(us)|
------------------------------------------------------------------
|0 |TABLE FULL SCAN|__all_virtual_plan_stat|16      |150         |
==================================================================
Outputs & filters:
-------------------------------------
  0 - output([__all_virtual_plan_stat.hit_count], [__all_virtual_plan_stat.sql_id], [__all_virtual_plan_stat.query_sql]), filter([(T_OP_LIKE, cast(__all_virtual_plan_stat.statement,
       VARCHAR(1048576)), cast('select * from t1 where case when ? > ? then c1 when ? > ? then c2 else c3 end > ?', VARCHAR(1048576)), '\\')], [__all_virtual_plan_stat.object_status 
      = 0], [__all_virtual_plan_stat.is_in_pc = 1], [__all_virtual_plan_stat.svr_port = RPC_PORT()], [__all_virtual_plan_stat.svr_ip = HOST_IP()])
      access([__all_virtual_plan_stat.svr_ip], [__all_virtual_plan_stat.svr_port], [__all_virtual_plan_stat.object_status], [__all_virtual_plan_stat.is_in_pc],
       [__all_virtual_plan_stat.sql_id], [__all_virtual_plan_stat.statement], [__all_virtual_plan_stat.query_sql], [__all_virtual_plan_stat.hit_count]), partitions(p1)
      is_index_back=false, is_global_index=false, filter_before_indexback[false,false,false,false,false], 
      range_key(nil), range(MIN ; MAX)
select hit_count, sql_id, query_sql from oceanbase.V$OB_PLAN_CACHE_PLAN_STAT where statement like "select * from t1 where case when ? > ? then c1 when ? > ? then c2 else c3 end > ?";
+-----------+----------------------------------+-----------------------------------------------------------------------------------+
| hit_count | sql_id                           | query_sql                                                                         |
+-----------+----------------------------------+-----------------------------------------------------------------------------------+
|         0 | 30E91141184DE81292F108AD9950CF1C | select * from t1 where case when 1 > 2 then c1 when 2 > 1 then c2 else c3 end > 1 |
|         0 | 30E91141184DE81292F108AD9950CF1C | select * from t1 where case when 1 > 2 then c1 when 2 > 3 then c2 else c3 end > 1 |
+-----------+----------------------------------+-----------------------------------------------------------------------------------+
expect generate 2 plan
alter system flush plan cache global;

== case 4
EXPLAIN select * from t1 where case when c1 > 1 then 1 when c2 > 1 then 2 else 0 end > 1;
Query Plan
===============================================
|ID|OPERATOR       |NAME|EST.ROWS|EST.TIME(us)|
-----------------------------------------------
|0 |TABLE FULL SCAN|t1  |1       |5           |
===============================================
Outputs & filters:
-------------------------------------
  0 - output([t1.c1], [t1.c2], [t1.c3], [t1.c4], [t1.c5], [t1.c6]), filter([t1.c2 > 1], [lnnvl(cast(t1.c1 > 1, TINYINT(-1, 0)))]), rowset=256
      access([t1.c1], [t1.c2], [t1.c3], [t1.c4], [t1.c5], [t1.c6]), partitions(p0)
      is_index_back=false, is_global_index=false, filter_before_indexback[false,false], 
      range_key([t1.__pk_increment]), range(MIN ; MAX)always true
select * from t1 where case when c1 > 1 then 1 when c2 > 1 then 2 else 0 end > 1;
+------+------+------+------+------+------+
| c1   | c2   | c3   | c4   | c5   | c6   |
+------+------+------+------+------+------+
+------+------+------+------+------+------+
EXPLAIN select * from t1 where case when c1 > 1 then 1 when c2 > 1 then 1 else 0 end > 1;
Query Plan
===============================================
|ID|OPERATOR       |NAME|EST.ROWS|EST.TIME(us)|
-----------------------------------------------
|0 |TABLE FULL SCAN|t1  |5       |5           |
===============================================
Outputs & filters:
-------------------------------------
  0 - output([t1.c1], [t1.c2], [t1.c3], [t1.c4], [t1.c5], [t1.c6]), filter(nil), startup_filter([0]), rowset=256
      access([t1.c1], [t1.c2], [t1.c3], [t1.c4], [t1.c5], [t1.c6]), partitions(p0)
      is_index_back=false, is_global_index=false, 
      range_key([t1.__pk_increment]), range(MIN ; MAX)always true
select * from t1 where case when c1 > 1 then 1 when c2 > 1 then 1 else 0 end > 1;
+------+------+------+------+------+------+
| c1   | c2   | c3   | c4   | c5   | c6   |
+------+------+------+------+------+------+
+------+------+------+------+------+------+
EXPLAIN select hit_count, sql_id, query_sql from oceanbase.V$OB_PLAN_CACHE_PLAN_STAT where statement like "select * from t1 where case when c1 > ? then ? when c2 > ? then ? else ? end > ?";
Query Plan
==================================================================
|ID|OPERATOR       |NAME                   |EST.ROWS|EST.TIME(us)|
------------------------------------------------------------------
|0 |TABLE FULL SCAN|__all_virtual_plan_stat|16      |150         |
==================================================================
Outputs & filters:
-------------------------------------
  0 - output([__all_virtual_plan_stat.hit_count], [__all_virtual_plan_stat.sql_id], [__all_virtual_plan_stat.query_sql]), filter([(T_OP_LIKE, cast(__all_virtual_plan_stat.statement,
       VARCHAR(1048576)), cast('select * from t1 where case when c1 > ? then ? when c2 > ? then ? else ? end > ?', VARCHAR(1048576)), '\\')], [__all_virtual_plan_stat.object_status 
      = 0], [__all_virtual_plan_stat.is_in_pc = 1], [__all_virtual_plan_stat.svr_port = RPC_PORT()], [__all_virtual_plan_stat.svr_ip = HOST_IP()])
      access([__all_virtual_plan_stat.svr_ip], [__all_virtual_plan_stat.svr_port], [__all_virtual_plan_stat.object_status], [__all_virtual_plan_stat.is_in_pc],
       [__all_virtual_plan_stat.sql_id], [__all_virtual_plan_stat.statement], [__all_virtual_plan_stat.query_sql], [__all_virtual_plan_stat.hit_count]), partitions(p1)
      is_index_back=false, is_global_index=false, filter_before_indexback[false,false,false,false,false], 
      range_key(nil), range(MIN ; MAX)
select hit_count, sql_id, query_sql from oceanbase.V$OB_PLAN_CACHE_PLAN_STAT where statement like "select * from t1 where case when c1 > ? then ? when c2 > ? then ? else ? end > ?";
+-----------+----------------------------------+----------------------------------------------------------------------------------+
| hit_count | sql_id                           | query_sql                                                                        |
+-----------+----------------------------------+----------------------------------------------------------------------------------+
|         0 | C0667D44810456FC45F1616D5A4E6CF6 | select * from t1 where case when c1 > 1 then 1 when c2 > 1 then 2 else 0 end > 1 |
|         0 | C0667D44810456FC45F1616D5A4E6CF6 | select * from t1 where case when c1 > 1 then 1 when c2 > 1 then 1 else 0 end > 1 |
+-----------+----------------------------------+----------------------------------------------------------------------------------+
expect generate 2 plan
alter system flush plan cache global;

== case 5
EXPLAIN select * from t1 where case when c1 > 1 then 1 when c2 > 1 then 1 else 0 end > 1;
Query Plan
===============================================
|ID|OPERATOR       |NAME|EST.ROWS|EST.TIME(us)|
-----------------------------------------------
|0 |TABLE FULL SCAN|t1  |5       |5           |
===============================================
Outputs & filters:
-------------------------------------
  0 - output([t1.c1], [t1.c2], [t1.c3], [t1.c4], [t1.c5], [t1.c6]), filter(nil), startup_filter([0]), rowset=256
      access([t1.c1], [t1.c2], [t1.c3], [t1.c4], [t1.c5], [t1.c6]), partitions(p0)
      is_index_back=false, is_global_index=false, 
      range_key([t1.__pk_increment]), range(MIN ; MAX)always true
select * from t1 where case when c1 > 1 then 1 when c2 > 1 then 1 else 0 end > 1;
+------+------+------+------+------+------+
| c1   | c2   | c3   | c4   | c5   | c6   |
+------+------+------+------+------+------+
+------+------+------+------+------+------+
EXPLAIN select * from t1 where case when c1 > 1 then 1 when c2 > 1 then 2 else 0 end > 1;
Query Plan
===============================================
|ID|OPERATOR       |NAME|EST.ROWS|EST.TIME(us)|
-----------------------------------------------
|0 |TABLE FULL SCAN|t1  |1       |5           |
===============================================
Outputs & filters:
-------------------------------------
  0 - output([t1.c1], [t1.c2], [t1.c3], [t1.c4], [t1.c5], [t1.c6]), filter([t1.c2 > 1], [lnnvl(cast(t1.c1 > 1, TINYINT(-1, 0)))]), rowset=256
      access([t1.c1], [t1.c2], [t1.c3], [t1.c4], [t1.c5], [t1.c6]), partitions(p0)
      is_index_back=false, is_global_index=false, filter_before_indexback[false,false], 
      range_key([t1.__pk_increment]), range(MIN ; MAX)always true
select * from t1 where case when c1 > 1 then 1 when c2 > 1 then 2 else 0 end > 1;
+------+------+------+------+------+------+
| c1   | c2   | c3   | c4   | c5   | c6   |
+------+------+------+------+------+------+
+------+------+------+------+------+------+
EXPLAIN select hit_count, sql_id, query_sql from oceanbase.V$OB_PLAN_CACHE_PLAN_STAT where statement like "select * from t1 where case when c1 > ? then ? when c2 > ? then ? else ? end > ?";
Query Plan
==================================================================
|ID|OPERATOR       |NAME                   |EST.ROWS|EST.TIME(us)|
------------------------------------------------------------------
|0 |TABLE FULL SCAN|__all_virtual_plan_stat|16      |150         |
==================================================================
Outputs & filters:
-------------------------------------
  0 - output([__all_virtual_plan_stat.hit_count], [__all_virtual_plan_stat.sql_id], [__all_virtual_plan_stat.query_sql]), filter([(T_OP_LIKE, cast(__all_virtual_plan_stat.statement,
       VARCHAR(1048576)), cast('select * from t1 where case when c1 > ? then ? when c2 > ? then ? else ? end > ?', VARCHAR(1048576)), '\\')], [__all_virtual_plan_stat.object_status 
      = 0], [__all_virtual_plan_stat.is_in_pc = 1], [__all_virtual_plan_stat.svr_port = RPC_PORT()], [__all_virtual_plan_stat.svr_ip = HOST_IP()])
      access([__all_virtual_plan_stat.svr_ip], [__all_virtual_plan_stat.svr_port], [__all_virtual_plan_stat.object_status], [__all_virtual_plan_stat.is_in_pc],
       [__all_virtual_plan_stat.sql_id], [__all_virtual_plan_stat.statement], [__all_virtual_plan_stat.query_sql], [__all_virtual_plan_stat.hit_count]), partitions(p1)
      is_index_back=false, is_global_index=false, filter_before_indexback[false,false,false,false,false], 
      range_key(nil), range(MIN ; MAX)
select hit_count, sql_id, query_sql from oceanbase.V$OB_PLAN_CACHE_PLAN_STAT where statement like "select * from t1 where case when c1 > ? then ? when c2 > ? then ? else ? end > ?";
+-----------+----------------------------------+----------------------------------------------------------------------------------+
| hit_count | sql_id                           | query_sql                                                                        |
+-----------+----------------------------------+----------------------------------------------------------------------------------+
|         0 | C0667D44810456FC45F1616D5A4E6CF6 | select * from t1 where case when c1 > 1 then 1 when c2 > 1 then 1 else 0 end > 1 |
|         0 | C0667D44810456FC45F1616D5A4E6CF6 | select * from t1 where case when c1 > 1 then 1 when c2 > 1 then 2 else 0 end > 1 |
+-----------+----------------------------------+----------------------------------------------------------------------------------+
expect generate 2 plan
NULL and const plan Constraint
alter system flush plan cache global;

== case 6
EXPLAIN select * from t1 where case when c1 > 1 then 1 when c2 > 1 then 2 else 0 end > 1;
Query Plan
===============================================
|ID|OPERATOR       |NAME|EST.ROWS|EST.TIME(us)|
-----------------------------------------------
|0 |TABLE FULL SCAN|t1  |1       |5           |
===============================================
Outputs & filters:
-------------------------------------
  0 - output([t1.c1], [t1.c2], [t1.c3], [t1.c4], [t1.c5], [t1.c6]), filter([t1.c2 > 1], [lnnvl(cast(t1.c1 > 1, TINYINT(-1, 0)))]), rowset=256
      access([t1.c1], [t1.c2], [t1.c3], [t1.c4], [t1.c5], [t1.c6]), partitions(p0)
      is_index_back=false, is_global_index=false, filter_before_indexback[false,false], 
      range_key([t1.__pk_increment]), range(MIN ; MAX)always true
select * from t1 where case when c1 > 1 then 1 when c2 > 1 then 2 else 0 end > 1;
+------+------+------+------+------+------+
| c1   | c2   | c3   | c4   | c5   | c6   |
+------+------+------+------+------+------+
+------+------+------+------+------+------+
EXPLAIN select * from t1 where case when c1 > 1 then 1 when c2 > 1 then NULL else 0 end > 1;
Query Plan
===============================================
|ID|OPERATOR       |NAME|EST.ROWS|EST.TIME(us)|
-----------------------------------------------
|0 |TABLE FULL SCAN|t1  |5       |5           |
===============================================
Outputs & filters:
-------------------------------------
  0 - output([t1.c1], [t1.c2], [t1.c3], [t1.c4], [t1.c5], [t1.c6]), filter(nil), startup_filter([0]), rowset=256
      access([t1.c1], [t1.c2], [t1.c3], [t1.c4], [t1.c5], [t1.c6]), partitions(p0)
      is_index_back=false, is_global_index=false, 
      range_key([t1.__pk_increment]), range(MIN ; MAX)always true
select * from t1 where case when c1 > 1 then 1 when c2 > 1 then NULL else 0 end > 1;
+------+------+------+------+------+------+
| c1   | c2   | c3   | c4   | c5   | c6   |
+------+------+------+------+------+------+
+------+------+------+------+------+------+
EXPLAIN select hit_count, sql_id, query_sql from oceanbase.V$OB_PLAN_CACHE_PLAN_STAT where statement like "select * from t1 where case when c1 > ? then ? when c2 > ? then ? else ? end > ?";
Query Plan
==================================================================
|ID|OPERATOR       |NAME                   |EST.ROWS|EST.TIME(us)|
------------------------------------------------------------------
|0 |TABLE FULL SCAN|__all_virtual_plan_stat|16      |150         |
==================================================================
Outputs & filters:
-------------------------------------
  0 - output([__all_virtual_plan_stat.hit_count], [__all_virtual_plan_stat.sql_id], [__all_virtual_plan_stat.query_sql]), filter([(T_OP_LIKE, cast(__all_virtual_plan_stat.statement,
       VARCHAR(1048576)), cast('select * from t1 where case when c1 > ? then ? when c2 > ? then ? else ? end > ?', VARCHAR(1048576)), '\\')], [__all_virtual_plan_stat.object_status 
      = 0], [__all_virtual_plan_stat.is_in_pc = 1], [__all_virtual_plan_stat.svr_port = RPC_PORT()], [__all_virtual_plan_stat.svr_ip = HOST_IP()])
      access([__all_virtual_plan_stat.svr_ip], [__all_virtual_plan_stat.svr_port], [__all_virtual_plan_stat.object_status], [__all_virtual_plan_stat.is_in_pc],
       [__all_virtual_plan_stat.sql_id], [__all_virtual_plan_stat.statement], [__all_virtual_plan_stat.query_sql], [__all_virtual_plan_stat.hit_count]), partitions(p1)
      is_index_back=false, is_global_index=false, filter_before_indexback[false,false,false,false,false], 
      range_key(nil), range(MIN ; MAX)
select hit_count, sql_id, query_sql from oceanbase.V$OB_PLAN_CACHE_PLAN_STAT where statement like "select * from t1 where case when c1 > ? then ? when c2 > ? then ? else ? end > ?";
+-----------+----------------------------------+-------------------------------------------------------------------------------------+
| hit_count | sql_id                           | query_sql                                                                           |
+-----------+----------------------------------+-------------------------------------------------------------------------------------+
|         0 | C0667D44810456FC45F1616D5A4E6CF6 | select * from t1 where case when c1 > 1 then 1 when c2 > 1 then 2 else 0 end > 1    |
|         0 | C0667D44810456FC45F1616D5A4E6CF6 | select * from t1 where case when c1 > 1 then 1 when c2 > 1 then NULL else 0 end > 1 |
+-----------+----------------------------------+-------------------------------------------------------------------------------------+
expect generate 2 plan
alter system flush plan cache global;

== case 7
EXPLAIN select * from t1 where case when c1 > 1 then 1 when c2 > 1 then NULL else 0 end > 1;
Query Plan
===============================================
|ID|OPERATOR       |NAME|EST.ROWS|EST.TIME(us)|
-----------------------------------------------
|0 |TABLE FULL SCAN|t1  |5       |5           |
===============================================
Outputs & filters:
-------------------------------------
  0 - output([t1.c1], [t1.c2], [t1.c3], [t1.c4], [t1.c5], [t1.c6]), filter(nil), startup_filter([0]), rowset=256
      access([t1.c1], [t1.c2], [t1.c3], [t1.c4], [t1.c5], [t1.c6]), partitions(p0)
      is_index_back=false, is_global_index=false, 
      range_key([t1.__pk_increment]), range(MIN ; MAX)always true
select * from t1 where case when c1 > 1 then 1 when c2 > 1 then NULL else 0 end > 1;
+------+------+------+------+------+------+
| c1   | c2   | c3   | c4   | c5   | c6   |
+------+------+------+------+------+------+
+------+------+------+------+------+------+
EXPLAIN select * from t1 where case when c1 > 1 then 1 when c2 > 1 then 2 else 0 end > 1;
Query Plan
===============================================
|ID|OPERATOR       |NAME|EST.ROWS|EST.TIME(us)|
-----------------------------------------------
|0 |TABLE FULL SCAN|t1  |1       |5           |
===============================================
Outputs & filters:
-------------------------------------
  0 - output([t1.c1], [t1.c2], [t1.c3], [t1.c4], [t1.c5], [t1.c6]), filter([t1.c2 > 1], [lnnvl(cast(t1.c1 > 1, TINYINT(-1, 0)))]), rowset=256
      access([t1.c1], [t1.c2], [t1.c3], [t1.c4], [t1.c5], [t1.c6]), partitions(p0)
      is_index_back=false, is_global_index=false, filter_before_indexback[false,false], 
      range_key([t1.__pk_increment]), range(MIN ; MAX)always true
select * from t1 where case when c1 > 1 then 1 when c2 > 1 then 2 else 0 end > 1;
+------+------+------+------+------+------+
| c1   | c2   | c3   | c4   | c5   | c6   |
+------+------+------+------+------+------+
+------+------+------+------+------+------+
EXPLAIN select hit_count, sql_id, query_sql from oceanbase.V$OB_PLAN_CACHE_PLAN_STAT where statement like "select * from t1 where case when c1 > ? then ? when c2 > ? then ? else ? end > ?";
Query Plan
==================================================================
|ID|OPERATOR       |NAME                   |EST.ROWS|EST.TIME(us)|
------------------------------------------------------------------
|0 |TABLE FULL SCAN|__all_virtual_plan_stat|16      |150         |
==================================================================
Outputs & filters:
-------------------------------------
  0 - output([__all_virtual_plan_stat.hit_count], [__all_virtual_plan_stat.sql_id], [__all_virtual_plan_stat.query_sql]), filter([(T_OP_LIKE, cast(__all_virtual_plan_stat.statement,
       VARCHAR(1048576)), cast('select * from t1 where case when c1 > ? then ? when c2 > ? then ? else ? end > ?', VARCHAR(1048576)), '\\')], [__all_virtual_plan_stat.object_status 
      = 0], [__all_virtual_plan_stat.is_in_pc = 1], [__all_virtual_plan_stat.svr_port = RPC_PORT()], [__all_virtual_plan_stat.svr_ip = HOST_IP()])
      access([__all_virtual_plan_stat.svr_ip], [__all_virtual_plan_stat.svr_port], [__all_virtual_plan_stat.object_status], [__all_virtual_plan_stat.is_in_pc],
       [__all_virtual_plan_stat.sql_id], [__all_virtual_plan_stat.statement], [__all_virtual_plan_stat.query_sql], [__all_virtual_plan_stat.hit_count]), partitions(p1)
      is_index_back=false, is_global_index=false, filter_before_indexback[false,false,false,false,false], 
      range_key(nil), range(MIN ; MAX)
select hit_count, sql_id, query_sql from oceanbase.V$OB_PLAN_CACHE_PLAN_STAT where statement like "select * from t1 where case when c1 > ? then ? when c2 > ? then ? else ? end > ?";
+-----------+----------------------------------+-------------------------------------------------------------------------------------+
| hit_count | sql_id                           | query_sql                                                                           |
+-----------+----------------------------------+-------------------------------------------------------------------------------------+
|         0 | C0667D44810456FC45F1616D5A4E6CF6 | select * from t1 where case when c1 > 1 then 1 when c2 > 1 then NULL else 0 end > 1 |
|         0 | C0667D44810456FC45F1616D5A4E6CF6 | select * from t1 where case when c1 > 1 then 1 when c2 > 1 then 2 else 0 end > 1    |
+-----------+----------------------------------+-------------------------------------------------------------------------------------+
expect generate 2 plan
## The following test case generate 1 plan, for that can't be rewrite SQL, we don't add constraint
alter system flush plan cache global;

== case 8
EXPLAIN select * from t1 where case when c1 > 1 then 1 when c2 > 1 then NULL end > 1;
Query Plan
===============================================
|ID|OPERATOR       |NAME|EST.ROWS|EST.TIME(us)|
-----------------------------------------------
|0 |TABLE FULL SCAN|t1  |5       |5           |
===============================================
Outputs & filters:
-------------------------------------
  0 - output([t1.c1], [t1.c2], [t1.c3], [t1.c4], [t1.c5], [t1.c6]), filter(nil), startup_filter([0]), rowset=256
      access([t1.c1], [t1.c2], [t1.c3], [t1.c4], [t1.c5], [t1.c6]), partitions(p0)
      is_index_back=false, is_global_index=false, 
      range_key([t1.__pk_increment]), range(MIN ; MAX)always true
select * from t1 where case when c1 > 1 then 1 when c2 > 1 then NULL end > 1;
+------+------+------+------+------+------+
| c1   | c2   | c3   | c4   | c5   | c6   |
+------+------+------+------+------+------+
+------+------+------+------+------+------+
EXPLAIN select * from t1 where case when c1 > 1 then 1 when c2 > 1 then 2 else 0 end > 1;
Query Plan
===============================================
|ID|OPERATOR       |NAME|EST.ROWS|EST.TIME(us)|
-----------------------------------------------
|0 |TABLE FULL SCAN|t1  |1       |5           |
===============================================
Outputs & filters:
-------------------------------------
  0 - output([t1.c1], [t1.c2], [t1.c3], [t1.c4], [t1.c5], [t1.c6]), filter([t1.c2 > 1], [lnnvl(cast(t1.c1 > 1, TINYINT(-1, 0)))]), rowset=256
      access([t1.c1], [t1.c2], [t1.c3], [t1.c4], [t1.c5], [t1.c6]), partitions(p0)
      is_index_back=false, is_global_index=false, filter_before_indexback[false,false], 
      range_key([t1.__pk_increment]), range(MIN ; MAX)always true
select * from t1 where case when c1 > 1 then 1 when c2 > 1 then 2 else 0 end > 1;
+------+------+------+------+------+------+
| c1   | c2   | c3   | c4   | c5   | c6   |
+------+------+------+------+------+------+
+------+------+------+------+------+------+
EXPLAIN select hit_count, sql_id, query_sql from oceanbase.V$OB_PLAN_CACHE_PLAN_STAT where statement like "select * from t1 where case when c1 > ? then ? when c2 > ? then ? else ? end > ?";
Query Plan
==================================================================
|ID|OPERATOR       |NAME                   |EST.ROWS|EST.TIME(us)|
------------------------------------------------------------------
|0 |TABLE FULL SCAN|__all_virtual_plan_stat|16      |150         |
==================================================================
Outputs & filters:
-------------------------------------
  0 - output([__all_virtual_plan_stat.hit_count], [__all_virtual_plan_stat.sql_id], [__all_virtual_plan_stat.query_sql]), filter([(T_OP_LIKE, cast(__all_virtual_plan_stat.statement,
       VARCHAR(1048576)), cast('select * from t1 where case when c1 > ? then ? when c2 > ? then ? else ? end > ?', VARCHAR(1048576)), '\\')], [__all_virtual_plan_stat.object_status 
      = 0], [__all_virtual_plan_stat.is_in_pc = 1], [__all_virtual_plan_stat.svr_port = RPC_PORT()], [__all_virtual_plan_stat.svr_ip = HOST_IP()])
      access([__all_virtual_plan_stat.svr_ip], [__all_virtual_plan_stat.svr_port], [__all_virtual_plan_stat.object_status], [__all_virtual_plan_stat.is_in_pc],
       [__all_virtual_plan_stat.sql_id], [__all_virtual_plan_stat.statement], [__all_virtual_plan_stat.query_sql], [__all_virtual_plan_stat.hit_count]), partitions(p1)
      is_index_back=false, is_global_index=false, filter_before_indexback[false,false,false,false,false], 
      range_key(nil), range(MIN ; MAX)
select hit_count, sql_id, query_sql from oceanbase.V$OB_PLAN_CACHE_PLAN_STAT where statement like "select * from t1 where case when c1 > ? then ? when c2 > ? then ? else ? end > ?";
+-----------+----------------------------------+----------------------------------------------------------------------------------+
| hit_count | sql_id                           | query_sql                                                                        |
+-----------+----------------------------------+----------------------------------------------------------------------------------+
|         0 | C0667D44810456FC45F1616D5A4E6CF6 | select * from t1 where case when c1 > 1 then 1 when c2 > 1 then 2 else 0 end > 1 |
+-----------+----------------------------------+----------------------------------------------------------------------------------+
expect generate 2 plan
## The following test case generate 1 plan, for that can't be rewrite SQL, we don't add constraint
alter system flush plan cache global;

== case 9
EXPLAIN select * from t1 where case when c1 > 1 then 1 when c2 > 1 then 2 else 3 end > 1;
Query Plan
===============================================
|ID|OPERATOR       |NAME|EST.ROWS|EST.TIME(us)|
-----------------------------------------------
|0 |TABLE FULL SCAN|t1  |2       |5           |
===============================================
Outputs & filters:
-------------------------------------
  0 - output([t1.c1], [t1.c2], [t1.c3], [t1.c4], [t1.c5], [t1.c6]), filter([CASE WHEN t1.c1 > 1 THEN 1 WHEN t1.c2 > 1 THEN 2 ELSE 3 END > 1]), rowset=256
      access([t1.c1], [t1.c2], [t1.c3], [t1.c4], [t1.c5], [t1.c6]), partitions(p0)
      is_index_back=false, is_global_index=false, filter_before_indexback[false], 
      range_key([t1.__pk_increment]), range(MIN ; MAX)always true
select * from t1 where case when c1 > 1 then 1 when c2 > 1 then 2 else 3 end > 1;
+------+------+------+------+------+------+
| c1   | c2   | c3   | c4   | c5   | c6   |
+------+------+------+------+------+------+
|    1 |    1 |    1 |    1 |    1 |    1 |
+------+------+------+------+------+------+
EXPLAIN select * from t1 where case when c1 > 1 then 1 when c2 > 1 then 2 else 3 end > 5;
Query Plan
===============================================
|ID|OPERATOR       |NAME|EST.ROWS|EST.TIME(us)|
-----------------------------------------------
|0 |TABLE FULL SCAN|t1  |5       |5           |
===============================================
Outputs & filters:
-------------------------------------
  0 - output([t1.c1], [t1.c2], [t1.c3], [t1.c4], [t1.c5], [t1.c6]), filter(nil), startup_filter([0]), rowset=256
      access([t1.c1], [t1.c2], [t1.c3], [t1.c4], [t1.c5], [t1.c6]), partitions(p0)
      is_index_back=false, is_global_index=false, 
      range_key([t1.__pk_increment]), range(MIN ; MAX)always true
select * from t1 where case when c1 > 1 then 1 when c2 > 1 then 2 else 3 end > 5;
+------+------+------+------+------+------+
| c1   | c2   | c3   | c4   | c5   | c6   |
+------+------+------+------+------+------+
+------+------+------+------+------+------+
EXPLAIN select hit_count, sql_id, query_sql from oceanbase.V$OB_PLAN_CACHE_PLAN_STAT where statement like "select * from t1 where case when c1 > ? then ? when c2 > ? then ? else ? end > ?";
Query Plan
==================================================================
|ID|OPERATOR       |NAME                   |EST.ROWS|EST.TIME(us)|
------------------------------------------------------------------
|0 |TABLE FULL SCAN|__all_virtual_plan_stat|16      |150         |
==================================================================
Outputs & filters:
-------------------------------------
  0 - output([__all_virtual_plan_stat.hit_count], [__all_virtual_plan_stat.sql_id], [__all_virtual_plan_stat.query_sql]), filter([(T_OP_LIKE, cast(__all_virtual_plan_stat.statement,
       VARCHAR(1048576)), cast('select * from t1 where case when c1 > ? then ? when c2 > ? then ? else ? end > ?', VARCHAR(1048576)), '\\')], [__all_virtual_plan_stat.object_status 
      = 0], [__all_virtual_plan_stat.is_in_pc = 1], [__all_virtual_plan_stat.svr_port = RPC_PORT()], [__all_virtual_plan_stat.svr_ip = HOST_IP()])
      access([__all_virtual_plan_stat.svr_ip], [__all_virtual_plan_stat.svr_port], [__all_virtual_plan_stat.object_status], [__all_virtual_plan_stat.is_in_pc],
       [__all_virtual_plan_stat.sql_id], [__all_virtual_plan_stat.statement], [__all_virtual_plan_stat.query_sql], [__all_virtual_plan_stat.hit_count]), partitions(p1)
      is_index_back=false, is_global_index=false, filter_before_indexback[false,false,false,false,false], 
      range_key(nil), range(MIN ; MAX)
select hit_count, sql_id, query_sql from oceanbase.V$OB_PLAN_CACHE_PLAN_STAT where statement like "select * from t1 where case when c1 > ? then ? when c2 > ? then ? else ? end > ?";
+-----------+----------------------------------+----------------------------------------------------------------------------------+
| hit_count | sql_id                           | query_sql                                                                        |
+-----------+----------------------------------+----------------------------------------------------------------------------------+
|         1 | C0667D44810456FC45F1616D5A4E6CF6 | select * from t1 where case when c1 > 1 then 1 when c2 > 1 then 2 else 3 end > 1 |
+-----------+----------------------------------+----------------------------------------------------------------------------------+
expect generate 1 plan
alter system flush plan cache global;

== case 9.1
EXPLAIN select * from t1 where case when c1 > 1 then 1 when c2 > 1 then 2 else 3 end > 5;
Query Plan
===============================================
|ID|OPERATOR       |NAME|EST.ROWS|EST.TIME(us)|
-----------------------------------------------
|0 |TABLE FULL SCAN|t1  |5       |5           |
===============================================
Outputs & filters:
-------------------------------------
  0 - output([t1.c1], [t1.c2], [t1.c3], [t1.c4], [t1.c5], [t1.c6]), filter(nil), startup_filter([0]), rowset=256
      access([t1.c1], [t1.c2], [t1.c3], [t1.c4], [t1.c5], [t1.c6]), partitions(p0)
      is_index_back=false, is_global_index=false, 
      range_key([t1.__pk_increment]), range(MIN ; MAX)always true
select * from t1 where case when c1 > 1 then 1 when c2 > 1 then 2 else 3 end > 5;
+------+------+------+------+------+------+
| c1   | c2   | c3   | c4   | c5   | c6   |
+------+------+------+------+------+------+
+------+------+------+------+------+------+
EXPLAIN select * from t1 where case when c1 > 1 then 1 when c2 > 1 then 2 else 3 end > 1;
Query Plan
===============================================
|ID|OPERATOR       |NAME|EST.ROWS|EST.TIME(us)|
-----------------------------------------------
|0 |TABLE FULL SCAN|t1  |2       |5           |
===============================================
Outputs & filters:
-------------------------------------
  0 - output([t1.c1], [t1.c2], [t1.c3], [t1.c4], [t1.c5], [t1.c6]), filter([CASE WHEN t1.c1 > 1 THEN 1 WHEN t1.c2 > 1 THEN 2 ELSE 3 END > 1]), rowset=256
      access([t1.c1], [t1.c2], [t1.c3], [t1.c4], [t1.c5], [t1.c6]), partitions(p0)
      is_index_back=false, is_global_index=false, filter_before_indexback[false], 
      range_key([t1.__pk_increment]), range(MIN ; MAX)always true
select * from t1 where case when c1 > 1 then 1 when c2 > 1 then 2 else 3 end > 1;
+------+------+------+------+------+------+
| c1   | c2   | c3   | c4   | c5   | c6   |
+------+------+------+------+------+------+
|    1 |    1 |    1 |    1 |    1 |    1 |
+------+------+------+------+------+------+
EXPLAIN select hit_count, sql_id, query_sql from oceanbase.V$OB_PLAN_CACHE_PLAN_STAT where statement like "select * from t1 where case when c1 > ? then ? when c2 > ? then ? else ? end > ?";
Query Plan
==================================================================
|ID|OPERATOR       |NAME                   |EST.ROWS|EST.TIME(us)|
------------------------------------------------------------------
|0 |TABLE FULL SCAN|__all_virtual_plan_stat|16      |150         |
==================================================================
Outputs & filters:
-------------------------------------
  0 - output([__all_virtual_plan_stat.hit_count], [__all_virtual_plan_stat.sql_id], [__all_virtual_plan_stat.query_sql]), filter([(T_OP_LIKE, cast(__all_virtual_plan_stat.statement,
       VARCHAR(1048576)), cast('select * from t1 where case when c1 > ? then ? when c2 > ? then ? else ? end > ?', VARCHAR(1048576)), '\\')], [__all_virtual_plan_stat.object_status 
      = 0], [__all_virtual_plan_stat.is_in_pc = 1], [__all_virtual_plan_stat.svr_port = RPC_PORT()], [__all_virtual_plan_stat.svr_ip = HOST_IP()])
      access([__all_virtual_plan_stat.svr_ip], [__all_virtual_plan_stat.svr_port], [__all_virtual_plan_stat.object_status], [__all_virtual_plan_stat.is_in_pc],
       [__all_virtual_plan_stat.sql_id], [__all_virtual_plan_stat.statement], [__all_virtual_plan_stat.query_sql], [__all_virtual_plan_stat.hit_count]), partitions(p1)
      is_index_back=false, is_global_index=false, filter_before_indexback[false,false,false,false,false], 
      range_key(nil), range(MIN ; MAX)
select hit_count, sql_id, query_sql from oceanbase.V$OB_PLAN_CACHE_PLAN_STAT where statement like "select * from t1 where case when c1 > ? then ? when c2 > ? then ? else ? end > ?";
+-----------+----------------------------------+----------------------------------------------------------------------------------+
| hit_count | sql_id                           | query_sql                                                                        |
+-----------+----------------------------------+----------------------------------------------------------------------------------+
|         0 | C0667D44810456FC45F1616D5A4E6CF6 | select * from t1 where case when c1 > 1 then 1 when c2 > 1 then 2 else 3 end > 5 |
|         0 | C0667D44810456FC45F1616D5A4E6CF6 | select * from t1 where case when c1 > 1 then 1 when c2 > 1 then 2 else 3 end > 1 |
+-----------+----------------------------------+----------------------------------------------------------------------------------+
expect generate 2 plan
## The following test case generate 1 plan, for NULL we add NVL(NULL, FALSE) as FALSE
alter system flush plan cache global;

== case 10
EXPLAIN select * from t1 where case when 1 > 1 then c1 when NULL > 2 then c2 when 3 > 3 then c3 else c4 end > 1;
Query Plan
===============================================
|ID|OPERATOR       |NAME|EST.ROWS|EST.TIME(us)|
-----------------------------------------------
|0 |TABLE FULL SCAN|t1  |1       |5           |
===============================================
Outputs & filters:
-------------------------------------
  0 - output([t1.c1], [t1.c2], [t1.c3], [t1.c4], [t1.c5], [t1.c6]), filter([t1.c4 > 1]), rowset=256
      access([t1.c1], [t1.c2], [t1.c3], [t1.c4], [t1.c5], [t1.c6]), partitions(p0)
      is_index_back=false, is_global_index=false, filter_before_indexback[false], 
      range_key([t1.__pk_increment]), range(MIN ; MAX)always true
select * from t1 where case when 1 > 1 then c1 when NULL > 2 then c2 when 3 > 3 then c3 else c4 end > 1;
+------+------+------+------+------+------+
| c1   | c2   | c3   | c4   | c5   | c6   |
+------+------+------+------+------+------+
|    2 |    2 |    2 |    2 |    2 |    2 |
|    3 |    3 |    3 |    3 |    3 |    3 |
|    4 |    4 |    4 |    4 |    4 |    4 |
|    5 |    5 |    5 |    5 |    5 |    5 |
+------+------+------+------+------+------+
EXPLAIN select * from t1 where case when 1 > 1 then c1 when 2 > 2 then c2 when 3 > 3 then c3 else c4 end > 1;
Query Plan
===============================================
|ID|OPERATOR       |NAME|EST.ROWS|EST.TIME(us)|
-----------------------------------------------
|0 |TABLE FULL SCAN|t1  |1       |5           |
===============================================
Outputs & filters:
-------------------------------------
  0 - output([t1.c1], [t1.c2], [t1.c3], [t1.c4], [t1.c5], [t1.c6]), filter([t1.c4 > 1]), rowset=256
      access([t1.c1], [t1.c2], [t1.c3], [t1.c4], [t1.c5], [t1.c6]), partitions(p0)
      is_index_back=false, is_global_index=false, filter_before_indexback[false], 
      range_key([t1.__pk_increment]), range(MIN ; MAX)always true
select * from t1 where case when 1 > 1 then c1 when 2 > 2 then c2 when 3 > 3 then c3 else c4 end > 1;
+------+------+------+------+------+------+
| c1   | c2   | c3   | c4   | c5   | c6   |
+------+------+------+------+------+------+
|    2 |    2 |    2 |    2 |    2 |    2 |
|    3 |    3 |    3 |    3 |    3 |    3 |
|    4 |    4 |    4 |    4 |    4 |    4 |
|    5 |    5 |    5 |    5 |    5 |    5 |
+------+------+------+------+------+------+
EXPLAIN select hit_count, sql_id, query_sql from oceanbase.V$OB_PLAN_CACHE_PLAN_STAT where statement like "select * from t1 where case when ? > ? then c1 when ? > ? then c2 when ? > ? then c3 else c4 end > ?";
Query Plan
==================================================================
|ID|OPERATOR       |NAME                   |EST.ROWS|EST.TIME(us)|
------------------------------------------------------------------
|0 |TABLE FULL SCAN|__all_virtual_plan_stat|16      |150         |
==================================================================
Outputs & filters:
-------------------------------------
  0 - output([__all_virtual_plan_stat.hit_count], [__all_virtual_plan_stat.sql_id], [__all_virtual_plan_stat.query_sql]), filter([(T_OP_LIKE, cast(__all_virtual_plan_stat.statement,
       VARCHAR(1048576)), cast('select * from t1 where case when ? > ? then c1 when ? > ? then c2 when ? > ? then c3 else c4 end > ?', VARCHAR(1048576)), '\\')],
       [__all_virtual_plan_stat.object_status = 0], [__all_virtual_plan_stat.is_in_pc = 1], [__all_virtual_plan_stat.svr_port = RPC_PORT()], [__all_virtual_plan_stat.svr_ip 
      = HOST_IP()])
      access([__all_virtual_plan_stat.svr_ip], [__all_virtual_plan_stat.svr_port], [__all_virtual_plan_stat.object_status], [__all_virtual_plan_stat.is_in_pc],
       [__all_virtual_plan_stat.sql_id], [__all_virtual_plan_stat.statement], [__all_virtual_plan_stat.query_sql], [__all_virtual_plan_stat.hit_count]), partitions(p1)
      is_index_back=false, is_global_index=false, filter_before_indexback[false,false,false,false,false], 
      range_key(nil), range(MIN ; MAX)
select hit_count, sql_id, query_sql from oceanbase.V$OB_PLAN_CACHE_PLAN_STAT where statement like "select * from t1 where case when ? > ? then c1 when ? > ? then c2 when ? > ? then c3 else c4 end > ?";
+-----------+----------------------------------+---------------------------------------------------------------------------------------------------------+
| hit_count | sql_id                           | query_sql                                                                                               |
+-----------+----------------------------------+---------------------------------------------------------------------------------------------------------+
|         0 | 33DD0D8C3E6C37CBC645380CB515B346 | select * from t1 where case when 1 > 1 then c1 when NULL > 2 then c2 when 3 > 3 then c3 else c4 end > 1 |
|         0 | 33DD0D8C3E6C37CBC645380CB515B346 | select * from t1 where case when 1 > 1 then c1 when 2 > 2 then c2 when 3 > 3 then c3 else c4 end > 1    |
+-----------+----------------------------------+---------------------------------------------------------------------------------------------------------+
expect generate 1 plan
alter system flush plan cache global;

== case 11
EXPLAIN select * from t1 where case when 1 > 1 then 1 when c2 > 2 then 2 when 3 > 3 then 3 else 4 end > 0;
Query Plan
===============================================
|ID|OPERATOR       |NAME|EST.ROWS|EST.TIME(us)|
-----------------------------------------------
|0 |TABLE FULL SCAN|t1  |2       |5           |
===============================================
Outputs & filters:
-------------------------------------
  0 - output([t1.c1], [t1.c2], [t1.c3], [t1.c4], [t1.c5], [t1.c6]), filter([CASE WHEN t1.c2 > 2 THEN 2 WHEN 3 > 3 THEN 3 ELSE 4 END > 0]), rowset=256
      access([t1.c2], [t1.c1], [t1.c3], [t1.c4], [t1.c5], [t1.c6]), partitions(p0)
      is_index_back=false, is_global_index=false, filter_before_indexback[false], 
      range_key([t1.__pk_increment]), range(MIN ; MAX)always true
select * from t1 where case when 1 > 1 then 1 when c2 > 2 then 2 when 3 > 3 then 3 else 4 end > 0;
+------+------+------+------+------+------+
| c1   | c2   | c3   | c4   | c5   | c6   |
+------+------+------+------+------+------+
|    1 |    1 |    1 |    1 |    1 |    1 |
|    2 |    2 |    2 |    2 |    2 |    2 |
|    3 |    3 |    3 |    3 |    3 |    3 |
|    4 |    4 |    4 |    4 |    4 |    4 |
|    5 |    5 |    5 |    5 |    5 |    5 |
+------+------+------+------+------+------+
EXPLAIN select * from t1 where case when 1 > 1 then 1 when c2 > 2 then 2 when 3 > 3 then 3 else 4 end > 3;
Query Plan
===============================================
|ID|OPERATOR       |NAME|EST.ROWS|EST.TIME(us)|
-----------------------------------------------
|0 |TABLE FULL SCAN|t1  |3       |5           |
===============================================
Outputs & filters:
-------------------------------------
  0 - output([t1.c1], [t1.c2], [t1.c3], [t1.c4], [t1.c5], [t1.c6]), filter([lnnvl(cast(t1.c2 > 2, TINYINT(-1, 0)))]), rowset=256
      access([t1.c2], [t1.c1], [t1.c3], [t1.c4], [t1.c5], [t1.c6]), partitions(p0)
      is_index_back=false, is_global_index=false, filter_before_indexback[false], 
      range_key([t1.__pk_increment]), range(MIN ; MAX)always true
select * from t1 where case when 1 > 1 then 1 when c2 > 2 then 2 when 3 > 3 then 3 else 4 end > 3;
+------+------+------+------+------+------+
| c1   | c2   | c3   | c4   | c5   | c6   |
+------+------+------+------+------+------+
|    1 |    1 |    1 |    1 |    1 |    1 |
|    2 |    2 |    2 |    2 |    2 |    2 |
+------+------+------+------+------+------+
EXPLAIN select hit_count, sql_id, query_sql from oceanbase.V$OB_PLAN_CACHE_PLAN_STAT where statement like "select * from t1 where case when ? > ? then ? when c2 > ? then ? when ? > ? then ? else ? end > ?";
Query Plan
==================================================================
|ID|OPERATOR       |NAME                   |EST.ROWS|EST.TIME(us)|
------------------------------------------------------------------
|0 |TABLE FULL SCAN|__all_virtual_plan_stat|16      |150         |
==================================================================
Outputs & filters:
-------------------------------------
  0 - output([__all_virtual_plan_stat.hit_count], [__all_virtual_plan_stat.sql_id], [__all_virtual_plan_stat.query_sql]), filter([(T_OP_LIKE, cast(__all_virtual_plan_stat.statement,
       VARCHAR(1048576)), cast('select * from t1 where case when ? > ? then ? when c2 > ? then ? when ? > ? then ? else ? end > ?', VARCHAR(1048576)), '\\')],
       [__all_virtual_plan_stat.object_status = 0], [__all_virtual_plan_stat.is_in_pc = 1], [__all_virtual_plan_stat.svr_port = RPC_PORT()], [__all_virtual_plan_stat.svr_ip 
      = HOST_IP()])
      access([__all_virtual_plan_stat.svr_ip], [__all_virtual_plan_stat.svr_port], [__all_virtual_plan_stat.object_status], [__all_virtual_plan_stat.is_in_pc],
       [__all_virtual_plan_stat.sql_id], [__all_virtual_plan_stat.statement], [__all_virtual_plan_stat.query_sql], [__all_virtual_plan_stat.hit_count]), partitions(p1)
      is_index_back=false, is_global_index=false, filter_before_indexback[false,false,false,false,false], 
      range_key(nil), range(MIN ; MAX)
select hit_count, sql_id, query_sql from oceanbase.V$OB_PLAN_CACHE_PLAN_STAT where statement like "select * from t1 where case when ? > ? then ? when c2 > ? then ? when ? > ? then ? else ? end > ?";
+-----------+----------------------------------+---------------------------------------------------------------------------------------------------+
| hit_count | sql_id                           | query_sql                                                                                         |
+-----------+----------------------------------+---------------------------------------------------------------------------------------------------+
|         1 | C0AAFE143F3B0422D20F79461648D647 | select * from t1 where case when 1 > 1 then 1 when c2 > 2 then 2 when 3 > 3 then 3 else 4 end > 0 |
+-----------+----------------------------------+---------------------------------------------------------------------------------------------------+
expect generate 1 plan

**************************** index scan test **************************** 
set ob_enable_plan_cache = 0;
create index t1c2 on t1(c2);

== case 1
EXPLAIN select /*+no_rewrite*/ * from t1 where case when c1 > 1 then 1 when c2 > 2 then 2 else 0 end > 1;
Query Plan
===============================================
|ID|OPERATOR       |NAME|EST.ROWS|EST.TIME(us)|
-----------------------------------------------
|0 |TABLE FULL SCAN|t1  |2       |5           |
===============================================
Outputs & filters:
-------------------------------------
  0 - output([t1.c1], [t1.c2], [t1.c3], [t1.c4], [t1.c5], [t1.c6]), filter([CASE WHEN t1.c1 > 1 THEN 1 WHEN t1.c2 > 2 THEN 2 ELSE 0 END > 1]), rowset=256
      access([t1.c1], [t1.c2], [t1.c3], [t1.c4], [t1.c5], [t1.c6]), partitions(p0)
      is_index_back=false, is_global_index=false, filter_before_indexback[false], 
      range_key([t1.__pk_increment]), range(MIN ; MAX)always true
select /*+no_rewrite*/ * from t1 where case when c1 > 1 then 1 when c2 > 2 then 2 else 0 end > 1;
+------+------+------+------+------+------+
| c1   | c2   | c3   | c4   | c5   | c6   |
+------+------+------+------+------+------+
+------+------+------+------+------+------+
EXPLAIN select * from t1 where case when c1 > 1 then 1 when c2 > 2 then 2 else 0 end > 1;
Query Plan
====================================================
|ID|OPERATOR        |NAME    |EST.ROWS|EST.TIME(us)|
----------------------------------------------------
|0 |TABLE RANGE SCAN|t1(t1c2)|2       |13          |
====================================================
Outputs & filters:
-------------------------------------
  0 - output([t1.c1], [t1.c2], [t1.c3], [t1.c4], [t1.c5], [t1.c6]), filter([lnnvl(cast(t1.c1 > 1, TINYINT(-1, 0)))]), rowset=256
      access([t1.__pk_increment], [t1.c1], [t1.c2], [t1.c3], [t1.c4], [t1.c5], [t1.c6]), partitions(p0)
      is_index_back=true, is_global_index=false, filter_before_indexback[false], 
      range_key([t1.c2], [t1.__pk_increment]), range(2,MAX ; MAX,MAX), 
      range_cond([t1.c2 > 2])
select * from t1 where case when c1 > 1 then 1 when c2 > 2 then 2 else 0 end > 1;
+------+------+------+------+------+------+
| c1   | c2   | c3   | c4   | c5   | c6   |
+------+------+------+------+------+------+
+------+------+------+------+------+------+
expect use range scan on index t1c2 

== case 2
EXPLAIN select /*+no_rewrite*/ * from t1 where case when c1 > 1 then 1 when c2 > 2 then 2 end > 1;
Query Plan
===============================================
|ID|OPERATOR       |NAME|EST.ROWS|EST.TIME(us)|
-----------------------------------------------
|0 |TABLE FULL SCAN|t1  |2       |5           |
===============================================
Outputs & filters:
-------------------------------------
  0 - output([t1.c1], [t1.c2], [t1.c3], [t1.c4], [t1.c5], [t1.c6]), filter([CASE WHEN t1.c1 > 1 THEN 1 WHEN t1.c2 > 2 THEN 2 ELSE NULL END > 1]), rowset=256
      access([t1.c1], [t1.c2], [t1.c3], [t1.c4], [t1.c5], [t1.c6]), partitions(p0)
      is_index_back=false, is_global_index=false, filter_before_indexback[false], 
      range_key([t1.__pk_increment]), range(MIN ; MAX)always true
select /*+no_rewrite*/ * from t1 where case when c1 > 1 then 1 when c2 > 2 then 2 end > 1;
+------+------+------+------+------+------+
| c1   | c2   | c3   | c4   | c5   | c6   |
+------+------+------+------+------+------+
+------+------+------+------+------+------+
EXPLAIN select * from t1 where case when c1 > 1 then 1 when c2 > 2 then 2 end > 1;
Query Plan
====================================================
|ID|OPERATOR        |NAME    |EST.ROWS|EST.TIME(us)|
----------------------------------------------------
|0 |TABLE RANGE SCAN|t1(t1c2)|2       |13          |
====================================================
Outputs & filters:
-------------------------------------
  0 - output([t1.c1], [t1.c2], [t1.c3], [t1.c4], [t1.c5], [t1.c6]), filter([lnnvl(cast(t1.c1 > 1, TINYINT(-1, 0)))]), rowset=256
      access([t1.__pk_increment], [t1.c1], [t1.c2], [t1.c3], [t1.c4], [t1.c5], [t1.c6]), partitions(p0)
      is_index_back=true, is_global_index=false, filter_before_indexback[false], 
      range_key([t1.c2], [t1.__pk_increment]), range(2,MAX ; MAX,MAX), 
      range_cond([t1.c2 > 2])
select * from t1 where case when c1 > 1 then 1 when c2 > 2 then 2 end > 1;
+------+------+------+------+------+------+
| c1   | c2   | c3   | c4   | c5   | c6   |
+------+------+------+------+------+------+
+------+------+------+------+------+------+
expect use range scan on index t1c2 

== case 3
EXPLAIN select /*+no_rewrite*/ * from t1 where case when c1 > 1 then 1 when c2 > 2 then 2 else c3 end > 1;
Query Plan
===============================================
|ID|OPERATOR       |NAME|EST.ROWS|EST.TIME(us)|
-----------------------------------------------
|0 |TABLE FULL SCAN|t1  |2       |5           |
===============================================
Outputs & filters:
-------------------------------------
  0 - output([t1.c1], [t1.c2], [t1.c3], [t1.c4], [t1.c5], [t1.c6]), filter([CASE WHEN t1.c1 > 1 THEN 1 WHEN t1.c2 > 2 THEN 2 ELSE t1.c3 END > 1]), rowset=256
      access([t1.c1], [t1.c2], [t1.c3], [t1.c4], [t1.c5], [t1.c6]), partitions(p0)
      is_index_back=false, is_global_index=false, filter_before_indexback[false], 
      range_key([t1.__pk_increment]), range(MIN ; MAX)always true
select /*+no_rewrite*/ * from t1 where case when c1 > 1 then 1 when c2 > 2 then 2 else c3 end > 1;
+------+------+------+------+------+------+
| c1   | c2   | c3   | c4   | c5   | c6   |
+------+------+------+------+------+------+
+------+------+------+------+------+------+
EXPLAIN select * from t1 where case when c1 > 1 then 1 when c2 > 2 then 2 else c3 end > 1;
Query Plan
===============================================
|ID|OPERATOR       |NAME|EST.ROWS|EST.TIME(us)|
-----------------------------------------------
|0 |TABLE FULL SCAN|t1  |2       |5           |
===============================================
Outputs & filters:
-------------------------------------
  0 - output([t1.c1], [t1.c2], [t1.c3], [t1.c4], [t1.c5], [t1.c6]), filter([CASE WHEN t1.c1 > 1 THEN 1 WHEN t1.c2 > 2 THEN 2 ELSE t1.c3 END > 1]), rowset=256
      access([t1.c1], [t1.c2], [t1.c3], [t1.c4], [t1.c5], [t1.c6]), partitions(p0)
      is_index_back=false, is_global_index=false, filter_before_indexback[false], 
      range_key([t1.__pk_increment]), range(MIN ; MAX)always true
select * from t1 where case when c1 > 1 then 1 when c2 > 2 then 2 else c3 end > 1;
+------+------+------+------+------+------+
| c1   | c2   | c3   | c4   | c5   | c6   |
+------+------+------+------+------+------+
+------+------+------+------+------+------+
expect don't use range scan 
end test
USE DB_CONVERT_CASE_WHEN;
drop database DB_CONVERT_CASE_WHEN;

