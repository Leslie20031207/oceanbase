set @@ob_enable_transformation=0;
drop table if exists t1,t2,t3;
CREATE TABLE t1 (
c1 int primary key,
c2 int, c3 int
) partition by hash(c1) partitions 4;
INSERT INTO t1 VALUES (1,1,1);
INSERT INTO t1 VALUES (2,2,2);
INSERT INTO t1 VALUES (3,3,3);
create table t2 (
c1 int primary key,
c2 int, c3 int
) partition by hash(c1) partitions 5;
INSERT INTO t2 VALUES (1,1,1);
INSERT INTO t2 VALUES (2,2,2);
INSERT INTO t2 VALUES (3,3,3);
create table t3 (
c1 int primary key,
c2 int, c3 int
) partition by hash(c1) partitions 6;
INSERT INTO t3 VALUES (1,1,1);
INSERT INTO t3 VALUES (2,2,2);
INSERT INTO t3 VALUES (3,3,3);
result_format: 4
explain_protocol: 2
## 1 nestedloop jion
EXPLAIN select /*+use_nl(t1 t2), blocking('all')*/ t1.c1, t2.c1 from t1 join t2 on t1.c1 = t2.c1 order by t1.c1, t2.c1;
Query Plan
===============================================================================
|ID|OPERATOR                                   |NAME    |EST.ROWS|EST.TIME(us)|
-------------------------------------------------------------------------------
|0 |MATERIAL                                   |        |3       |68          |
|1 |└─PX COORDINATOR MERGE SORT                |        |3       |68          |
|2 |  └─EXCHANGE OUT DISTR                     |:EX10001|3       |67          |
|3 |    └─MATERIAL                             |        |3       |65          |
|4 |      └─SORT                               |        |3       |65          |
|5 |        └─MATERIAL                         |        |3       |65          |
|6 |          └─NESTED-LOOP JOIN               |        |3       |65          |
|7 |            ├─MATERIAL                     |        |3       |9           |
|8 |            │ └─EXCHANGE IN DISTR          |        |3       |9           |
|9 |            │   └─EXCHANGE OUT DISTR (PKEY)|:EX10000|3       |8           |
|10|            │     └─MATERIAL               |        |3       |7           |
|11|            │       └─PX PARTITION ITERATOR|        |3       |7           |
|12|            │         └─MATERIAL           |        |3       |7           |
|13|            │           └─TABLE FULL SCAN  |t1      |3       |7           |
|14|            └─PX PARTITION ITERATOR        |        |1       |90          |
|15|              └─TABLE GET                  |t2      |1       |90          |
===============================================================================
Outputs & filters:
-------------------------------------
  0 - output([t1.c1], [t2.c1]), filter(nil), rowset=256
  1 - output([t1.c1], [t2.c1]), filter(nil), rowset=256
      sort_keys([t1.c1, ASC])
  2 - output([t1.c1], [t2.c1]), filter(nil), rowset=256
      dop=1
  3 - output([t1.c1], [t2.c1]), filter(nil), rowset=256
  4 - output([t1.c1], [t2.c1]), filter(nil), rowset=256
      sort_keys([t1.c1, ASC]), local merge sort
  5 - output([t1.c1], [t2.c1]), filter(nil), rowset=256
  6 - output([t1.c1], [t2.c1]), filter(nil), rowset=256
      conds(nil), nl_params_([t1.c1(:0)]), use_batch=false
  7 - output([t1.c1], [PARTITION_ID]), filter(nil), rowset=256
  8 - output([t1.c1], [PARTITION_ID]), filter(nil), rowset=256
  9 - output([t1.c1], [PARTITION_ID]), filter(nil), rowset=256
      (#keys=1, [t1.c1]), dop=1
 10 - output([t1.c1]), filter(nil), rowset=256
 11 - output([t1.c1]), filter(nil), rowset=256
      force partition granule
 12 - output([t1.c1]), filter(nil), rowset=256
 13 - output([t1.c1]), filter(nil), rowset=256
      access([t1.c1]), partitions(p[0-3])
      is_index_back=false, is_global_index=false,
      range_key([t1.c1]), range(MIN ; MAX)always true
 14 - output([t2.c1]), filter(nil), rowset=256
      affinitize, force partition granule
 15 - output([t2.c1]), filter(nil), rowset=256
      access([t2.c1]), partitions(p[0-4])
      is_index_back=false, is_global_index=false,
      range_key([t2.c1]), range(MIN ; MAX),
      range_cond([:0 = t2.c1])
select /*+use_nl(t1 t2), blocking('all')*/ t1.c1, t2.c1 from t1 join t2 on t1.c1 = t2.c1 order by t1.c1, t2.c1;
+----+----+
| c1 | c1 |
+----+----+
|  1 |  1 |
|  2 |  2 |
|  3 |  3 |
+----+----+
EXPLAIN select /*+use_nl(t1 t2), blocking('all')*/ t1.c1, t2.c1 from t1 join t2 on t1.c1 = t2.c1 where t1.c1 between 5 and 24 order by t1.c1, t2.c1;
Query Plan
===============================================================================
|ID|OPERATOR                                   |NAME    |EST.ROWS|EST.TIME(us)|
-------------------------------------------------------------------------------
|0 |MATERIAL                                   |        |1       |28          |
|1 |└─PX COORDINATOR MERGE SORT                |        |1       |28          |
|2 |  └─EXCHANGE OUT DISTR                     |:EX10001|1       |27          |
|3 |    └─MATERIAL                             |        |1       |27          |
|4 |      └─SORT                               |        |1       |27          |
|5 |        └─MATERIAL                         |        |1       |26          |
|6 |          └─NESTED-LOOP JOIN               |        |1       |26          |
|7 |            ├─MATERIAL                     |        |1       |8           |
|8 |            │ └─EXCHANGE IN DISTR          |        |1       |8           |
|9 |            │   └─EXCHANGE OUT DISTR (PKEY)|:EX10000|1       |8           |
|10|            │     └─MATERIAL               |        |1       |7           |
|11|            │       └─PX PARTITION ITERATOR|        |1       |7           |
|12|            │         └─MATERIAL           |        |1       |7           |
|13|            │           └─TABLE RANGE SCAN |t1      |1       |7           |
|14|            └─PX PARTITION ITERATOR        |        |1       |90          |
|15|              └─TABLE GET                  |t2      |1       |90          |
===============================================================================
Outputs & filters:
-------------------------------------
  0 - output([t1.c1], [t2.c1]), filter(nil), rowset=256
  1 - output([t1.c1], [t2.c1]), filter(nil), rowset=256
      sort_keys([t1.c1, ASC])
  2 - output([t1.c1], [t2.c1]), filter(nil), rowset=256
      dop=1
  3 - output([t1.c1], [t2.c1]), filter(nil), rowset=256
  4 - output([t1.c1], [t2.c1]), filter(nil), rowset=256
      sort_keys([t1.c1, ASC]), local merge sort
  5 - output([t1.c1], [t2.c1]), filter(nil), rowset=256
  6 - output([t1.c1], [t2.c1]), filter(nil), rowset=256
      conds(nil), nl_params_([t1.c1(:0)]), use_batch=false
  7 - output([t1.c1], [PARTITION_ID]), filter(nil), rowset=256
  8 - output([t1.c1], [PARTITION_ID]), filter(nil), rowset=256
  9 - output([t1.c1], [PARTITION_ID]), filter(nil), rowset=256
      (#keys=1, [t1.c1]), dop=1
 10 - output([t1.c1]), filter(nil), rowset=256
 11 - output([t1.c1]), filter(nil), rowset=256
      force partition granule
 12 - output([t1.c1]), filter(nil), rowset=256
 13 - output([t1.c1]), filter(nil), rowset=256
      access([t1.c1]), partitions(p[0-3])
      is_index_back=false, is_global_index=false,
      range_key([t1.c1]), range[5 ; 24],
      range_cond([t1.c1 >= 5], [t1.c1 <= 24])
 14 - output([t2.c1]), filter(nil), rowset=256
      affinitize, force partition granule
 15 - output([t2.c1]), filter(nil), rowset=256
      access([t2.c1]), partitions(p[0-4])
      is_index_back=false, is_global_index=false,
      range_key([t2.c1]), range(MIN ; MAX),
      range_cond([:0 = t2.c1])
select /*+use_nl(t1 t2), blocking('all')*/ t1.c1, t2.c1 from t1 join t2 on t1.c1 = t2.c1 where t1.c1 between 5 and 24 order by t1.c1, t2.c1;
+----+----+
| c1 | c1 |
+----+----+
+----+----+

## 2 subplan filter
EXPLAIN select /*+blocking('all')*/ * from t1 order by c1,(select c1 from t2 limit 1);
Query Plan
=========================================================================
|ID|OPERATOR                             |NAME    |EST.ROWS|EST.TIME(us)|
-------------------------------------------------------------------------
|0 |MATERIAL                             |        |3       |22          |
|1 |└─SORT                               |        |3       |21          |
|2 |  └─MATERIAL                         |        |3       |21          |
|3 |    └─SUBPLAN FILTER                 |        |3       |21          |
|4 |      ├─MATERIAL                     |        |3       |12          |
|5 |      │ └─PX COORDINATOR             |        |3       |12          |
|6 |      │   └─EXCHANGE OUT DISTR       |:EX10000|3       |11          |
|7 |      │     └─MATERIAL               |        |3       |7           |
|8 |      │       └─PX PARTITION ITERATOR|        |3       |7           |
|9 |      │         └─MATERIAL           |        |3       |7           |
|10|      │           └─TABLE FULL SCAN  |t1      |3       |7           |
|11|      └─LIMIT                        |        |1       |9           |
|12|        └─PX COORDINATOR             |        |1       |9           |
|13|          └─EXCHANGE OUT DISTR       |:EX20000|1       |9           |
|14|            └─LIMIT                  |        |1       |9           |
|15|              └─PX PARTITION ITERATOR|        |1       |9           |
|16|                └─TABLE FULL SCAN    |t2      |1       |9           |
=========================================================================
Outputs & filters:
-------------------------------------
  0 - output([t1.c1], [t1.c2], [t1.c3]), filter(nil), rowset=256
  1 - output([t1.c1], [t1.c2], [t1.c3]), filter(nil), rowset=256
      sort_keys([t1.c1, ASC]), local merge sort
  2 - output([t1.c1], [t1.c2], [t1.c3]), filter(nil), rowset=256
  3 - output([t1.c1], [t1.c2], [t1.c3]), filter(nil), rowset=256
      exec_params_(nil), onetime_exprs_([subquery(1)(:0)]), init_plan_idxs_(nil), use_batch=false
  4 - output([t1.c1], [t1.c2], [t1.c3]), filter(nil), rowset=256
  5 - output([t1.c1], [t1.c2], [t1.c3]), filter(nil), rowset=256
  6 - output([t1.c1], [t1.c2], [t1.c3]), filter(nil), rowset=256
      dop=1
  7 - output([t1.c1], [t1.c2], [t1.c3]), filter(nil), rowset=256
  8 - output([t1.c1], [t1.c2], [t1.c3]), filter(nil), rowset=256
      force partition granule
  9 - output([t1.c1], [t1.c2], [t1.c3]), filter(nil), rowset=256
 10 - output([t1.c1], [t1.c2], [t1.c3]), filter(nil), rowset=256
      access([t1.c1], [t1.c2], [t1.c3]), partitions(p[0-3])
      is_index_back=false, is_global_index=false,
      range_key([t1.c1]), range(MIN ; MAX)always true
 11 - output([t2.c1]), filter(nil), rowset=256
      limit(1), offset(nil)
 12 - output([t2.c1]), filter(nil), rowset=256
 13 - output([t2.c1]), filter(nil), rowset=256
      dop=1
 14 - output([t2.c1]), filter(nil), rowset=256
      limit(1), offset(nil)
 15 - output([t2.c1]), filter(nil), rowset=256
      force partition granule
 16 - output([t2.c1]), filter(nil), rowset=256
      access([t2.c1]), partitions(p[0-4])
      limit(1), offset(nil), is_index_back=false, is_global_index=false,
      range_key([t2.c1]), range(MIN ; MAX)always true
select /*+blocking('all')*/ * from t1 order by c1,(select c1 from t2 limit 1);
+----+------+------+
| c1 | c2   | c3   |
+----+------+------+
|  1 |    1 |    1 |
|  2 |    2 |    2 |
|  3 |    3 |    3 |
+----+------+------+
EXPLAIN select /*+blocking('all')*/ * from t1 order by c1,(select c1 from t2 where t1.c1=t2.c1);
Query Plan
=========================================================================
|ID|OPERATOR                             |NAME    |EST.ROWS|EST.TIME(us)|
-------------------------------------------------------------------------
|0 |MATERIAL                             |        |3       |282         |
|1 |└─PX COORDINATOR MERGE SORT          |        |3       |281         |
|2 |  └─EXCHANGE OUT DISTR               |:EX10000|3       |280         |
|3 |    └─MATERIAL                       |        |3       |277         |
|4 |      └─SORT                         |        |3       |277         |
|5 |        └─MATERIAL                   |        |3       |276         |
|6 |          └─SUBPLAN FILTER           |        |3       |276         |
|7 |            ├─MATERIAL               |        |3       |7           |
|8 |            │ └─PX PARTITION ITERATOR|        |3       |7           |
|9 |            │   └─MATERIAL           |        |3       |7           |
|10|            │     └─TABLE FULL SCAN  |t1      |3       |7           |
|11|            └─DISTRIBUTED TABLE GET  |t2      |1       |90          |
=========================================================================
Outputs & filters:
-------------------------------------
  0 - output([t1.c1], [t1.c2], [t1.c3]), filter(nil), rowset=256
  1 - output([t1.c1], [t1.c2], [t1.c3]), filter(nil), rowset=256
      sort_keys([t1.c1, ASC], [subquery(1), ASC])
  2 - output([t1.c1], [t1.c2], [t1.c3], [subquery(1)]), filter(nil), rowset=256
      dop=1
  3 - output([t1.c1], [t1.c2], [t1.c3], [subquery(1)]), filter(nil), rowset=256
  4 - output([t1.c1], [t1.c2], [t1.c3], [subquery(1)]), filter(nil), rowset=256
      sort_keys([t1.c1, ASC], [subquery(1), ASC]), local merge sort
  5 - output([t1.c1], [t1.c2], [t1.c3], [subquery(1)]), filter(nil), rowset=256
  6 - output([t1.c1], [t1.c2], [t1.c3], [subquery(1)]), filter(nil), rowset=256
      exec_params_([t1.c1(:0)]), onetime_exprs_(nil), init_plan_idxs_(nil), use_batch=true
  7 - output([t1.c1], [t1.c2], [t1.c3]), filter(nil), rowset=256
  8 - output([t1.c1], [t1.c2], [t1.c3]), filter(nil), rowset=256
      force partition granule
  9 - output([t1.c1], [t1.c2], [t1.c3]), filter(nil), rowset=256
 10 - output([t1.c1], [t1.c2], [t1.c3]), filter(nil), rowset=256
      access([t1.c1], [t1.c2], [t1.c3]), partitions(p[0-3])
      is_index_back=false, is_global_index=false,
      range_key([t1.c1]), range(MIN ; MAX)always true
 11 - output([t2.c1]), filter(nil), rowset=256
      access([GROUP_ID], [t2.c1]), partitions(p[0-4])
      is_index_back=false, is_global_index=false,
      range_key([t2.c1]), range(MIN ; MAX)always true,
      range_cond([:0 = t2.c1])
select /*+blocking('all')*/ * from t1 order by c1,(select c1 from t2 where t1.c1=t2.c1);
+----+------+------+
| c1 | c2   | c3   |
+----+------+------+
|  1 |    1 |    1 |
|  2 |    2 |    2 |
|  3 |    3 |    3 |
+----+------+------+
EXPLAIN select /*+blocking('all')*/ * from t1 order by c1,(select c1 from t2 where t1.c1=t2.c1 order by c1,(select c1 from t3 where t1.c1=t3.c1));
Query Plan
=========================================================================
|ID|OPERATOR                             |NAME    |EST.ROWS|EST.TIME(us)|
-------------------------------------------------------------------------
|0 |MATERIAL                             |        |3       |604         |
|1 |└─PX COORDINATOR MERGE SORT          |        |3       |604         |
|2 |  └─EXCHANGE OUT DISTR               |:EX10000|3       |603         |
|3 |    └─MATERIAL                       |        |3       |599         |
|4 |      └─SORT                         |        |3       |599         |
|5 |        └─MATERIAL                   |        |3       |599         |
|6 |          └─SUBPLAN FILTER           |        |3       |599         |
|7 |            ├─MATERIAL               |        |3       |7           |
|8 |            │ └─PX PARTITION ITERATOR|        |3       |7           |
|9 |            │   └─MATERIAL           |        |3       |7           |
|10|            │     └─TABLE FULL SCAN  |t1      |3       |7           |
|11|            └─SUBPLAN FILTER         |        |1       |198         |
|12|              ├─DISTRIBUTED TABLE GET|t2      |1       |90          |
|13|              └─DISTRIBUTED TABLE GET|t3      |1       |108         |
=========================================================================
Outputs & filters:
-------------------------------------
  0 - output([t1.c1], [t1.c2], [t1.c3]), filter(nil), rowset=256
  1 - output([t1.c1], [t1.c2], [t1.c3]), filter(nil), rowset=256
      sort_keys([t1.c1, ASC], [subquery(1), ASC])
  2 - output([t1.c1], [t1.c2], [t1.c3], [subquery(1)]), filter(nil), rowset=256
      dop=1
  3 - output([t1.c1], [t1.c2], [t1.c3], [subquery(1)]), filter(nil), rowset=256
  4 - output([t1.c1], [t1.c2], [t1.c3], [subquery(1)]), filter(nil), rowset=256
      sort_keys([t1.c1, ASC], [subquery(1), ASC]), local merge sort
  5 - output([t1.c1], [t1.c2], [t1.c3], [subquery(1)]), filter(nil), rowset=256
  6 - output([t1.c1], [t1.c2], [t1.c3], [subquery(1)]), filter(nil), rowset=256
      exec_params_([t1.c1(:0)]), onetime_exprs_(nil), init_plan_idxs_(nil), use_batch=false
  7 - output([t1.c1], [t1.c2], [t1.c3]), filter(nil), rowset=256
  8 - output([t1.c1], [t1.c2], [t1.c3]), filter(nil), rowset=256
      force partition granule
  9 - output([t1.c1], [t1.c2], [t1.c3]), filter(nil), rowset=256
 10 - output([t1.c1], [t1.c2], [t1.c3]), filter(nil), rowset=256
      access([t1.c1], [t1.c2], [t1.c3]), partitions(p[0-3])
      is_index_back=false, is_global_index=false,
      range_key([t1.c1]), range(MIN ; MAX)always true
 11 - output([t2.c1]), filter(nil), rowset=256
      exec_params_(nil), onetime_exprs_([subquery(1)(:1)]), init_plan_idxs_(nil), use_batch=false
 12 - output([t2.c1]), filter(nil), rowset=256
      access([t2.c1]), partitions(p[0-4])
      is_index_back=false, is_global_index=false,
      range_key([t2.c1]), range(MIN ; MAX)always true,
      range_cond([:0 = t2.c1])
 13 - output([t3.c1]), filter(nil), rowset=256
      access([t3.c1]), partitions(p[0-5])
      is_index_back=false, is_global_index=false,
      range_key([t3.c1]), range(MIN ; MAX)always true,
      range_cond([:0 = t3.c1])
select /*+blocking('all')*/ * from t1 order by c1,(select c1 from t2 where t1.c1=t2.c1 order by c1,(select c1 from t3 where t1.c1=t3.c1));
+----+------+------+
| c1 | c2   | c3   |
+----+------+------+
|  1 |    1 |    1 |
|  2 |    2 |    2 |
|  3 |    3 |    3 |
+----+------+------+

## 3 multi-level
EXPLAIN select /*+use_hash(t1 t2), blocking('all'), blocking(0,1,2), blocking('dfo')*/ t1.c1, t2.c1 from t1 full join t2 on t1.c1 = t2.c1 order by t1.c1, t2.c1;
Query Plan
===============================================================================
|ID|OPERATOR                                   |NAME    |EST.ROWS|EST.TIME(us)|
-------------------------------------------------------------------------------
|0 |MATERIAL                                   |        |3       |21          |
|1 |└─PX COORDINATOR MERGE SORT                |        |3       |21          |
|2 |  └─EXCHANGE OUT DISTR                     |:EX10001|3       |20          |
|3 |    └─MATERIAL                             |        |3       |18          |
|4 |      └─SORT                               |        |3       |18          |
|5 |        └─MATERIAL                         |        |3       |18          |
|6 |          └─HASH FULL OUTER JOIN           |        |3       |18          |
|7 |            ├─MATERIAL                     |        |3       |9           |
|8 |            │ └─EXCHANGE IN DISTR          |        |3       |9           |
|9 |            │   └─EXCHANGE OUT DISTR (PKEY)|:EX10000|3       |8           |
|10|            │     └─MATERIAL               |        |3       |7           |
|11|            │       └─PX PARTITION ITERATOR|        |3       |7           |
|12|            │         └─MATERIAL           |        |3       |7           |
|13|            │           └─TABLE FULL SCAN  |t1      |3       |7           |
|14|            └─MATERIAL                     |        |3       |9           |
|15|              └─PX PARTITION ITERATOR      |        |3       |9           |
|16|                └─MATERIAL                 |        |3       |9           |
|17|                  └─TABLE FULL SCAN        |t2      |3       |9           |
===============================================================================
Outputs & filters:
-------------------------------------
  0 - output([t1.c1], [t2.c1]), filter(nil), rowset=256
  1 - output([t1.c1], [t2.c1]), filter(nil), rowset=256
      sort_keys([t1.c1, ASC], [t2.c1, ASC])
  2 - output([t1.c1], [t2.c1]), filter(nil), rowset=256
      dop=1
  3 - output([t1.c1], [t2.c1]), filter(nil), rowset=256
  4 - output([t1.c1], [t2.c1]), filter(nil), rowset=256
      sort_keys([t1.c1, ASC], [t2.c1, ASC])
  5 - output([t1.c1], [t2.c1]), filter(nil), rowset=256
  6 - output([t1.c1], [t2.c1]), filter(nil), rowset=256
      equal_conds([t1.c1 = t2.c1]), other_conds(nil)
  7 - output([t1.c1]), filter(nil), rowset=256
  8 - output([t1.c1]), filter(nil), rowset=256
  9 - output([t1.c1]), filter(nil), rowset=256
      (#keys=1, [t1.c1]), dop=1
 10 - output([t1.c1]), filter(nil), rowset=256
 11 - output([t1.c1]), filter(nil), rowset=256
      force partition granule
 12 - output([t1.c1]), filter(nil), rowset=256
 13 - output([t1.c1]), filter(nil), rowset=256
      access([t1.c1]), partitions(p[0-3])
      is_index_back=false, is_global_index=false,
      range_key([t1.c1]), range(MIN ; MAX)always true
 14 - output([t2.c1]), filter(nil), rowset=256
 15 - output([t2.c1]), filter(nil), rowset=256
      affinitize, force partition granule
 16 - output([t2.c1]), filter(nil), rowset=256
 17 - output([t2.c1]), filter(nil), rowset=256
      access([t2.c1]), partitions(p[0-4])
      is_index_back=false, is_global_index=false,
      range_key([t2.c1]), range(MIN ; MAX)always true
select /*+use_hash(t1 t2), blocking('all'), blocking(0,1,2), blocking('dfo')*/ t1.c1, t2.c1 from t1 full join t2 on t1.c1 = t2.c1 order by t1.c1, t2.c1;
+----+----+
| c1 | c1 |
+----+----+
|  1 |  1 |
|  2 |  2 |
|  3 |  3 |
+----+----+
EXPLAIN select /*+use_mj(t1 t2), blocking('all'), blocking(0,1,2), blocking('dfo')*/ t1.c1, t2.c1 from t1 full join t2 on t1.c1 = t2.c1 order by t1.c1, t2.c1;
Query Plan
===============================================================================
|ID|OPERATOR                                   |NAME    |EST.ROWS|EST.TIME(us)|
-------------------------------------------------------------------------------
|0 |MATERIAL                                   |        |3       |21          |
|1 |└─PX COORDINATOR MERGE SORT                |        |3       |21          |
|2 |  └─EXCHANGE OUT DISTR                     |:EX10001|3       |20          |
|3 |    └─MATERIAL                             |        |3       |18          |
|4 |      └─SORT                               |        |3       |18          |
|5 |        └─MATERIAL                         |        |3       |18          |
|6 |          └─HASH FULL OUTER JOIN           |        |3       |18          |
|7 |            ├─MATERIAL                     |        |3       |9           |
|8 |            │ └─EXCHANGE IN DISTR          |        |3       |9           |
|9 |            │   └─EXCHANGE OUT DISTR (PKEY)|:EX10000|3       |8           |
|10|            │     └─MATERIAL               |        |3       |7           |
|11|            │       └─PX PARTITION ITERATOR|        |3       |7           |
|12|            │         └─MATERIAL           |        |3       |7           |
|13|            │           └─TABLE FULL SCAN  |t1      |3       |7           |
|14|            └─MATERIAL                     |        |3       |9           |
|15|              └─PX PARTITION ITERATOR      |        |3       |9           |
|16|                └─MATERIAL                 |        |3       |9           |
|17|                  └─TABLE FULL SCAN        |t2      |3       |9           |
===============================================================================
Outputs & filters:
-------------------------------------
  0 - output([t1.c1], [t2.c1]), filter(nil), rowset=256
  1 - output([t1.c1], [t2.c1]), filter(nil), rowset=256
      sort_keys([t1.c1, ASC], [t2.c1, ASC])
  2 - output([t1.c1], [t2.c1]), filter(nil), rowset=256
      dop=1
  3 - output([t1.c1], [t2.c1]), filter(nil), rowset=256
  4 - output([t1.c1], [t2.c1]), filter(nil), rowset=256
      sort_keys([t1.c1, ASC], [t2.c1, ASC])
  5 - output([t1.c1], [t2.c1]), filter(nil), rowset=256
  6 - output([t1.c1], [t2.c1]), filter(nil), rowset=256
      equal_conds([t1.c1 = t2.c1]), other_conds(nil)
  7 - output([t1.c1]), filter(nil), rowset=256
  8 - output([t1.c1]), filter(nil), rowset=256
  9 - output([t1.c1]), filter(nil), rowset=256
      (#keys=1, [t1.c1]), dop=1
 10 - output([t1.c1]), filter(nil), rowset=256
 11 - output([t1.c1]), filter(nil), rowset=256
      force partition granule
 12 - output([t1.c1]), filter(nil), rowset=256
 13 - output([t1.c1]), filter(nil), rowset=256
      access([t1.c1]), partitions(p[0-3])
      is_index_back=false, is_global_index=false,
      range_key([t1.c1]), range(MIN ; MAX)always true
 14 - output([t2.c1]), filter(nil), rowset=256
 15 - output([t2.c1]), filter(nil), rowset=256
      affinitize, force partition granule
 16 - output([t2.c1]), filter(nil), rowset=256
 17 - output([t2.c1]), filter(nil), rowset=256
      access([t2.c1]), partitions(p[0-4])
      is_index_back=false, is_global_index=false,
      range_key([t2.c1]), range(MIN ; MAX)always true
select /*+use_mj(t1 t2), blocking('all'), blocking(0,1,2), blocking('dfo')*/ t1.c1, t2.c1 from t1 full join t2 on t1.c1 = t2.c1 order by t1.c1, t2.c1;
+----+----+
| c1 | c1 |
+----+----+
|  1 |  1 |
|  2 |  2 |
|  3 |  3 |
+----+----+

## clear tables
drop table if exists t1,t2,t3;
