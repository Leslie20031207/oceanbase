# Test of SQL window functions for removable.
# ----------------------------------------------------------------------
drop database if exists removal;
create database removal;
use removal;
create table test_window
(
c1             integer              ,
c2             integer              ,
c3             integer              ,
c4             integer              ,
c5             double               ,
c6             float                ,
c7             integer unsigned     ,
c8             integer              ,
c9             integer
);
insert into test_window values(1, 1, 1, 4305, 1.1, 1.2, 1, 3, 4);
insert into test_window values(1, 1, 2, 2823, 2.1, 2.2, 2, 1, 1);
insert into test_window values(1, 1, 3, 9148, 3.1, 3.2, 3, 4, 3);
insert into test_window values(1, 1, 4, 5573, 4.1, 4.2, 4, 2, 3);
insert into test_window values(1, 1, 5, 698, 5.1, 5.2, 5, 2, 5);
insert into test_window values(1, 1, 6, 1783, 6.1, 6.2, 6, 5, 8);
insert into test_window values(1, 1, 7, 2628, 7.1, 7.2, 7, 5, 2);
insert into test_window values(1, 1, 8, 2819, 8.1, 8.2, 8, 6, 1);
insert into test_window values(1, 1, 9, 545, 9.1, 9.2, 9, 8, 6);
insert into test_window values(1, 1, 10, 1790, 10.1, 10.2, 10, 6, 8);
insert into test_window values(1, 2, 11, 3494, 11.1, 11.2, 11, 1, 1);
insert into test_window values(1, 2, 12, 4419, 12.1, 12.2, 12, 4, 3);
insert into test_window values(1, 2, 13, 7885, 13.1, 13.2, 13, 1, 2);
insert into test_window values(1, 2, 14, 9860, 14.1, 14.2, 14, 1, 4);
insert into test_window values(1, 2, 15, 979, 15.1, 15.2, 15, 1, 5);
insert into test_window values(1, 2, 16, 8563, 16.1, 16.2, 16, 4, 8);
insert into test_window values(1, 2, 17, 3914, 17.1, 17.2, 17, 4, 2);
insert into test_window values(1, 2, 18, 3736, 18.1, 18.2, 18, 5, 1);
insert into test_window values(1, 2, 19, 1964, 19.1, 19.2, 19, 5, 6);
insert into test_window values(1, 2, 20, 2848, 20.1, 20.2, 20, 8, 3);
insert into test_window values(1, 3, 21, 335, 21.1, 21.2, 21, 3, 2);
insert into test_window values(1, 3, 22, 2210, 22.1, 22.2, 22, 2, 5);
insert into test_window values(1, 3, 23, 3416, 23.1, 23.2, 23, 5, 0);
insert into test_window values(1, 3, 24, 2001, 24.1, 24.2, 24, 7, 1);
insert into test_window values(1, 3, 25, 1621, 25.1, 25.2, 25, 1, 0);
insert into test_window values(1, 3, 26, 2027, 26.1, 26.2, 26, 2, 5);
insert into test_window values(1, 3, 27, 1771, 27.1, 27.2, 27, 4, 2);
insert into test_window values(1, 3, 28, 6742, 28.1, 28.2, 28, 5, 1);
insert into test_window values(1, 3, 29, 956, 29.1, 29.2, 29, 1, 1);
insert into test_window values(1, 3, 30, 1877, 30.1, 30.2, 30, 3, 3);
insert into test_window values(1, 4, 31, 9193, 31.1, 31.2, 31, 2, 5);
insert into test_window values(1, 4, 32, 3085, 32.1, 32.2, 32, 7, 1);
insert into test_window values(1, 4, 33, 2293, 33.1, 33.2, 33, 1, 8);
insert into test_window values(1, 4, 34, 154, 34.1, 34.2, 34, 4, 2);
insert into test_window values(1, 4, 35, 2731, 35.1, 35.2, 35, 4, 2);
insert into test_window values(1, 4, 36, 2399, 36.1, 36.2, 36, 2, 1);
insert into test_window values(1, 4, 37, 1770, 37.1, 37.2, 37, 6, 2);
insert into test_window values(1, 4, 38, 3047, 38.1, 38.2, 38, 3, 4);
insert into test_window values(1, 4, 39, 7746, 39.1, 39.2, 39, 8, 5);
insert into test_window values(1, 4, 40, 154, 40.1, 40.2, 40, 2, 1);
insert into test_window values(2, 1, 1, 4305, 1.1, 1.2, 1, 3, 4);
insert into test_window values(2, 1, 2, 2823, 2.1, 2.2, 2, 1, 1);
insert into test_window values(2, 1, 3, 9148, 3.1, 3.2, 3, 4, 3);
insert into test_window values(2, 1, 4, 5573, 4.1, 4.2, 4, 2, 3);
insert into test_window values(2, 1, 5, 698, 5.1, 5.2, 5, 2, 5);
insert into test_window values(2, 1, 6, 1783, 6.1, 6.2, 6, 5, 8);
insert into test_window values(2, 1, 7, 2628, 7.1, 7.2, 7, 5, 2);
insert into test_window values(2, 1, 8, 2819, 8.1, 8.2, 8, 6, 1);
insert into test_window values(2, 1, 9, 545, 9.1, 9.2, 9, 8, 6);
insert into test_window values(2, 1, 10, 1790, 10.1, 10.2, 10, 6, 8);
insert into test_window values(2, 2, 11, 3494, 11.1, 11.2, 11, 1, 1);
insert into test_window values(2, 2, 12, 4419, 12.1, 12.2, 12, 4, 3);
insert into test_window values(2, 2, 13, 7885, 13.1, 13.2, 13, 1, 2);
insert into test_window values(2, 2, 14, 9860, 14.1, 14.2, 14, 1, 4);
insert into test_window values(2, 2, 15, 979, 15.1, 15.2, 15, 1, 5);
insert into test_window values(2, 2, 16, 8563, 16.1, 16.2, 16, 4, 8);
insert into test_window values(2, 2, 17, 3914, 17.1, 17.2, 17, 4, 2);
insert into test_window values(2, 2, 18, 3736, 18.1, 18.2, 18, 5, 1);
insert into test_window values(2, 2, 19, 1964, 19.1, 19.2, 19, 5, 6);
insert into test_window values(2, 2, 20, 2848, 20.1, 20.2, 20, 8, 3);
insert into test_window values(2, 3, 21, 335, 21.1, 21.2, 21, 3, 2);
insert into test_window values(2, 3, 22, 2210, 22.1, 22.2, 22, 2, 5);
insert into test_window values(2, 3, 23, 3416, 23.1, 23.2, 23, 5, 0);
insert into test_window values(2, 3, 24, 2001, 24.1, 24.2, 24, 7, 1);
insert into test_window values(2, 3, 25, 1621, 25.1, 25.2, 25, 1, 0);
insert into test_window values(2, 3, 26, 2027, 26.1, 26.2, 26, 2, 5);
insert into test_window values(2, 3, 27, 1771, 27.1, 27.2, 27, 4, 2);
insert into test_window values(2, 3, 28, 6742, 28.1, 28.2, 28, 5, 1);
insert into test_window values(2, 3, 29, 956, 29.1, 29.2, 29, 1, 1);
insert into test_window values(2, 3, 30, 1877, 30.1, 30.2, 30, 3, 3);
insert into test_window values(2, 4, 31, 9193, 31.1, 31.2, 31, 2, 5);
insert into test_window values(2, 4, 32, 3085, 32.1, 32.2, 32, 7, 1);
insert into test_window values(2, 4, 33, 2293, 33.1, 33.2, 33, 1, 8);
insert into test_window values(2, 4, 34, 154, 34.1, 34.2, 34, 4, 2);
insert into test_window values(2, 4, 35, 2731, 35.1, 35.2, 35, 4, 2);
insert into test_window values(2, 4, 36, 2399, 36.1, 36.2, 36, 2, 1);
insert into test_window values(2, 4, 37, 1770, 37.1, 37.2, 37, 6, 2);
insert into test_window values(2, 4, 38, 3047, 38.1, 38.2, 38, 3, 4);
insert into test_window values(2, 4, 39, 7746, 39.1, 39.2, 39, 8, 5);
insert into test_window values(2, 4, 40, 154, 40.1, 40.2, 40, 2, 1);
# test rows for removable.
# test sum(), int for removable.
select sum(c1) over (partition by c1 order by c3 rows between 1 preceding and 1 following) from test_window;
sum(c1) over (partition by c1 order by c3 rows between 1 preceding and 1 following)
2
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
2
4
6
6
6
6
6
6
6
6
6
6
6
6
6
6
6
6
6
6
6
6
6
6
6
6
6
6
6
6
6
6
6
6
6
6
6
6
6
6
4
# test max(), int for removable. max() only records max value index, not concern data type. 
select max(c4) over (partition by c1 order by c3 rows between 5 preceding and 5 following) from test_window;
max(c4) over (partition by c1 order by c3 rows between 5 preceding and 5 following)
9148
9148
9148
9148
9148
9148
9148
9148
9860
9860
9860
9860
9860
9860
9860
9860
9860
9860
9860
8563
8563
3914
6742
6742
6742
9193
9193
9193
9193
9193
9193
9193
9193
9193
9193
9193
7746
7746
7746
7746
9148
9148
9148
9148
9148
9148
9148
9148
9860
9860
9860
9860
9860
9860
9860
9860
9860
9860
9860
8563
8563
3914
6742
6742
6742
9193
9193
9193
9193
9193
9193
9193
9193
9193
9193
9193
7746
7746
7746
7746
# test min(), int for removable. min() only records min value index, not concern data type. 
select min(c4) over (partition by c1 order by c3 rows between 5 preceding and 5 following) from test_window;
min(c4) over (partition by c1 order by c3 rows between 5 preceding and 5 following)
698
698
698
545
545
545
545
545
545
545
545
545
545
545
979
335
335
335
335
335
335
335
335
335
335
335
956
956
154
154
154
154
154
154
154
154
154
154
154
154
698
698
698
545
545
545
545
545
545
545
545
545
545
545
979
335
335
335
335
335
335
335
335
335
335
335
956
956
154
154
154
154
154
154
154
154
154
154
154
154
# test count(), int for removable.
select count(c1) over (partition by c1 order by c3 rows between 1 preceding and 1 following) from test_window;
count(c1) over (partition by c1 order by c3 rows between 1 preceding and 1 following)
2
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
2
2
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
2
# test avg(), int for removable.
select avg(c4) over (partition by c1 order by c3 rows between 1 preceding and 1 following) from test_window;
avg(c4) over (partition by c1 order by c3 rows between 1 preceding and 1 following)
3564.0000
5425.3333
5848.0000
5139.6667
2684.6667
1703.0000
2410.0000
1997.3333
1718.0000
1943.0000
3234.3333
5266.0000
7388.0000
6241.3333
6467.3333
4485.3333
5404.3333
3204.6667
2849.3333
1715.6667
1797.6667
1987.0000
2542.3333
2346.0000
1883.0000
1806.3333
3513.3333
3156.3333
3191.6667
4008.6667
4718.3333
4857.0000
1844.0000
1726.0000
1761.3333
2300.0000
2405.3333
4187.6667
3649.0000
3950.0000
3564.0000
5425.3333
5848.0000
5139.6667
2684.6667
1703.0000
2410.0000
1997.3333
1718.0000
1943.0000
3234.3333
5266.0000
7388.0000
6241.3333
6467.3333
4485.3333
5404.3333
3204.6667
2849.3333
1715.6667
1797.6667
1987.0000
2542.3333
2346.0000
1883.0000
1806.3333
3513.3333
3156.3333
3191.6667
4008.6667
4718.3333
4857.0000
1844.0000
1726.0000
1761.3333
2300.0000
2405.3333
4187.6667
3649.0000
3950.0000
# test sum(), double for removable.
# test sum(), float for removable.
select sum(c6) over (partition by c1 order by c3 rows between 1 preceding and 1 following) from test_window;
sum(c6) over (partition by c1 order by c3 rows between 1 preceding and 1 following)
3.4000000953674316
6.6000001430511475
9.599999904632568
12.59999966621399
15.59999942779541
18.59999942779541
21.59999942779541
24.59999942779541
27.59999942779541
30.59999942779541
33.59999942779541
36.59999942779541
39.59999942779541
42.59999942779541
45.60000038146973
48.60000133514404
51.60000228881836
54.60000228881836
57.60000228881836
60.60000228881836
63.60000228881836
66.60000228881836
69.60000228881836
72.60000228881836
75.60000228881836
78.60000228881836
81.60000228881836
84.60000228881836
87.60000228881836
90.60000228881836
93.60000228881836
96.60000228881836
99.60000228881836
102.60000228881836
105.60000228881836
108.60000228881836
111.60000228881836
114.60000228881836
117.60000228881836
79.4000015258789
3.4000000953674316
6.6000001430511475
9.599999904632568
12.59999966621399
15.59999942779541
18.59999942779541
21.59999942779541
24.59999942779541
27.59999942779541
30.59999942779541
33.59999942779541
36.59999942779541
39.59999942779541
42.59999942779541
45.60000038146973
48.60000133514404
51.60000228881836
54.60000228881836
57.60000228881836
60.60000228881836
63.60000228881836
66.60000228881836
69.60000228881836
72.60000228881836
75.60000228881836
78.60000228881836
81.60000228881836
84.60000228881836
87.60000228881836
90.60000228881836
93.60000228881836
96.60000228881836
99.60000228881836
102.60000228881836
105.60000228881836
108.60000228881836
111.60000228881836
114.60000228881836
117.60000228881836
79.4000015258789
# test sum(), int unsigned for removable.
select sum(c7) over (partition by c1 order by c3 rows between 1 preceding and 1 following) from test_window;
sum(c7) over (partition by c1 order by c3 rows between 1 preceding and 1 following)
3
6
9
12
15
18
21
24
27
30
33
36
39
42
45
48
51
54
57
60
63
66
69
72
75
78
81
84
87
90
93
96
99
102
105
108
111
114
117
79
3
6
9
12
15
18
21
24
27
30
33
36
39
42
45
48
51
54
57
60
63
66
69
72
75
78
81
84
87
90
93
96
99
102
105
108
111
114
117
79
# test count(), double for removable. count() only records count, not concern data type. 
select count(c5) over (partition by c1 order by c3 rows between 1 preceding and 1 following) from test_window;
count(c5) over (partition by c1 order by c3 rows between 1 preceding and 1 following)
2
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
2
2
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
2
# test avg(), double for removable.
# test sum(), mul_window in different partition for removable.
select sum(c1) over (partition by c3 order by c3 rows between 1 preceding and 1 following) , sum(c1) over (partition by c1 order by c3 rows between 1 preceding and 1 following) from test_window;
sum(c1) over (partition by c3 order by c3 rows between 1 preceding and 1 following)	sum(c1) over (partition by c1 order by c3 rows between 1 preceding and 1 following)
3	2
3	3
3	3
3	3
3	3
3	3
3	3
3	3
3	3
3	3
3	3
3	3
3	3
3	3
3	3
3	3
3	3
3	3
3	3
3	3
3	3
3	3
3	3
3	3
3	3
3	3
3	3
3	3
3	3
3	3
3	3
3	3
3	3
3	3
3	3
3	3
3	3
3	3
3	3
3	2
3	4
3	6
3	6
3	6
3	6
3	6
3	6
3	6
3	6
3	6
3	6
3	6
3	6
3	6
3	6
3	6
3	6
3	6
3	6
3	6
3	6
3	6
3	6
3	6
3	6
3	6
3	6
3	6
3	6
3	6
3	6
3	6
3	6
3	6
3	6
3	6
3	6
3	6
3	6
3	4
# test sum(), max(), mul_window in different partition for removable.
select max(c4) over (partition by c3 order by c3 rows between 5 preceding and 5 following) , sum(c1) over (partition by c1 order by c3 rows between 1 preceding and 1 following) from test_window;
max(c4) over (partition by c3 order by c3 rows between 5 preceding and 5 following)	sum(c1) over (partition by c1 order by c3 rows between 1 preceding and 1 following)
4305	2
2823	3
9148	3
5573	3
698	3
1783	3
2628	3
2819	3
545	3
1790	3
3494	3
4419	3
7885	3
9860	3
979	3
8563	3
3914	3
3736	3
1964	3
2848	3
335	3
2210	3
3416	3
2001	3
1621	3
2027	3
1771	3
6742	3
956	3
1877	3
9193	3
3085	3
2293	3
154	3
2731	3
2399	3
1770	3
3047	3
7746	3
154	2
4305	4
2823	6
9148	6
5573	6
698	6
1783	6
2628	6
2819	6
545	6
1790	6
3494	6
4419	6
7885	6
9860	6
979	6
8563	6
3914	6
3736	6
1964	6
2848	6
335	6
2210	6
3416	6
2001	6
1621	6
2027	6
1771	6
6742	6
956	6
1877	6
9193	6
3085	6
2293	6
154	6
2731	6
2399	6
1770	6
3047	6
7746	6
154	4
# test max(), min(), mul_window in different partition with common subset "c1" for removable.
select max(c4) over (partition by c1 order by c3 rows between 5 preceding and 5 following) , min(c4) over (partition by c1,c2 order by c3 rows between 5 preceding and 5 following) from test_window;
max(c4) over (partition by c1 order by c3 rows between 5 preceding and 5 following)	min(c4) over (partition by c1,c2 order by c3 rows between 5 preceding and 5 following)
9148	698
9148	698
9148	698
9148	545
9148	545
9148	545
9148	545
9148	545
9860	545
9860	545
9860	979
9860	979
9860	979
9860	979
9860	979
9860	979
9860	979
9860	979
9860	979
8563	979
8563	335
3914	335
6742	335
6742	335
6742	335
9193	335
9193	956
9193	956
9193	956
9193	956
9193	154
9193	154
9193	154
9193	154
9193	154
9193	154
7746	154
7746	154
7746	154
7746	154
9148	698
9148	698
9148	698
9148	545
9148	545
9148	545
9148	545
9148	545
9860	545
9860	545
9860	979
9860	979
9860	979
9860	979
9860	979
9860	979
9860	979
9860	979
9860	979
8563	979
8563	335
3914	335
6742	335
6742	335
6742	335
9193	335
9193	956
9193	956
9193	956
9193	956
9193	154
9193	154
9193	154
9193	154
9193	154
9193	154
7746	154
7746	154
7746	154
7746	154
# test avg(), sum(), mul_window in different partition with common subset "c1" for removable.
select avg(c4) over (partition by c1 order by c3 rows between 5 preceding and 5 following) , sum(c4) over (partition by c1,c2 order by c3 rows between 5 preceding and 5 following) from test_window;
avg(c4) over (partition by c1 order by c3 rows between 5 preceding and 5 following)	sum(c4) over (partition by c1,c2 order by c3 rows between 5 preceding and 5 following)
4055.0000	24330
3851.1429	26958
3722.1250	29777
3369.1111	30322
3211.2000	32112
3236.9091	32112
3247.2727	27807
3707.4545	24984
3772.1818	15836
3354.5455	10263
4069.5455	35200
4263.2727	39114
4364.0000	42850
4286.2727	44814
4495.6364	47662
4363.3636	47662
4246.6364	44168
4155.4545	39749
3620.5455	31864
2871.5455	22004
2966.8182	11610
2349.3636	13381
2606.4545	20123
2353.7273	21079
2345.8182	22956
2922.6364	22956
3172.6364	22621
3180.1818	20411
2883.6364	16995
2950.0000	14994
3020.7273	19855
2997.3636	21625
3113.3636	24672
3204.6364	32418
3131.7273	32572
3257.2000	32572
2597.6667	23379
2536.7500	20294
2571.5714	18001
2974.5000	17847
4055.0000	24330
3851.1429	26958
3722.1250	29777
3369.1111	30322
3211.2000	32112
3236.9091	32112
3247.2727	27807
3707.4545	24984
3772.1818	15836
3354.5455	10263
4069.5455	35200
4263.2727	39114
4364.0000	42850
4286.2727	44814
4495.6364	47662
4363.3636	47662
4246.6364	44168
4155.4545	39749
3620.5455	31864
2871.5455	22004
2966.8182	11610
2349.3636	13381
2606.4545	20123
2353.7273	21079
2345.8182	22956
2922.6364	22956
3172.6364	22621
3180.1818	20411
2883.6364	16995
2950.0000	14994
3020.7273	19855
2997.3636	21625
3113.3636	24672
3204.6364	32418
3131.7273	32572
3257.2000	32572
2597.6667	23379
2536.7500	20294
2571.5714	18001
2974.5000	17847
# test range for removable.
# test max(), int for removable. max() only records max value index, not concern data type. 
select max(c4) over (partition by c1 order by c2 range between 1 preceding and 1 following) from test_window;
max(c4) over (partition by c1 order by c2 range between 1 preceding and 1 following)
9860
9860
9860
9860
9860
9860
9860
9860
9860
9860
9860
9860
9860
9860
9860
9860
9860
9860
9860
9860
9860
9860
9860
9860
9860
9860
9860
9860
9860
9860
9193
9193
9193
9193
9193
9193
9193
9193
9193
9193
9860
9860
9860
9860
9860
9860
9860
9860
9860
9860
9860
9860
9860
9860
9860
9860
9860
9860
9860
9860
9860
9860
9860
9860
9860
9860
9860
9860
9860
9860
9193
9193
9193
9193
9193
9193
9193
9193
9193
9193
# test min(), int for removable. min() only records min value index, not concern data type. 
select min(c4) over (partition by c1 order by c2 range between 1 preceding and 1 following) from test_window;
min(c4) over (partition by c1 order by c2 range between 1 preceding and 1 following)
545
545
545
545
545
545
545
545
545
545
335
335
335
335
335
335
335
335
335
335
154
154
154
154
154
154
154
154
154
154
154
154
154
154
154
154
154
154
154
154
545
545
545
545
545
545
545
545
545
545
335
335
335
335
335
335
335
335
335
335
154
154
154
154
154
154
154
154
154
154
154
154
154
154
154
154
154
154
154
154
# test count(), int for removable. count() only records count, not concern data type. 
select count(c4) over (partition by c1 order by c2 range between 1 preceding and 1 following) from test_window;
count(c4) over (partition by c1 order by c2 range between 1 preceding and 1 following)
20
20
20
20
20
20
20
20
20
20
30
30
30
30
30
30
30
30
30
30
30
30
30
30
30
30
30
30
30
30
20
20
20
20
20
20
20
20
20
20
20
20
20
20
20
20
20
20
20
20
30
30
30
30
30
30
30
30
30
30
30
30
30
30
30
30
30
30
30
30
20
20
20
20
20
20
20
20
20
20
# test sum(), int for removable.
select sum(c1) over (partition by c1 order by c2 range between 1 preceding and 1 following) from test_window;
sum(c1) over (partition by c1 order by c2 range between 1 preceding and 1 following)
20
20
20
20
20
20
20
20
20
20
30
30
30
30
30
30
30
30
30
30
30
30
30
30
30
30
30
30
30
30
20
20
20
20
20
20
20
20
20
20
40
40
40
40
40
40
40
40
40
40
60
60
60
60
60
60
60
60
60
60
60
60
60
60
60
60
60
60
60
60
40
40
40
40
40
40
40
40
40
40
# test avg(), int for removable.
select avg(c4) over (partition by c1 order by c2 range between 1 preceding and 1 following) from test_window;
avg(c4) over (partition by c1 order by c2 range between 1 preceding and 1 following)
3988.7000
3988.7000
3988.7000
3988.7000
3988.7000
3988.7000
3988.7000
3988.7000
3988.7000
3988.7000
3424.3333
3424.3333
3424.3333
3424.3333
3424.3333
3424.3333
3424.3333
3424.3333
3424.3333
3424.3333
3439.6667
3439.6667
3439.6667
3439.6667
3439.6667
3439.6667
3439.6667
3439.6667
3439.6667
3439.6667
2776.4000
2776.4000
2776.4000
2776.4000
2776.4000
2776.4000
2776.4000
2776.4000
2776.4000
2776.4000
3988.7000
3988.7000
3988.7000
3988.7000
3988.7000
3988.7000
3988.7000
3988.7000
3988.7000
3988.7000
3424.3333
3424.3333
3424.3333
3424.3333
3424.3333
3424.3333
3424.3333
3424.3333
3424.3333
3424.3333
3439.6667
3439.6667
3439.6667
3439.6667
3439.6667
3439.6667
3439.6667
3439.6667
3439.6667
3439.6667
2776.4000
2776.4000
2776.4000
2776.4000
2776.4000
2776.4000
2776.4000
2776.4000
2776.4000
2776.4000
# test avg(), count(), mul_window in different partition with common subset "c1" for removable.
select avg(c4) over (partition by c1 order by c2 range between 1 preceding and 1 following), count(c4) over (partition by c1,c2 order by c2 range between 1 preceding and 1 following) from test_window;
avg(c4) over (partition by c1 order by c2 range between 1 preceding and 1 following)	count(c4) over (partition by c1,c2 order by c2 range between 1 preceding and 1 following)
3988.7000	10
3988.7000	10
3988.7000	10
3988.7000	10
3988.7000	10
3988.7000	10
3988.7000	10
3988.7000	10
3988.7000	10
3988.7000	10
3424.3333	10
3424.3333	10
3424.3333	10
3424.3333	10
3424.3333	10
3424.3333	10
3424.3333	10
3424.3333	10
3424.3333	10
3424.3333	10
3439.6667	10
3439.6667	10
3439.6667	10
3439.6667	10
3439.6667	10
3439.6667	10
3439.6667	10
3439.6667	10
3439.6667	10
3439.6667	10
2776.4000	10
2776.4000	10
2776.4000	10
2776.4000	10
2776.4000	10
2776.4000	10
2776.4000	10
2776.4000	10
2776.4000	10
2776.4000	10
3988.7000	10
3988.7000	10
3988.7000	10
3988.7000	10
3988.7000	10
3988.7000	10
3988.7000	10
3988.7000	10
3988.7000	10
3988.7000	10
3424.3333	10
3424.3333	10
3424.3333	10
3424.3333	10
3424.3333	10
3424.3333	10
3424.3333	10
3424.3333	10
3424.3333	10
3424.3333	10
3439.6667	10
3439.6667	10
3439.6667	10
3439.6667	10
3439.6667	10
3439.6667	10
3439.6667	10
3439.6667	10
3439.6667	10
3439.6667	10
2776.4000	10
2776.4000	10
2776.4000	10
2776.4000	10
2776.4000	10
2776.4000	10
2776.4000	10
2776.4000	10
2776.4000	10
2776.4000	10
# test max(), min(), mul_window in different partition with common subset "c1" for removable.
select max(c4) over (partition by c1 order by c2 range between 1 preceding and 1 following), min(c4) over (partition by c1,c2 order by c2 range between 1 preceding and 1 following) from test_window;
max(c4) over (partition by c1 order by c2 range between 1 preceding and 1 following)	min(c4) over (partition by c1,c2 order by c2 range between 1 preceding and 1 following)
9860	545
9860	545
9860	545
9860	545
9860	545
9860	545
9860	545
9860	545
9860	545
9860	545
9860	979
9860	979
9860	979
9860	979
9860	979
9860	979
9860	979
9860	979
9860	979
9860	979
9860	335
9860	335
9860	335
9860	335
9860	335
9860	335
9860	335
9860	335
9860	335
9860	335
9193	154
9193	154
9193	154
9193	154
9193	154
9193	154
9193	154
9193	154
9193	154
9193	154
9860	545
9860	545
9860	545
9860	545
9860	545
9860	545
9860	545
9860	545
9860	545
9860	545
9860	979
9860	979
9860	979
9860	979
9860	979
9860	979
9860	979
9860	979
9860	979
9860	979
9860	335
9860	335
9860	335
9860	335
9860	335
9860	335
9860	335
9860	335
9860	335
9860	335
9193	154
9193	154
9193	154
9193	154
9193	154
9193	154
9193	154
9193	154
9193	154
9193	154
# test max(), min(), mul_window in different partition with common subset "c1" for segment_tree, use variable intreval.
select max(c4) over (partition by c1 order by c2 range between 1 preceding and 1 following), min(c4) over (partition by c1,c2 order by c2 range between c8 preceding and c9 following) from test_window;
max(c4) over (partition by c1 order by c2 range between 1 preceding and 1 following)	min(c4) over (partition by c1,c2 order by c2 range between c8 preceding and c9 following)
9860	545
9860	545
9860	545
9860	545
9860	545
9860	545
9860	545
9860	545
9860	545
9860	545
9860	979
9860	979
9860	979
9860	979
9860	979
9860	979
9860	979
9860	979
9860	979
9860	979
9860	335
9860	335
9860	335
9860	335
9860	335
9860	335
9860	335
9860	335
9860	335
9860	335
9193	154
9193	154
9193	154
9193	154
9193	154
9193	154
9193	154
9193	154
9193	154
9193	154
9860	545
9860	545
9860	545
9860	545
9860	545
9860	545
9860	545
9860	545
9860	545
9860	545
9860	979
9860	979
9860	979
9860	979
9860	979
9860	979
9860	979
9860	979
9860	979
9860	979
9860	335
9860	335
9860	335
9860	335
9860	335
9860	335
9860	335
9860	335
9860	335
9860	335
9193	154
9193	154
9193	154
9193	154
9193	154
9193	154
9193	154
9193	154
9193	154
9193	154
# test sum(), avg(), mul_window in different partition with common subset "c1" for segment_tree, use variable intreval.
select sum(c4) over (partition by c1 order by c2 range between c8 preceding and 1 following), avg(c4) over (partition by c1,c2 order by c2 range between 1 preceding and c9 following) from test_window;
sum(c4) over (partition by c1 order by c2 range between c8 preceding and 1 following)	avg(c4) over (partition by c1,c2 order by c2 range between 1 preceding and c9 following)
79774	3211.2000
79774	3211.2000
79774	3211.2000
79774	3211.2000
79774	3211.2000
79774	3211.2000
79774	3211.2000
79774	3211.2000
79774	3211.2000
79774	3211.2000
102730	4766.2000
102730	4766.2000
102730	4766.2000
102730	4766.2000
102730	4766.2000
102730	4766.2000
102730	4766.2000
102730	4766.2000
102730	4766.2000
102730	4766.2000
135302	2295.6000
135302	2295.6000
135302	2295.6000
135302	2295.6000
135302	2295.6000
103190	2295.6000
135302	2295.6000
135302	2295.6000
103190	2295.6000
135302	2295.6000
103190	3257.2000
103190	3257.2000
135302	3257.2000
135302	3257.2000
135302	3257.2000
135302	3257.2000
135302	3257.2000
55528	3257.2000
135302	3257.2000
103190	3257.2000
79774	3211.2000
79774	3211.2000
79774	3211.2000
79774	3211.2000
79774	3211.2000
79774	3211.2000
79774	3211.2000
79774	3211.2000
79774	3211.2000
79774	3211.2000
102730	4766.2000
102730	4766.2000
102730	4766.2000
102730	4766.2000
102730	4766.2000
102730	4766.2000
102730	4766.2000
102730	4766.2000
102730	4766.2000
102730	4766.2000
135302	2295.6000
135302	2295.6000
135302	2295.6000
135302	2295.6000
103190	2295.6000
135302	2295.6000
135302	2295.6000
135302	2295.6000
103190	2295.6000
135302	2295.6000
103190	3257.2000
135302	3257.2000
55528	3257.2000
135302	3257.2000
135302	3257.2000
103190	3257.2000
135302	3257.2000
135302	3257.2000
135302	3257.2000
103190	3257.2000
# test sum(), max(), mul_window in same partition with "c1" for segment_tree, use variable intreval.
select sum(c1) over (partition by c1 order by c3 rows between c8 preceding and c9 following) , max(c4) over (partition by c1 order by c3 rows between c8 preceding and 1 following) from test_window;
sum(c1) over (partition by c1 order by c3 rows between c8 preceding and c9 following)	max(c4) over (partition by c1 order by c3 rows between c8 preceding and 1 following)
5	4305
3	9148
6	9148
6	9148
8	9148
14	9148
8	9148
8	9148
15	9148
15	5573
3	4419
8	7885
4	9860
6	9860
7	9860
13	9860
7	9860
7	9860
12	9860
12	9860
6	3736
8	3416
6	3736
9	3914
2	2027
8	2027
7	6742
7	6742
3	6742
7	9193
8	9193
9	9193
9	3085
7	9193
7	9193
4	2731
9	9193
6	7746
10	9193
3	7746
10	4305
6	9148
12	9148
12	9148
16	9148
28	9148
16	9148
16	9148
30	9148
30	5573
6	4419
16	7885
8	9860
12	9860
14	9860
26	9860
14	9860
14	9860
24	9860
24	9860
12	3736
16	3416
12	3736
18	3914
4	2027
16	2027
14	6742
14	6742
6	6742
14	9193
16	9193
18	9193
18	3085
14	9193
14	9193
8	2731
18	9193
12	7746
20	9193
6	7746
# test parallel's correctness
select /*+parallel(2)*/ sum(c1) over (partition by c1 order by c3 rows between c8 preceding and c9 following) , sum(c1) over (partition by c1 order by c3 rows between c8 preceding and c9 following), max(c4) over (partition by c1 order by c3 rows between 1 preceding and 1 following) from test_window;
sum(c1) over (partition by c1 order by c3 rows between c8 preceding and c9 following)	sum(c1) over (partition by c1 order by c3 rows between c8 preceding and c9 following)	max(c4) over (partition by c1 order by c3 rows between 1 preceding and 1 following)
5	5	4305
3	3	9148
6	6	9148
6	6	9148
8	8	5573
14	14	2628
8	8	2819
8	8	2819
15	15	2819
15	15	3494
3	3	4419
8	8	7885
4	4	9860
6	6	9860
7	7	9860
13	13	8563
7	7	8563
7	7	3914
12	12	3736
12	12	2848
6	6	2848
8	8	3416
6	6	3416
9	9	3416
2	2	2027
8	8	2027
7	7	6742
7	7	6742
3	3	6742
7	7	9193
8	8	9193
9	9	9193
9	9	3085
7	7	2731
7	7	2731
4	4	2731
9	9	3047
6	6	7746
10	10	7746
3	3	7746
10	10	4305
6	6	9148
12	12	9148
12	12	9148
16	16	5573
28	28	2628
16	16	2819
16	16	2819
30	30	2819
30	30	3494
6	6	4419
16	16	7885
8	8	9860
12	12	9860
14	14	9860
26	26	8563
14	14	8563
14	14	3914
24	24	3736
24	24	2848
12	12	2848
16	16	3416
12	12	3416
18	18	3416
4	4	2027
16	16	2027
14	14	6742
14	14	6742
6	6	6742
14	14	9193
16	16	9193
18	18	9193
18	18	3085
14	14	2731
14	14	2731
8	8	2731
18	18	3047
12	12	7746
20	20	7746
6	6	7746
drop database if exists removal;
